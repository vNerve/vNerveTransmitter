// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vNerve/bilibili/live/user_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VNerve.Bilibili.Live {

  /// <summary>Holder for reflection information generated from vNerve/bilibili/live/user_message.proto</summary>
  public static partial class UserMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for vNerve/bilibili/live/user_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cid2TmVydmUvYmlsaWJpbGkvbGl2ZS91c2VyX21lc3NhZ2UucHJvdG8SFHZO",
            "ZXJ2ZS5iaWxpYmlsaS5saXZlIvIDCgtVc2VyTWVzc2FnZRIsCgR1c2VyGAEg",
            "ASgLMh4udk5lcnZlLmJpbGliaWxpLmxpdmUuVXNlckluZm8SNwoHZGFubWFr",
            "dRgCIAEoCzIkLnZOZXJ2ZS5iaWxpYmlsaS5saXZlLkRhbm1ha3VNZXNzYWdl",
            "SAASMQoEZ2lmdBgDIAEoCzIhLnZOZXJ2ZS5iaWxpYmlsaS5saXZlLkdpZnRN",
            "ZXNzYWdlSAASPAoKc3VwZXJfY2hhdBgEIAEoCzImLnZOZXJ2ZS5iaWxpYmls",
            "aS5saXZlLlN1cGVyQ2hhdE1lc3NhZ2VIABI6CgluZXdfZ3VhcmQYBSABKAsy",
            "JS52TmVydmUuYmlsaWJpbGkubGl2ZS5OZXdHdWFyZE1lc3NhZ2VIABI+Cgt3",
            "ZWxjb21lX3ZpcBgGIAEoCzInLnZOZXJ2ZS5iaWxpYmlsaS5saXZlLldlbGNv",
            "bWVWSVBNZXNzYWdlSAASQgoNd2VsY29tZV9ndWFyZBgHIAEoCzIpLnZOZXJ2",
            "ZS5iaWxpYmlsaS5saXZlLldlbGNvbWVHdWFyZE1lc3NhZ2VIABJACgx1c2Vy",
            "X2Jsb2NrZWQYECABKAsyKC52TmVydmUuYmlsaWJpbGkubGl2ZS5Vc2VyQmxv",
            "Y2tlZE1lc3NhZ2VIAEIJCgdwYXlsb2FkIpoDCghVc2VySW5mbxILCgN1aWQY",
            "ASABKAQSDAoEbmFtZRgCIAEoCRISCgphdmF0YXJfdXJsGAMgASgJEhIKCnVz",
            "ZXJfbGV2ZWwYBCABKAUSHwoXdXNlcl9sZXZlbF9ib3JkZXJfY29sb3IYBSAB",
            "KAcSDwoFYWRtaW4YBiABKAhIABISCghtYWluX3ZpcBgHIAEoCEgBEjoKDmxp",
            "dmVfdmlwX2xldmVsGAggASgOMiIudk5lcnZlLmJpbGliaWxpLmxpdmUuTGl2",
            "ZVZpcExldmVsEg0KBXRpdGxlGAkgASgJEi4KBW1lZGFsGAogASgLMh8udk5l",
            "cnZlLmJpbGliaWxpLmxpdmUuTWVkYWxJbmZvEjUKC2d1YXJkX2xldmVsGAsg",
            "ASgOMiAudk5lcnZlLmJpbGliaWxpLmxpdmUuR3VhcmRMZXZlbBIWCg5waG9u",
            "ZV92ZXJpZmllZBgMIAEoCBIUCgxyZWd1bGFyX3VzZXIYDSABKAhCEAoOYWRt",
            "aW5fb3B0aW9uYWxCEwoRbWFpbl92aXBfb3B0aW9uYWwijwEKCU1lZGFsSW5m",
            "bxISCgptZWRhbF9uYW1lGAEgASgJEhMKC21lZGFsX2xldmVsGAIgASgNEhMK",
            "C21lZGFsX2NvbG9yGAMgASgHEhQKDHN0cmVhbWVyX3VpZBgEIAEoBBIVCg1z",
            "dHJlYW1lcl9uYW1lGAUgASgJEhcKD3N0cmVhbWVyX3Jvb21pZBgGIAEoDSJh",
            "Cg5EYW5tYWt1TWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJEj4KDGxvdHRlcnlf",
            "dHlwZRgCIAEoDjIoLnZOZXJ2ZS5iaWxpYmlsaS5saXZlLkxvdHRlcnlEYW5t",
            "YWt1VHlwZSKlAQoQU3VwZXJDaGF0TWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJ",
            "EgoKAmlkGAMgASgNEg0KBXRva2VuGAQgASgJEhEKCXByaWNlX2NueRgFIAEo",
            "DRISCgpwcmljZV9jb2luGAYgASgNEhgKEGxhc3RpbmdfdGltZV9zZWMYByAB",
            "KA0SEgoKc3RhcnRfdGltZRgIIAEoBBIQCghlbmRfdGltZRgJIAEoBCKEAQoL",
            "R2lmdE1lc3NhZ2USDwoHaXNfZ29sZBgBIAEoCBISCgp0b3RhbF9jb2luGAIg",
            "ASgNEg8KB2dpZnRfaWQYAyABKA0SEQoJZ2lmdF9uYW1lGAQgASgJEh0KFXNp",
            "bmdsZV9wcmljZV9jb2luX3JhdxgFIAEoDRINCgVjb3VudBgGIAEoDSJGChFX",
            "ZWxjb21lVklQTWVzc2FnZRIxCgVsZXZlbBgBIAEoDjIiLnZOZXJ2ZS5iaWxp",
            "YmlsaS5saXZlLkxpdmVWaXBMZXZlbCJGChNXZWxjb21lR3VhcmRNZXNzYWdl",
            "Ei8KBWxldmVsGAEgASgOMiAudk5lcnZlLmJpbGliaWxpLmxpdmUuR3VhcmRM",
            "ZXZlbCLdAQoPTmV3R3VhcmRNZXNzYWdlEi8KBWxldmVsGAEgASgOMiAudk5l",
            "cnZlLmJpbGliaWxpLmxpdmUuR3VhcmRMZXZlbBISCgp0b3RhbF9jb2luGAIg",
            "ASgNEg0KBWNvdW50GAMgASgNEkAKDmR1cmF0aW9uX2xldmVsGAQgASgOMigu",
            "dk5lcnZlLmJpbGliaWxpLmxpdmUuR3VhcmREdXJhdGlvbkxldmVsEjQKCGJ1",
            "eV90eXBlGAUgASgOMiIudk5lcnZlLmJpbGliaWxpLmxpdmUuR3VhcmRCdXlU",
            "eXBlIhQKElVzZXJCbG9ja2VkTWVzc2FnZSo7CgxMaXZlVmlwTGV2ZWwSCgoG",
            "Tk9fVklQEAASDwoLTU9OVEhMWV9WSVAQARIOCgpZRUFSTFlfVklQEAIqPAoS",
            "TG90dGVyeURhbm1ha3VUeXBlEg4KCk5PX0xPVFRFUlkQABIJCgVTVE9STRAB",
            "EgsKB0xPVFRFUlkQAio+CgpHdWFyZExldmVsEgwKCE5PX0dVQVJEEAASCgoG",
            "TEVWRUwxEAESCgoGTEVWRUwyEAISCgoGTEVWRUwzEAMqLwoMR3VhcmRCdXlU",
            "eXBlEgsKB05PX1RZUEUQABIHCgNCVVkQARIJCgVSRU5FVxACKkoKEkd1YXJk",
            "RHVyYXRpb25MZXZlbBIPCgtOT19EVVJBVElPThAAEhEKDU1PTlRITFlfR1VB",
            "UkQQARIQCgxXRUVLTFlfR1VBUkQQAkID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VNerve.Bilibili.Live.LiveVipLevel), typeof(global::VNerve.Bilibili.Live.LotteryDanmakuType), typeof(global::VNerve.Bilibili.Live.GuardLevel), typeof(global::VNerve.Bilibili.Live.GuardBuyType), typeof(global::VNerve.Bilibili.Live.GuardDurationLevel), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.UserMessage), global::VNerve.Bilibili.Live.UserMessage.Parser, new[]{ "User", "Danmaku", "Gift", "SuperChat", "NewGuard", "WelcomeVip", "WelcomeGuard", "UserBlocked" }, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.UserInfo), global::VNerve.Bilibili.Live.UserInfo.Parser, new[]{ "Uid", "Name", "AvatarUrl", "UserLevel", "UserLevelBorderColor", "Admin", "MainVip", "LiveVipLevel", "Title", "Medal", "GuardLevel", "PhoneVerified", "RegularUser" }, new[]{ "AdminOptional", "MainVipOptional" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.MedalInfo), global::VNerve.Bilibili.Live.MedalInfo.Parser, new[]{ "MedalName", "MedalLevel", "MedalColor", "StreamerUid", "StreamerName", "StreamerRoomid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.DanmakuMessage), global::VNerve.Bilibili.Live.DanmakuMessage.Parser, new[]{ "Message", "LotteryType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.SuperChatMessage), global::VNerve.Bilibili.Live.SuperChatMessage.Parser, new[]{ "Message", "Id", "Token", "PriceCny", "PriceCoin", "LastingTimeSec", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.GiftMessage), global::VNerve.Bilibili.Live.GiftMessage.Parser, new[]{ "IsGold", "TotalCoin", "GiftId", "GiftName", "SinglePriceCoinRaw", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.WelcomeVIPMessage), global::VNerve.Bilibili.Live.WelcomeVIPMessage.Parser, new[]{ "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.WelcomeGuardMessage), global::VNerve.Bilibili.Live.WelcomeGuardMessage.Parser, new[]{ "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.NewGuardMessage), global::VNerve.Bilibili.Live.NewGuardMessage.Parser, new[]{ "Level", "TotalCoin", "Count", "DurationLevel", "BuyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.UserBlockedMessage), global::VNerve.Bilibili.Live.UserBlockedMessage.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LiveVipLevel {
    [pbr::OriginalName("NO_VIP")] NoVip = 0,
    [pbr::OriginalName("MONTHLY_VIP")] MonthlyVip = 1,
    [pbr::OriginalName("YEARLY_VIP")] YearlyVip = 2,
  }

  public enum LotteryDanmakuType {
    [pbr::OriginalName("NO_LOTTERY")] NoLottery = 0,
    [pbr::OriginalName("STORM")] Storm = 1,
    [pbr::OriginalName("LOTTERY")] Lottery = 2,
  }

  public enum GuardLevel {
    [pbr::OriginalName("NO_GUARD")] NoGuard = 0,
    [pbr::OriginalName("LEVEL1")] Level1 = 1,
    [pbr::OriginalName("LEVEL2")] Level2 = 2,
    [pbr::OriginalName("LEVEL3")] Level3 = 3,
  }

  public enum GuardBuyType {
    [pbr::OriginalName("NO_TYPE")] NoType = 0,
    [pbr::OriginalName("BUY")] Buy = 1,
    [pbr::OriginalName("RENEW")] Renew = 2,
  }

  public enum GuardDurationLevel {
    [pbr::OriginalName("NO_DURATION")] NoDuration = 0,
    [pbr::OriginalName("MONTHLY_GUARD")] MonthlyGuard = 1,
    [pbr::OriginalName("WEEKLY_GUARD")] WeeklyGuard = 2,
  }

  #endregion

  #region Messages
  public sealed partial class UserMessage : pb::IMessage<UserMessage> {
    private static readonly pb::MessageParser<UserMessage> _parser = new pb::MessageParser<UserMessage>(() => new UserMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage(UserMessage other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Danmaku:
          Danmaku = other.Danmaku.Clone();
          break;
        case PayloadOneofCase.Gift:
          Gift = other.Gift.Clone();
          break;
        case PayloadOneofCase.SuperChat:
          SuperChat = other.SuperChat.Clone();
          break;
        case PayloadOneofCase.NewGuard:
          NewGuard = other.NewGuard.Clone();
          break;
        case PayloadOneofCase.WelcomeVip:
          WelcomeVip = other.WelcomeVip.Clone();
          break;
        case PayloadOneofCase.WelcomeGuard:
          WelcomeGuard = other.WelcomeGuard.Clone();
          break;
        case PayloadOneofCase.UserBlocked:
          UserBlocked = other.UserBlocked.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage Clone() {
      return new UserMessage(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::VNerve.Bilibili.Live.UserInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.UserInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "danmaku" field.</summary>
    public const int DanmakuFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.DanmakuMessage Danmaku {
      get { return payloadCase_ == PayloadOneofCase.Danmaku ? (global::VNerve.Bilibili.Live.DanmakuMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Danmaku;
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GiftMessage Gift {
      get { return payloadCase_ == PayloadOneofCase.Gift ? (global::VNerve.Bilibili.Live.GiftMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Gift;
      }
    }

    /// <summary>Field number for the "super_chat" field.</summary>
    public const int SuperChatFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.SuperChatMessage SuperChat {
      get { return payloadCase_ == PayloadOneofCase.SuperChat ? (global::VNerve.Bilibili.Live.SuperChatMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SuperChat;
      }
    }

    /// <summary>Field number for the "new_guard" field.</summary>
    public const int NewGuardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.NewGuardMessage NewGuard {
      get { return payloadCase_ == PayloadOneofCase.NewGuard ? (global::VNerve.Bilibili.Live.NewGuardMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.NewGuard;
      }
    }

    /// <summary>Field number for the "welcome_vip" field.</summary>
    public const int WelcomeVipFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.WelcomeVIPMessage WelcomeVip {
      get { return payloadCase_ == PayloadOneofCase.WelcomeVip ? (global::VNerve.Bilibili.Live.WelcomeVIPMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.WelcomeVip;
      }
    }

    /// <summary>Field number for the "welcome_guard" field.</summary>
    public const int WelcomeGuardFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.WelcomeGuardMessage WelcomeGuard {
      get { return payloadCase_ == PayloadOneofCase.WelcomeGuard ? (global::VNerve.Bilibili.Live.WelcomeGuardMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.WelcomeGuard;
      }
    }

    /// <summary>Field number for the "user_blocked" field.</summary>
    public const int UserBlockedFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.UserBlockedMessage UserBlocked {
      get { return payloadCase_ == PayloadOneofCase.UserBlocked ? (global::VNerve.Bilibili.Live.UserBlockedMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UserBlocked;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Danmaku = 2,
      Gift = 3,
      SuperChat = 4,
      NewGuard = 5,
      WelcomeVip = 6,
      WelcomeGuard = 7,
      UserBlocked = 16,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Danmaku, other.Danmaku)) return false;
      if (!object.Equals(Gift, other.Gift)) return false;
      if (!object.Equals(SuperChat, other.SuperChat)) return false;
      if (!object.Equals(NewGuard, other.NewGuard)) return false;
      if (!object.Equals(WelcomeVip, other.WelcomeVip)) return false;
      if (!object.Equals(WelcomeGuard, other.WelcomeGuard)) return false;
      if (!object.Equals(UserBlocked, other.UserBlocked)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Danmaku) hash ^= Danmaku.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Gift) hash ^= Gift.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SuperChat) hash ^= SuperChat.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.NewGuard) hash ^= NewGuard.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.WelcomeVip) hash ^= WelcomeVip.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.WelcomeGuard) hash ^= WelcomeGuard.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.UserBlocked) hash ^= UserBlocked.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Danmaku) {
        output.WriteRawTag(18);
        output.WriteMessage(Danmaku);
      }
      if (payloadCase_ == PayloadOneofCase.Gift) {
        output.WriteRawTag(26);
        output.WriteMessage(Gift);
      }
      if (payloadCase_ == PayloadOneofCase.SuperChat) {
        output.WriteRawTag(34);
        output.WriteMessage(SuperChat);
      }
      if (payloadCase_ == PayloadOneofCase.NewGuard) {
        output.WriteRawTag(42);
        output.WriteMessage(NewGuard);
      }
      if (payloadCase_ == PayloadOneofCase.WelcomeVip) {
        output.WriteRawTag(50);
        output.WriteMessage(WelcomeVip);
      }
      if (payloadCase_ == PayloadOneofCase.WelcomeGuard) {
        output.WriteRawTag(58);
        output.WriteMessage(WelcomeGuard);
      }
      if (payloadCase_ == PayloadOneofCase.UserBlocked) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(UserBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Danmaku) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Danmaku);
      }
      if (payloadCase_ == PayloadOneofCase.Gift) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
      }
      if (payloadCase_ == PayloadOneofCase.SuperChat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperChat);
      }
      if (payloadCase_ == PayloadOneofCase.NewGuard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewGuard);
      }
      if (payloadCase_ == PayloadOneofCase.WelcomeVip) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WelcomeVip);
      }
      if (payloadCase_ == PayloadOneofCase.WelcomeGuard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WelcomeGuard);
      }
      if (payloadCase_ == PayloadOneofCase.UserBlocked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserBlocked);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMessage other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::VNerve.Bilibili.Live.UserInfo();
        }
        User.MergeFrom(other.User);
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Danmaku:
          if (Danmaku == null) {
            Danmaku = new global::VNerve.Bilibili.Live.DanmakuMessage();
          }
          Danmaku.MergeFrom(other.Danmaku);
          break;
        case PayloadOneofCase.Gift:
          if (Gift == null) {
            Gift = new global::VNerve.Bilibili.Live.GiftMessage();
          }
          Gift.MergeFrom(other.Gift);
          break;
        case PayloadOneofCase.SuperChat:
          if (SuperChat == null) {
            SuperChat = new global::VNerve.Bilibili.Live.SuperChatMessage();
          }
          SuperChat.MergeFrom(other.SuperChat);
          break;
        case PayloadOneofCase.NewGuard:
          if (NewGuard == null) {
            NewGuard = new global::VNerve.Bilibili.Live.NewGuardMessage();
          }
          NewGuard.MergeFrom(other.NewGuard);
          break;
        case PayloadOneofCase.WelcomeVip:
          if (WelcomeVip == null) {
            WelcomeVip = new global::VNerve.Bilibili.Live.WelcomeVIPMessage();
          }
          WelcomeVip.MergeFrom(other.WelcomeVip);
          break;
        case PayloadOneofCase.WelcomeGuard:
          if (WelcomeGuard == null) {
            WelcomeGuard = new global::VNerve.Bilibili.Live.WelcomeGuardMessage();
          }
          WelcomeGuard.MergeFrom(other.WelcomeGuard);
          break;
        case PayloadOneofCase.UserBlocked:
          if (UserBlocked == null) {
            UserBlocked = new global::VNerve.Bilibili.Live.UserBlockedMessage();
          }
          UserBlocked.MergeFrom(other.UserBlocked);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::VNerve.Bilibili.Live.UserInfo();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            global::VNerve.Bilibili.Live.DanmakuMessage subBuilder = new global::VNerve.Bilibili.Live.DanmakuMessage();
            if (payloadCase_ == PayloadOneofCase.Danmaku) {
              subBuilder.MergeFrom(Danmaku);
            }
            input.ReadMessage(subBuilder);
            Danmaku = subBuilder;
            break;
          }
          case 26: {
            global::VNerve.Bilibili.Live.GiftMessage subBuilder = new global::VNerve.Bilibili.Live.GiftMessage();
            if (payloadCase_ == PayloadOneofCase.Gift) {
              subBuilder.MergeFrom(Gift);
            }
            input.ReadMessage(subBuilder);
            Gift = subBuilder;
            break;
          }
          case 34: {
            global::VNerve.Bilibili.Live.SuperChatMessage subBuilder = new global::VNerve.Bilibili.Live.SuperChatMessage();
            if (payloadCase_ == PayloadOneofCase.SuperChat) {
              subBuilder.MergeFrom(SuperChat);
            }
            input.ReadMessage(subBuilder);
            SuperChat = subBuilder;
            break;
          }
          case 42: {
            global::VNerve.Bilibili.Live.NewGuardMessage subBuilder = new global::VNerve.Bilibili.Live.NewGuardMessage();
            if (payloadCase_ == PayloadOneofCase.NewGuard) {
              subBuilder.MergeFrom(NewGuard);
            }
            input.ReadMessage(subBuilder);
            NewGuard = subBuilder;
            break;
          }
          case 50: {
            global::VNerve.Bilibili.Live.WelcomeVIPMessage subBuilder = new global::VNerve.Bilibili.Live.WelcomeVIPMessage();
            if (payloadCase_ == PayloadOneofCase.WelcomeVip) {
              subBuilder.MergeFrom(WelcomeVip);
            }
            input.ReadMessage(subBuilder);
            WelcomeVip = subBuilder;
            break;
          }
          case 58: {
            global::VNerve.Bilibili.Live.WelcomeGuardMessage subBuilder = new global::VNerve.Bilibili.Live.WelcomeGuardMessage();
            if (payloadCase_ == PayloadOneofCase.WelcomeGuard) {
              subBuilder.MergeFrom(WelcomeGuard);
            }
            input.ReadMessage(subBuilder);
            WelcomeGuard = subBuilder;
            break;
          }
          case 130: {
            global::VNerve.Bilibili.Live.UserBlockedMessage subBuilder = new global::VNerve.Bilibili.Live.UserBlockedMessage();
            if (payloadCase_ == PayloadOneofCase.UserBlocked) {
              subBuilder.MergeFrom(UserBlocked);
            }
            input.ReadMessage(subBuilder);
            UserBlocked = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      avatarUrl_ = other.avatarUrl_;
      userLevel_ = other.userLevel_;
      userLevelBorderColor_ = other.userLevelBorderColor_;
      liveVipLevel_ = other.liveVipLevel_;
      title_ = other.title_;
      medal_ = other.medal_ != null ? other.medal_.Clone() : null;
      guardLevel_ = other.guardLevel_;
      phoneVerified_ = other.phoneVerified_;
      regularUser_ = other.regularUser_;
      switch (other.AdminOptionalCase) {
        case AdminOptionalOneofCase.Admin:
          Admin = other.Admin;
          break;
      }

      switch (other.MainVipOptionalCase) {
        case MainVipOptionalOneofCase.MainVip:
          MainVip = other.MainVip;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 3;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 4;
    private int userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_level_border_color" field.</summary>
    public const int UserLevelBorderColorFieldNumber = 5;
    private uint userLevelBorderColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserLevelBorderColor {
      get { return userLevelBorderColor_; }
      set {
        userLevelBorderColor_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Admin {
      get { return adminOptionalCase_ == AdminOptionalOneofCase.Admin ? (bool) adminOptional_ : false; }
      set {
        adminOptional_ = value;
        adminOptionalCase_ = AdminOptionalOneofCase.Admin;
      }
    }

    /// <summary>Field number for the "main_vip" field.</summary>
    public const int MainVipFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MainVip {
      get { return mainVipOptionalCase_ == MainVipOptionalOneofCase.MainVip ? (bool) mainVipOptional_ : false; }
      set {
        mainVipOptional_ = value;
        mainVipOptionalCase_ = MainVipOptionalOneofCase.MainVip;
      }
    }

    /// <summary>Field number for the "live_vip_level" field.</summary>
    public const int LiveVipLevelFieldNumber = 8;
    private global::VNerve.Bilibili.Live.LiveVipLevel liveVipLevel_ = global::VNerve.Bilibili.Live.LiveVipLevel.NoVip;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.LiveVipLevel LiveVipLevel {
      get { return liveVipLevel_; }
      set {
        liveVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 9;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "medal" field.</summary>
    public const int MedalFieldNumber = 10;
    private global::VNerve.Bilibili.Live.MedalInfo medal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.MedalInfo Medal {
      get { return medal_; }
      set {
        medal_ = value;
      }
    }

    /// <summary>Field number for the "guard_level" field.</summary>
    public const int GuardLevelFieldNumber = 11;
    private global::VNerve.Bilibili.Live.GuardLevel guardLevel_ = global::VNerve.Bilibili.Live.GuardLevel.NoGuard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GuardLevel GuardLevel {
      get { return guardLevel_; }
      set {
        guardLevel_ = value;
      }
    }

    /// <summary>Field number for the "phone_verified" field.</summary>
    public const int PhoneVerifiedFieldNumber = 12;
    private bool phoneVerified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhoneVerified {
      get { return phoneVerified_; }
      set {
        phoneVerified_ = value;
      }
    }

    /// <summary>Field number for the "regular_user" field.</summary>
    public const int RegularUserFieldNumber = 13;
    private bool regularUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RegularUser {
      get { return regularUser_; }
      set {
        regularUser_ = value;
      }
    }

    private object adminOptional_;
    /// <summary>Enum of possible cases for the "admin_optional" oneof.</summary>
    public enum AdminOptionalOneofCase {
      None = 0,
      Admin = 6,
    }
    private AdminOptionalOneofCase adminOptionalCase_ = AdminOptionalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminOptionalOneofCase AdminOptionalCase {
      get { return adminOptionalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdminOptional() {
      adminOptionalCase_ = AdminOptionalOneofCase.None;
      adminOptional_ = null;
    }

    private object mainVipOptional_;
    /// <summary>Enum of possible cases for the "main_vip_optional" oneof.</summary>
    public enum MainVipOptionalOneofCase {
      None = 0,
      MainVip = 7,
    }
    private MainVipOptionalOneofCase mainVipOptionalCase_ = MainVipOptionalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainVipOptionalOneofCase MainVipOptionalCase {
      get { return mainVipOptionalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMainVipOptional() {
      mainVipOptionalCase_ = MainVipOptionalOneofCase.None;
      mainVipOptional_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (UserLevel != other.UserLevel) return false;
      if (UserLevelBorderColor != other.UserLevelBorderColor) return false;
      if (Admin != other.Admin) return false;
      if (MainVip != other.MainVip) return false;
      if (LiveVipLevel != other.LiveVipLevel) return false;
      if (Title != other.Title) return false;
      if (!object.Equals(Medal, other.Medal)) return false;
      if (GuardLevel != other.GuardLevel) return false;
      if (PhoneVerified != other.PhoneVerified) return false;
      if (RegularUser != other.RegularUser) return false;
      if (AdminOptionalCase != other.AdminOptionalCase) return false;
      if (MainVipOptionalCase != other.MainVipOptionalCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (UserLevelBorderColor != 0) hash ^= UserLevelBorderColor.GetHashCode();
      if (adminOptionalCase_ == AdminOptionalOneofCase.Admin) hash ^= Admin.GetHashCode();
      if (mainVipOptionalCase_ == MainVipOptionalOneofCase.MainVip) hash ^= MainVip.GetHashCode();
      if (LiveVipLevel != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) hash ^= LiveVipLevel.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (medal_ != null) hash ^= Medal.GetHashCode();
      if (GuardLevel != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) hash ^= GuardLevel.GetHashCode();
      if (PhoneVerified != false) hash ^= PhoneVerified.GetHashCode();
      if (RegularUser != false) hash ^= RegularUser.GetHashCode();
      hash ^= (int) adminOptionalCase_;
      hash ^= (int) mainVipOptionalCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AvatarUrl);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserLevel);
      }
      if (UserLevelBorderColor != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(UserLevelBorderColor);
      }
      if (adminOptionalCase_ == AdminOptionalOneofCase.Admin) {
        output.WriteRawTag(48);
        output.WriteBool(Admin);
      }
      if (mainVipOptionalCase_ == MainVipOptionalOneofCase.MainVip) {
        output.WriteRawTag(56);
        output.WriteBool(MainVip);
      }
      if (LiveVipLevel != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        output.WriteRawTag(64);
        output.WriteEnum((int) LiveVipLevel);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Title);
      }
      if (medal_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Medal);
      }
      if (GuardLevel != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        output.WriteRawTag(88);
        output.WriteEnum((int) GuardLevel);
      }
      if (PhoneVerified != false) {
        output.WriteRawTag(96);
        output.WriteBool(PhoneVerified);
      }
      if (RegularUser != false) {
        output.WriteRawTag(104);
        output.WriteBool(RegularUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserLevel);
      }
      if (UserLevelBorderColor != 0) {
        size += 1 + 4;
      }
      if (adminOptionalCase_ == AdminOptionalOneofCase.Admin) {
        size += 1 + 1;
      }
      if (mainVipOptionalCase_ == MainVipOptionalOneofCase.MainVip) {
        size += 1 + 1;
      }
      if (LiveVipLevel != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LiveVipLevel);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (medal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Medal);
      }
      if (GuardLevel != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuardLevel);
      }
      if (PhoneVerified != false) {
        size += 1 + 1;
      }
      if (RegularUser != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.UserLevelBorderColor != 0) {
        UserLevelBorderColor = other.UserLevelBorderColor;
      }
      if (other.LiveVipLevel != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        LiveVipLevel = other.LiveVipLevel;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.medal_ != null) {
        if (medal_ == null) {
          Medal = new global::VNerve.Bilibili.Live.MedalInfo();
        }
        Medal.MergeFrom(other.Medal);
      }
      if (other.GuardLevel != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        GuardLevel = other.GuardLevel;
      }
      if (other.PhoneVerified != false) {
        PhoneVerified = other.PhoneVerified;
      }
      if (other.RegularUser != false) {
        RegularUser = other.RegularUser;
      }
      switch (other.AdminOptionalCase) {
        case AdminOptionalOneofCase.Admin:
          Admin = other.Admin;
          break;
      }

      switch (other.MainVipOptionalCase) {
        case MainVipOptionalOneofCase.MainVip:
          MainVip = other.MainVip;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 32: {
            UserLevel = input.ReadInt32();
            break;
          }
          case 45: {
            UserLevelBorderColor = input.ReadFixed32();
            break;
          }
          case 48: {
            Admin = input.ReadBool();
            break;
          }
          case 56: {
            MainVip = input.ReadBool();
            break;
          }
          case 64: {
            LiveVipLevel = (global::VNerve.Bilibili.Live.LiveVipLevel) input.ReadEnum();
            break;
          }
          case 74: {
            Title = input.ReadString();
            break;
          }
          case 82: {
            if (medal_ == null) {
              Medal = new global::VNerve.Bilibili.Live.MedalInfo();
            }
            input.ReadMessage(Medal);
            break;
          }
          case 88: {
            GuardLevel = (global::VNerve.Bilibili.Live.GuardLevel) input.ReadEnum();
            break;
          }
          case 96: {
            PhoneVerified = input.ReadBool();
            break;
          }
          case 104: {
            RegularUser = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MedalInfo : pb::IMessage<MedalInfo> {
    private static readonly pb::MessageParser<MedalInfo> _parser = new pb::MessageParser<MedalInfo>(() => new MedalInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MedalInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedalInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedalInfo(MedalInfo other) : this() {
      medalName_ = other.medalName_;
      medalLevel_ = other.medalLevel_;
      medalColor_ = other.medalColor_;
      streamerUid_ = other.streamerUid_;
      streamerName_ = other.streamerName_;
      streamerRoomid_ = other.streamerRoomid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedalInfo Clone() {
      return new MedalInfo(this);
    }

    /// <summary>Field number for the "medal_name" field.</summary>
    public const int MedalNameFieldNumber = 1;
    private string medalName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MedalName {
      get { return medalName_; }
      set {
        medalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "medal_level" field.</summary>
    public const int MedalLevelFieldNumber = 2;
    private uint medalLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MedalLevel {
      get { return medalLevel_; }
      set {
        medalLevel_ = value;
      }
    }

    /// <summary>Field number for the "medal_color" field.</summary>
    public const int MedalColorFieldNumber = 3;
    private uint medalColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MedalColor {
      get { return medalColor_; }
      set {
        medalColor_ = value;
      }
    }

    /// <summary>Field number for the "streamer_uid" field.</summary>
    public const int StreamerUidFieldNumber = 4;
    private ulong streamerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamerUid {
      get { return streamerUid_; }
      set {
        streamerUid_ = value;
      }
    }

    /// <summary>Field number for the "streamer_name" field.</summary>
    public const int StreamerNameFieldNumber = 5;
    private string streamerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamerName {
      get { return streamerName_; }
      set {
        streamerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "streamer_roomid" field.</summary>
    public const int StreamerRoomidFieldNumber = 6;
    private uint streamerRoomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StreamerRoomid {
      get { return streamerRoomid_; }
      set {
        streamerRoomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MedalInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MedalInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MedalName != other.MedalName) return false;
      if (MedalLevel != other.MedalLevel) return false;
      if (MedalColor != other.MedalColor) return false;
      if (StreamerUid != other.StreamerUid) return false;
      if (StreamerName != other.StreamerName) return false;
      if (StreamerRoomid != other.StreamerRoomid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MedalName.Length != 0) hash ^= MedalName.GetHashCode();
      if (MedalLevel != 0) hash ^= MedalLevel.GetHashCode();
      if (MedalColor != 0) hash ^= MedalColor.GetHashCode();
      if (StreamerUid != 0UL) hash ^= StreamerUid.GetHashCode();
      if (StreamerName.Length != 0) hash ^= StreamerName.GetHashCode();
      if (StreamerRoomid != 0) hash ^= StreamerRoomid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MedalName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MedalName);
      }
      if (MedalLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MedalLevel);
      }
      if (MedalColor != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(MedalColor);
      }
      if (StreamerUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StreamerUid);
      }
      if (StreamerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StreamerName);
      }
      if (StreamerRoomid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(StreamerRoomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MedalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MedalName);
      }
      if (MedalLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MedalLevel);
      }
      if (MedalColor != 0) {
        size += 1 + 4;
      }
      if (StreamerUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamerUid);
      }
      if (StreamerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamerName);
      }
      if (StreamerRoomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StreamerRoomid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MedalInfo other) {
      if (other == null) {
        return;
      }
      if (other.MedalName.Length != 0) {
        MedalName = other.MedalName;
      }
      if (other.MedalLevel != 0) {
        MedalLevel = other.MedalLevel;
      }
      if (other.MedalColor != 0) {
        MedalColor = other.MedalColor;
      }
      if (other.StreamerUid != 0UL) {
        StreamerUid = other.StreamerUid;
      }
      if (other.StreamerName.Length != 0) {
        StreamerName = other.StreamerName;
      }
      if (other.StreamerRoomid != 0) {
        StreamerRoomid = other.StreamerRoomid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MedalName = input.ReadString();
            break;
          }
          case 16: {
            MedalLevel = input.ReadUInt32();
            break;
          }
          case 29: {
            MedalColor = input.ReadFixed32();
            break;
          }
          case 32: {
            StreamerUid = input.ReadUInt64();
            break;
          }
          case 42: {
            StreamerName = input.ReadString();
            break;
          }
          case 48: {
            StreamerRoomid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DanmakuMessage : pb::IMessage<DanmakuMessage> {
    private static readonly pb::MessageParser<DanmakuMessage> _parser = new pb::MessageParser<DanmakuMessage>(() => new DanmakuMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DanmakuMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DanmakuMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DanmakuMessage(DanmakuMessage other) : this() {
      message_ = other.message_;
      lotteryType_ = other.lotteryType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DanmakuMessage Clone() {
      return new DanmakuMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lottery_type" field.</summary>
    public const int LotteryTypeFieldNumber = 2;
    private global::VNerve.Bilibili.Live.LotteryDanmakuType lotteryType_ = global::VNerve.Bilibili.Live.LotteryDanmakuType.NoLottery;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.LotteryDanmakuType LotteryType {
      get { return lotteryType_; }
      set {
        lotteryType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DanmakuMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DanmakuMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (LotteryType != other.LotteryType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (LotteryType != global::VNerve.Bilibili.Live.LotteryDanmakuType.NoLottery) hash ^= LotteryType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (LotteryType != global::VNerve.Bilibili.Live.LotteryDanmakuType.NoLottery) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LotteryType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (LotteryType != global::VNerve.Bilibili.Live.LotteryDanmakuType.NoLottery) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LotteryType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DanmakuMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.LotteryType != global::VNerve.Bilibili.Live.LotteryDanmakuType.NoLottery) {
        LotteryType = other.LotteryType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            LotteryType = (global::VNerve.Bilibili.Live.LotteryDanmakuType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SuperChatMessage : pb::IMessage<SuperChatMessage> {
    private static readonly pb::MessageParser<SuperChatMessage> _parser = new pb::MessageParser<SuperChatMessage>(() => new SuperChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuperChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuperChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuperChatMessage(SuperChatMessage other) : this() {
      message_ = other.message_;
      id_ = other.id_;
      token_ = other.token_;
      priceCny_ = other.priceCny_;
      priceCoin_ = other.priceCoin_;
      lastingTimeSec_ = other.lastingTimeSec_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuperChatMessage Clone() {
      return new SuperChatMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price_cny" field.</summary>
    public const int PriceCnyFieldNumber = 5;
    private uint priceCny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PriceCny {
      get { return priceCny_; }
      set {
        priceCny_ = value;
      }
    }

    /// <summary>Field number for the "price_coin" field.</summary>
    public const int PriceCoinFieldNumber = 6;
    private uint priceCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PriceCoin {
      get { return priceCoin_; }
      set {
        priceCoin_ = value;
      }
    }

    /// <summary>Field number for the "lasting_time_sec" field.</summary>
    public const int LastingTimeSecFieldNumber = 7;
    private uint lastingTimeSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastingTimeSec {
      get { return lastingTimeSec_; }
      set {
        lastingTimeSec_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private ulong startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private ulong endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuperChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuperChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (Id != other.Id) return false;
      if (Token != other.Token) return false;
      if (PriceCny != other.PriceCny) return false;
      if (PriceCoin != other.PriceCoin) return false;
      if (LastingTimeSec != other.LastingTimeSec) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (PriceCny != 0) hash ^= PriceCny.GetHashCode();
      if (PriceCoin != 0) hash ^= PriceCoin.GetHashCode();
      if (LastingTimeSec != 0) hash ^= LastingTimeSec.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (PriceCny != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PriceCny);
      }
      if (PriceCoin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PriceCoin);
      }
      if (LastingTimeSec != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastingTimeSec);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (PriceCny != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceCny);
      }
      if (PriceCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceCoin);
      }
      if (LastingTimeSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastingTimeSec);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuperChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.PriceCny != 0) {
        PriceCny = other.PriceCny;
      }
      if (other.PriceCoin != 0) {
        PriceCoin = other.PriceCoin;
      }
      if (other.LastingTimeSec != 0) {
        LastingTimeSec = other.LastingTimeSec;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 40: {
            PriceCny = input.ReadUInt32();
            break;
          }
          case 48: {
            PriceCoin = input.ReadUInt32();
            break;
          }
          case 56: {
            LastingTimeSec = input.ReadUInt32();
            break;
          }
          case 64: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftMessage : pb::IMessage<GiftMessage> {
    private static readonly pb::MessageParser<GiftMessage> _parser = new pb::MessageParser<GiftMessage>(() => new GiftMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage(GiftMessage other) : this() {
      isGold_ = other.isGold_;
      totalCoin_ = other.totalCoin_;
      giftId_ = other.giftId_;
      giftName_ = other.giftName_;
      singlePriceCoinRaw_ = other.singlePriceCoinRaw_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage Clone() {
      return new GiftMessage(this);
    }

    /// <summary>Field number for the "is_gold" field.</summary>
    public const int IsGoldFieldNumber = 1;
    private bool isGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGold {
      get { return isGold_; }
      set {
        isGold_ = value;
      }
    }

    /// <summary>Field number for the "total_coin" field.</summary>
    public const int TotalCoinFieldNumber = 2;
    private uint totalCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCoin {
      get { return totalCoin_; }
      set {
        totalCoin_ = value;
      }
    }

    /// <summary>Field number for the "gift_id" field.</summary>
    public const int GiftIdFieldNumber = 3;
    private uint giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    /// <summary>Field number for the "gift_name" field.</summary>
    public const int GiftNameFieldNumber = 4;
    private string giftName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GiftName {
      get { return giftName_; }
      set {
        giftName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "single_price_coin_raw" field.</summary>
    public const int SinglePriceCoinRawFieldNumber = 5;
    private uint singlePriceCoinRaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SinglePriceCoinRaw {
      get { return singlePriceCoinRaw_; }
      set {
        singlePriceCoinRaw_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 6;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsGold != other.IsGold) return false;
      if (TotalCoin != other.TotalCoin) return false;
      if (GiftId != other.GiftId) return false;
      if (GiftName != other.GiftName) return false;
      if (SinglePriceCoinRaw != other.SinglePriceCoinRaw) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsGold != false) hash ^= IsGold.GetHashCode();
      if (TotalCoin != 0) hash ^= TotalCoin.GetHashCode();
      if (GiftId != 0) hash ^= GiftId.GetHashCode();
      if (GiftName.Length != 0) hash ^= GiftName.GetHashCode();
      if (SinglePriceCoinRaw != 0) hash ^= SinglePriceCoinRaw.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGold != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGold);
      }
      if (TotalCoin != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalCoin);
      }
      if (GiftId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftId);
      }
      if (GiftName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GiftName);
      }
      if (SinglePriceCoinRaw != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SinglePriceCoinRaw);
      }
      if (Count != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsGold != false) {
        size += 1 + 1;
      }
      if (TotalCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCoin);
      }
      if (GiftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftId);
      }
      if (GiftName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftName);
      }
      if (SinglePriceCoinRaw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SinglePriceCoinRaw);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftMessage other) {
      if (other == null) {
        return;
      }
      if (other.IsGold != false) {
        IsGold = other.IsGold;
      }
      if (other.TotalCoin != 0) {
        TotalCoin = other.TotalCoin;
      }
      if (other.GiftId != 0) {
        GiftId = other.GiftId;
      }
      if (other.GiftName.Length != 0) {
        GiftName = other.GiftName;
      }
      if (other.SinglePriceCoinRaw != 0) {
        SinglePriceCoinRaw = other.SinglePriceCoinRaw;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsGold = input.ReadBool();
            break;
          }
          case 16: {
            TotalCoin = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftId = input.ReadUInt32();
            break;
          }
          case 34: {
            GiftName = input.ReadString();
            break;
          }
          case 40: {
            SinglePriceCoinRaw = input.ReadUInt32();
            break;
          }
          case 48: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WelcomeVIPMessage : pb::IMessage<WelcomeVIPMessage> {
    private static readonly pb::MessageParser<WelcomeVIPMessage> _parser = new pb::MessageParser<WelcomeVIPMessage>(() => new WelcomeVIPMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WelcomeVIPMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeVIPMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeVIPMessage(WelcomeVIPMessage other) : this() {
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeVIPMessage Clone() {
      return new WelcomeVIPMessage(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::VNerve.Bilibili.Live.LiveVipLevel level_ = global::VNerve.Bilibili.Live.LiveVipLevel.NoVip;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.LiveVipLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WelcomeVIPMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WelcomeVIPMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WelcomeVIPMessage other) {
      if (other == null) {
        return;
      }
      if (other.Level != global::VNerve.Bilibili.Live.LiveVipLevel.NoVip) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::VNerve.Bilibili.Live.LiveVipLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WelcomeGuardMessage : pb::IMessage<WelcomeGuardMessage> {
    private static readonly pb::MessageParser<WelcomeGuardMessage> _parser = new pb::MessageParser<WelcomeGuardMessage>(() => new WelcomeGuardMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WelcomeGuardMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeGuardMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeGuardMessage(WelcomeGuardMessage other) : this() {
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WelcomeGuardMessage Clone() {
      return new WelcomeGuardMessage(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::VNerve.Bilibili.Live.GuardLevel level_ = global::VNerve.Bilibili.Live.GuardLevel.NoGuard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GuardLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WelcomeGuardMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WelcomeGuardMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WelcomeGuardMessage other) {
      if (other == null) {
        return;
      }
      if (other.Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::VNerve.Bilibili.Live.GuardLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewGuardMessage : pb::IMessage<NewGuardMessage> {
    private static readonly pb::MessageParser<NewGuardMessage> _parser = new pb::MessageParser<NewGuardMessage>(() => new NewGuardMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewGuardMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGuardMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGuardMessage(NewGuardMessage other) : this() {
      level_ = other.level_;
      totalCoin_ = other.totalCoin_;
      count_ = other.count_;
      durationLevel_ = other.durationLevel_;
      buyType_ = other.buyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGuardMessage Clone() {
      return new NewGuardMessage(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::VNerve.Bilibili.Live.GuardLevel level_ = global::VNerve.Bilibili.Live.GuardLevel.NoGuard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GuardLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "total_coin" field.</summary>
    public const int TotalCoinFieldNumber = 2;
    private uint totalCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCoin {
      get { return totalCoin_; }
      set {
        totalCoin_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "duration_level" field.</summary>
    public const int DurationLevelFieldNumber = 4;
    private global::VNerve.Bilibili.Live.GuardDurationLevel durationLevel_ = global::VNerve.Bilibili.Live.GuardDurationLevel.NoDuration;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GuardDurationLevel DurationLevel {
      get { return durationLevel_; }
      set {
        durationLevel_ = value;
      }
    }

    /// <summary>Field number for the "buy_type" field.</summary>
    public const int BuyTypeFieldNumber = 5;
    private global::VNerve.Bilibili.Live.GuardBuyType buyType_ = global::VNerve.Bilibili.Live.GuardBuyType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Bilibili.Live.GuardBuyType BuyType {
      get { return buyType_; }
      set {
        buyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewGuardMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewGuardMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (TotalCoin != other.TotalCoin) return false;
      if (Count != other.Count) return false;
      if (DurationLevel != other.DurationLevel) return false;
      if (BuyType != other.BuyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) hash ^= Level.GetHashCode();
      if (TotalCoin != 0) hash ^= TotalCoin.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (DurationLevel != global::VNerve.Bilibili.Live.GuardDurationLevel.NoDuration) hash ^= DurationLevel.GetHashCode();
      if (BuyType != global::VNerve.Bilibili.Live.GuardBuyType.NoType) hash ^= BuyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (TotalCoin != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalCoin);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (DurationLevel != global::VNerve.Bilibili.Live.GuardDurationLevel.NoDuration) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DurationLevel);
      }
      if (BuyType != global::VNerve.Bilibili.Live.GuardBuyType.NoType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BuyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (TotalCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCoin);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (DurationLevel != global::VNerve.Bilibili.Live.GuardDurationLevel.NoDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DurationLevel);
      }
      if (BuyType != global::VNerve.Bilibili.Live.GuardBuyType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewGuardMessage other) {
      if (other == null) {
        return;
      }
      if (other.Level != global::VNerve.Bilibili.Live.GuardLevel.NoGuard) {
        Level = other.Level;
      }
      if (other.TotalCoin != 0) {
        TotalCoin = other.TotalCoin;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.DurationLevel != global::VNerve.Bilibili.Live.GuardDurationLevel.NoDuration) {
        DurationLevel = other.DurationLevel;
      }
      if (other.BuyType != global::VNerve.Bilibili.Live.GuardBuyType.NoType) {
        BuyType = other.BuyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::VNerve.Bilibili.Live.GuardLevel) input.ReadEnum();
            break;
          }
          case 16: {
            TotalCoin = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            DurationLevel = (global::VNerve.Bilibili.Live.GuardDurationLevel) input.ReadEnum();
            break;
          }
          case 40: {
            BuyType = (global::VNerve.Bilibili.Live.GuardBuyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Just empty.
  /// </summary>
  public sealed partial class UserBlockedMessage : pb::IMessage<UserBlockedMessage> {
    private static readonly pb::MessageParser<UserBlockedMessage> _parser = new pb::MessageParser<UserBlockedMessage>(() => new UserBlockedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBlockedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.UserMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBlockedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBlockedMessage(UserBlockedMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBlockedMessage Clone() {
      return new UserBlockedMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBlockedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBlockedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBlockedMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
