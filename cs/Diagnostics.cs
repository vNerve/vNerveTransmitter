// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vNerve/bilibili/live/diagnostics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VNerve.Bilibili.Live {

  /// <summary>Holder for reflection information generated from vNerve/bilibili/live/diagnostics.proto</summary>
  public static partial class DiagnosticsReflection {

    #region Descriptor
    /// <summary>File descriptor for vNerve/bilibili/live/diagnostics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DiagnosticsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ2TmVydmUvYmlsaWJpbGkvbGl2ZS9kaWFnbm9zdGljcy5wcm90bxIUdk5l",
            "cnZlLmJpbGliaWxpLmxpdmUiaAoMV29ya2VyU3RhdHVzEgoKAmlkGAEgASgG",
            "EhEKCW1heF9yb29tcxgCIAEoBRIbChNjdXJyZW50X2Nvbm5lY3Rpb25zGAMg",
            "ASgFEhwKFGFsbG93X25ld190YXNrX2FmdGVyGAQgASgDIjUKClJvb21TdGF0",
            "dXMSCgoCaWQYASABKAUSGwoTY3VycmVudF9jb25uZWN0aW9ucxgCIAEoBSIu",
            "CghSb29tVGFzaxIRCgl3b3JrZXJfaWQYASABKAYSDwoHcm9vbV9pZBgCIAEo",
            "BSLkAQohQmlsaWJpbGlMaXZlU3VwZXJ2aXNvckRpYWdub3N0aWNzEhoKEm1h",
            "eF90YXNrc19wZXJfcm9vbRgBIAEoBRI7Cg93b3JrZXJfc3RhdHVzZXMYAiAD",
            "KAsyIi52TmVydmUuYmlsaWJpbGkubGl2ZS5Xb3JrZXJTdGF0dXMSNwoNcm9v",
            "bV9zdGF0dXNlcxgDIAMoCzIgLnZOZXJ2ZS5iaWxpYmlsaS5saXZlLlJvb21T",
            "dGF0dXMSLQoFdGFza3MYBCADKAsyHi52TmVydmUuYmlsaWJpbGkubGl2ZS5S",
            "b29tVGFza0ID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.WorkerStatus), global::VNerve.Bilibili.Live.WorkerStatus.Parser, new[]{ "Id", "MaxRooms", "CurrentConnections", "AllowNewTaskAfter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.RoomStatus), global::VNerve.Bilibili.Live.RoomStatus.Parser, new[]{ "Id", "CurrentConnections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.RoomTask), global::VNerve.Bilibili.Live.RoomTask.Parser, new[]{ "WorkerId", "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Bilibili.Live.BilibiliLiveSupervisorDiagnostics), global::VNerve.Bilibili.Live.BilibiliLiveSupervisorDiagnostics.Parser, new[]{ "MaxTasksPerRoom", "WorkerStatuses", "RoomStatuses", "Tasks" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WorkerStatus : pb::IMessage<WorkerStatus> {
    private static readonly pb::MessageParser<WorkerStatus> _parser = new pb::MessageParser<WorkerStatus>(() => new WorkerStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.DiagnosticsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerStatus(WorkerStatus other) : this() {
      id_ = other.id_;
      maxRooms_ = other.maxRooms_;
      currentConnections_ = other.currentConnections_;
      allowNewTaskAfter_ = other.allowNewTaskAfter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerStatus Clone() {
      return new WorkerStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "max_rooms" field.</summary>
    public const int MaxRoomsFieldNumber = 2;
    private int maxRooms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRooms {
      get { return maxRooms_; }
      set {
        maxRooms_ = value;
      }
    }

    /// <summary>Field number for the "current_connections" field.</summary>
    public const int CurrentConnectionsFieldNumber = 3;
    private int currentConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentConnections {
      get { return currentConnections_; }
      set {
        currentConnections_ = value;
      }
    }

    /// <summary>Field number for the "allow_new_task_after" field.</summary>
    public const int AllowNewTaskAfterFieldNumber = 4;
    private long allowNewTaskAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllowNewTaskAfter {
      get { return allowNewTaskAfter_; }
      set {
        allowNewTaskAfter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MaxRooms != other.MaxRooms) return false;
      if (CurrentConnections != other.CurrentConnections) return false;
      if (AllowNewTaskAfter != other.AllowNewTaskAfter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (MaxRooms != 0) hash ^= MaxRooms.GetHashCode();
      if (CurrentConnections != 0) hash ^= CurrentConnections.GetHashCode();
      if (AllowNewTaskAfter != 0L) hash ^= AllowNewTaskAfter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (MaxRooms != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxRooms);
      }
      if (CurrentConnections != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentConnections);
      }
      if (AllowNewTaskAfter != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AllowNewTaskAfter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + 8;
      }
      if (MaxRooms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRooms);
      }
      if (CurrentConnections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentConnections);
      }
      if (AllowNewTaskAfter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllowNewTaskAfter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.MaxRooms != 0) {
        MaxRooms = other.MaxRooms;
      }
      if (other.CurrentConnections != 0) {
        CurrentConnections = other.CurrentConnections;
      }
      if (other.AllowNewTaskAfter != 0L) {
        AllowNewTaskAfter = other.AllowNewTaskAfter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            MaxRooms = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentConnections = input.ReadInt32();
            break;
          }
          case 32: {
            AllowNewTaskAfter = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomStatus : pb::IMessage<RoomStatus> {
    private static readonly pb::MessageParser<RoomStatus> _parser = new pb::MessageParser<RoomStatus>(() => new RoomStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.DiagnosticsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatus(RoomStatus other) : this() {
      id_ = other.id_;
      currentConnections_ = other.currentConnections_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatus Clone() {
      return new RoomStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "current_connections" field.</summary>
    public const int CurrentConnectionsFieldNumber = 2;
    private int currentConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentConnections {
      get { return currentConnections_; }
      set {
        currentConnections_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CurrentConnections != other.CurrentConnections) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CurrentConnections != 0) hash ^= CurrentConnections.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CurrentConnections != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentConnections);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CurrentConnections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentConnections);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CurrentConnections != 0) {
        CurrentConnections = other.CurrentConnections;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentConnections = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomTask : pb::IMessage<RoomTask> {
    private static readonly pb::MessageParser<RoomTask> _parser = new pb::MessageParser<RoomTask>(() => new RoomTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.DiagnosticsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTask(RoomTask other) : this() {
      workerId_ = other.workerId_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTask Clone() {
      return new RoomTask(this);
    }

    /// <summary>Field number for the "worker_id" field.</summary>
    public const int WorkerIdFieldNumber = 1;
    private ulong workerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WorkerId {
      get { return workerId_; }
      set {
        workerId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerId != other.WorkerId) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerId != 0UL) hash ^= WorkerId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(WorkerId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerId != 0UL) {
        size += 1 + 8;
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomTask other) {
      if (other == null) {
        return;
      }
      if (other.WorkerId != 0UL) {
        WorkerId = other.WorkerId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            WorkerId = input.ReadFixed64();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BilibiliLiveSupervisorDiagnostics : pb::IMessage<BilibiliLiveSupervisorDiagnostics> {
    private static readonly pb::MessageParser<BilibiliLiveSupervisorDiagnostics> _parser = new pb::MessageParser<BilibiliLiveSupervisorDiagnostics>(() => new BilibiliLiveSupervisorDiagnostics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BilibiliLiveSupervisorDiagnostics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Bilibili.Live.DiagnosticsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BilibiliLiveSupervisorDiagnostics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BilibiliLiveSupervisorDiagnostics(BilibiliLiveSupervisorDiagnostics other) : this() {
      maxTasksPerRoom_ = other.maxTasksPerRoom_;
      workerStatuses_ = other.workerStatuses_.Clone();
      roomStatuses_ = other.roomStatuses_.Clone();
      tasks_ = other.tasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BilibiliLiveSupervisorDiagnostics Clone() {
      return new BilibiliLiveSupervisorDiagnostics(this);
    }

    /// <summary>Field number for the "max_tasks_per_room" field.</summary>
    public const int MaxTasksPerRoomFieldNumber = 1;
    private int maxTasksPerRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTasksPerRoom {
      get { return maxTasksPerRoom_; }
      set {
        maxTasksPerRoom_ = value;
      }
    }

    /// <summary>Field number for the "worker_statuses" field.</summary>
    public const int WorkerStatusesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VNerve.Bilibili.Live.WorkerStatus> _repeated_workerStatuses_codec
        = pb::FieldCodec.ForMessage(18, global::VNerve.Bilibili.Live.WorkerStatus.Parser);
    private readonly pbc::RepeatedField<global::VNerve.Bilibili.Live.WorkerStatus> workerStatuses_ = new pbc::RepeatedField<global::VNerve.Bilibili.Live.WorkerStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VNerve.Bilibili.Live.WorkerStatus> WorkerStatuses {
      get { return workerStatuses_; }
    }

    /// <summary>Field number for the "room_statuses" field.</summary>
    public const int RoomStatusesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::VNerve.Bilibili.Live.RoomStatus> _repeated_roomStatuses_codec
        = pb::FieldCodec.ForMessage(26, global::VNerve.Bilibili.Live.RoomStatus.Parser);
    private readonly pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomStatus> roomStatuses_ = new pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomStatus> RoomStatuses {
      get { return roomStatuses_; }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VNerve.Bilibili.Live.RoomTask> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(34, global::VNerve.Bilibili.Live.RoomTask.Parser);
    private readonly pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomTask> tasks_ = new pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VNerve.Bilibili.Live.RoomTask> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BilibiliLiveSupervisorDiagnostics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BilibiliLiveSupervisorDiagnostics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxTasksPerRoom != other.MaxTasksPerRoom) return false;
      if(!workerStatuses_.Equals(other.workerStatuses_)) return false;
      if(!roomStatuses_.Equals(other.roomStatuses_)) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxTasksPerRoom != 0) hash ^= MaxTasksPerRoom.GetHashCode();
      hash ^= workerStatuses_.GetHashCode();
      hash ^= roomStatuses_.GetHashCode();
      hash ^= tasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxTasksPerRoom != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxTasksPerRoom);
      }
      workerStatuses_.WriteTo(output, _repeated_workerStatuses_codec);
      roomStatuses_.WriteTo(output, _repeated_roomStatuses_codec);
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxTasksPerRoom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTasksPerRoom);
      }
      size += workerStatuses_.CalculateSize(_repeated_workerStatuses_codec);
      size += roomStatuses_.CalculateSize(_repeated_roomStatuses_codec);
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BilibiliLiveSupervisorDiagnostics other) {
      if (other == null) {
        return;
      }
      if (other.MaxTasksPerRoom != 0) {
        MaxTasksPerRoom = other.MaxTasksPerRoom;
      }
      workerStatuses_.Add(other.workerStatuses_);
      roomStatuses_.Add(other.roomStatuses_);
      tasks_.Add(other.tasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxTasksPerRoom = input.ReadInt32();
            break;
          }
          case 18: {
            workerStatuses_.AddEntriesFrom(input, _repeated_workerStatuses_codec);
            break;
          }
          case 26: {
            roomStatuses_.AddEntriesFrom(input, _repeated_roomStatuses_codec);
            break;
          }
          case 34: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
