// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vNerve/analyst/bilibili/live/bilive_analyst.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VNerve.Analyst.Bilibili.Live {

  /// <summary>Holder for reflection information generated from vNerve/analyst/bilibili/live/bilive_analyst.proto</summary>
  public static partial class BiliveAnalystReflection {

    #region Descriptor
    /// <summary>File descriptor for vNerve/analyst/bilibili/live/bilive_analyst.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BiliveAnalystReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjF2TmVydmUvYW5hbHlzdC9iaWxpYmlsaS9saXZlL2JpbGl2ZV9hbmFseXN0",
            "LnByb3RvEhx2TmVydmUuYW5hbHlzdC5iaWxpYmlsaS5saXZlIpcFCg9CaUxp",
            "dmVTdGF0aXN0aWMSDwoHcm9vbV9pZBgBIAEoDRINCgVzdGFydBgCIAEoBBIL",
            "CgNlbmQYAyABKAQSFgoObWF4X3BvcHVsYXJpdHkYBCABKA0SFwoPbGFzdF9w",
            "b3B1bGFyaXR5GAUgASgNEhEKCWdvbGRfY29pbhgGIAEoDRITCgtzaWx2ZXJf",
            "Y29pbhgHIAEoDRINCgV0aXRsZRgIIAEoCRIMCgRhcmVhGAkgASgJEg0KBWNv",
            "dmVyGAogASgJEj8KBHR5cGUYCyABKA4yMS52TmVydmUuYW5hbHlzdC5iaWxp",
            "YmlsaS5saXZlLkJpTGl2ZVN0YXRpc3RpY1R5cGUSGgoScmVhbF9kYW5tYWt1",
            "X3VzZXJzGBAgAygEEh0KFWxvdHRlcnlfZGFubWFrdV91c2VycxgRIAMoBBJg",
            "ChNnb2xkX3VzZXJzX2FuZF9jb2luGBIgAygLMkMudk5lcnZlLmFuYWx5c3Qu",
            "YmlsaWJpbGkubGl2ZS5CaUxpdmVTdGF0aXN0aWMuR29sZFVzZXJzQW5kQ29p",
            "bkVudHJ5EmQKFXNpbHZlcl91c2Vyc19hbmRfY29pbhgTIAMoCzJFLnZOZXJ2",
            "ZS5hbmFseXN0LmJpbGliaWxpLmxpdmUuQmlMaXZlU3RhdGlzdGljLlNpbHZl",
            "clVzZXJzQW5kQ29pbkVudHJ5EhoKEnBhcnRpY2lwYXRlZF91c2VycxgUIAMo",
            "BBo3ChVHb2xkVXNlcnNBbmRDb2luRW50cnkSCwoDa2V5GAEgASgEEg0KBXZh",
            "bHVlGAIgASgNOgI4ARo5ChdTaWx2ZXJVc2Vyc0FuZENvaW5FbnRyeRILCgNr",
            "ZXkYASABKAQSDQoFdmFsdWUYAiABKA06AjgBKi0KE0JpTGl2ZVN0YXRpc3Rp",
            "Y1R5cGUSCQoFU0xJQ0UQABILCgdTRVNTSU9OEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Analyst.Bilibili.Live.BiLiveStatistic), global::VNerve.Analyst.Bilibili.Live.BiLiveStatistic.Parser, new[]{ "RoomId", "Start", "End", "MaxPopularity", "LastPopularity", "GoldCoin", "SilverCoin", "Title", "Area", "Cover", "Type", "RealDanmakuUsers", "LotteryDanmakuUsers", "GoldUsersAndCoin", "SilverUsersAndCoin", "ParticipatedUsers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum BiLiveStatisticType {
    [pbr::OriginalName("SLICE")] Slice = 0,
    [pbr::OriginalName("SESSION")] Session = 1,
  }

  #endregion

  #region Messages
  public sealed partial class BiLiveStatistic : pb::IMessage<BiLiveStatistic> {
    private static readonly pb::MessageParser<BiLiveStatistic> _parser = new pb::MessageParser<BiLiveStatistic>(() => new BiLiveStatistic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiLiveStatistic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Analyst.Bilibili.Live.BiliveAnalystReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiLiveStatistic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiLiveStatistic(BiLiveStatistic other) : this() {
      roomId_ = other.roomId_;
      start_ = other.start_;
      end_ = other.end_;
      maxPopularity_ = other.maxPopularity_;
      lastPopularity_ = other.lastPopularity_;
      goldCoin_ = other.goldCoin_;
      silverCoin_ = other.silverCoin_;
      title_ = other.title_;
      area_ = other.area_;
      cover_ = other.cover_;
      type_ = other.type_;
      realDanmakuUsers_ = other.realDanmakuUsers_.Clone();
      lotteryDanmakuUsers_ = other.lotteryDanmakuUsers_.Clone();
      goldUsersAndCoin_ = other.goldUsersAndCoin_.Clone();
      silverUsersAndCoin_ = other.silverUsersAndCoin_.Clone();
      participatedUsers_ = other.participatedUsers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiLiveStatistic Clone() {
      return new BiLiveStatistic(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private ulong start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private ulong end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "max_popularity" field.</summary>
    public const int MaxPopularityFieldNumber = 4;
    private uint maxPopularity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPopularity {
      get { return maxPopularity_; }
      set {
        maxPopularity_ = value;
      }
    }

    /// <summary>Field number for the "last_popularity" field.</summary>
    public const int LastPopularityFieldNumber = 5;
    private uint lastPopularity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPopularity {
      get { return lastPopularity_; }
      set {
        lastPopularity_ = value;
      }
    }

    /// <summary>Field number for the "gold_coin" field.</summary>
    public const int GoldCoinFieldNumber = 6;
    private uint goldCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldCoin {
      get { return goldCoin_; }
      set {
        goldCoin_ = value;
      }
    }

    /// <summary>Field number for the "silver_coin" field.</summary>
    public const int SilverCoinFieldNumber = 7;
    private uint silverCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SilverCoin {
      get { return silverCoin_; }
      set {
        silverCoin_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 8;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 9;
    private string area_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Area {
      get { return area_; }
      set {
        area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cover" field.</summary>
    public const int CoverFieldNumber = 10;
    private string cover_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cover {
      get { return cover_; }
      set {
        cover_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType type_ = global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType.Slice;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "real_danmaku_users" field.</summary>
    public const int RealDanmakuUsersFieldNumber = 16;
    private static readonly pb::FieldCodec<ulong> _repeated_realDanmakuUsers_codec
        = pb::FieldCodec.ForUInt64(130);
    private readonly pbc::RepeatedField<ulong> realDanmakuUsers_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RealDanmakuUsers {
      get { return realDanmakuUsers_; }
    }

    /// <summary>Field number for the "lottery_danmaku_users" field.</summary>
    public const int LotteryDanmakuUsersFieldNumber = 17;
    private static readonly pb::FieldCodec<ulong> _repeated_lotteryDanmakuUsers_codec
        = pb::FieldCodec.ForUInt64(138);
    private readonly pbc::RepeatedField<ulong> lotteryDanmakuUsers_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> LotteryDanmakuUsers {
      get { return lotteryDanmakuUsers_; }
    }

    /// <summary>Field number for the "gold_users_and_coin" field.</summary>
    public const int GoldUsersAndCoinFieldNumber = 18;
    private static readonly pbc::MapField<ulong, uint>.Codec _map_goldUsersAndCoin_codec
        = new pbc::MapField<ulong, uint>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForUInt32(16, 0), 146);
    private readonly pbc::MapField<ulong, uint> goldUsersAndCoin_ = new pbc::MapField<ulong, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, uint> GoldUsersAndCoin {
      get { return goldUsersAndCoin_; }
    }

    /// <summary>Field number for the "silver_users_and_coin" field.</summary>
    public const int SilverUsersAndCoinFieldNumber = 19;
    private static readonly pbc::MapField<ulong, uint>.Codec _map_silverUsersAndCoin_codec
        = new pbc::MapField<ulong, uint>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForUInt32(16, 0), 154);
    private readonly pbc::MapField<ulong, uint> silverUsersAndCoin_ = new pbc::MapField<ulong, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, uint> SilverUsersAndCoin {
      get { return silverUsersAndCoin_; }
    }

    /// <summary>Field number for the "participated_users" field.</summary>
    public const int ParticipatedUsersFieldNumber = 20;
    private static readonly pb::FieldCodec<ulong> _repeated_participatedUsers_codec
        = pb::FieldCodec.ForUInt64(162);
    private readonly pbc::RepeatedField<ulong> participatedUsers_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ParticipatedUsers {
      get { return participatedUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiLiveStatistic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiLiveStatistic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (MaxPopularity != other.MaxPopularity) return false;
      if (LastPopularity != other.LastPopularity) return false;
      if (GoldCoin != other.GoldCoin) return false;
      if (SilverCoin != other.SilverCoin) return false;
      if (Title != other.Title) return false;
      if (Area != other.Area) return false;
      if (Cover != other.Cover) return false;
      if (Type != other.Type) return false;
      if(!realDanmakuUsers_.Equals(other.realDanmakuUsers_)) return false;
      if(!lotteryDanmakuUsers_.Equals(other.lotteryDanmakuUsers_)) return false;
      if (!GoldUsersAndCoin.Equals(other.GoldUsersAndCoin)) return false;
      if (!SilverUsersAndCoin.Equals(other.SilverUsersAndCoin)) return false;
      if(!participatedUsers_.Equals(other.participatedUsers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (Start != 0UL) hash ^= Start.GetHashCode();
      if (End != 0UL) hash ^= End.GetHashCode();
      if (MaxPopularity != 0) hash ^= MaxPopularity.GetHashCode();
      if (LastPopularity != 0) hash ^= LastPopularity.GetHashCode();
      if (GoldCoin != 0) hash ^= GoldCoin.GetHashCode();
      if (SilverCoin != 0) hash ^= SilverCoin.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Area.Length != 0) hash ^= Area.GetHashCode();
      if (Cover.Length != 0) hash ^= Cover.GetHashCode();
      if (Type != global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType.Slice) hash ^= Type.GetHashCode();
      hash ^= realDanmakuUsers_.GetHashCode();
      hash ^= lotteryDanmakuUsers_.GetHashCode();
      hash ^= GoldUsersAndCoin.GetHashCode();
      hash ^= SilverUsersAndCoin.GetHashCode();
      hash ^= participatedUsers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (Start != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Start);
      }
      if (End != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(End);
      }
      if (MaxPopularity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxPopularity);
      }
      if (LastPopularity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastPopularity);
      }
      if (GoldCoin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GoldCoin);
      }
      if (SilverCoin != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SilverCoin);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Title);
      }
      if (Area.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Area);
      }
      if (Cover.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Cover);
      }
      if (Type != global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType.Slice) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
      realDanmakuUsers_.WriteTo(output, _repeated_realDanmakuUsers_codec);
      lotteryDanmakuUsers_.WriteTo(output, _repeated_lotteryDanmakuUsers_codec);
      goldUsersAndCoin_.WriteTo(output, _map_goldUsersAndCoin_codec);
      silverUsersAndCoin_.WriteTo(output, _map_silverUsersAndCoin_codec);
      participatedUsers_.WriteTo(output, _repeated_participatedUsers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (Start != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Start);
      }
      if (End != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(End);
      }
      if (MaxPopularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPopularity);
      }
      if (LastPopularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPopularity);
      }
      if (GoldCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldCoin);
      }
      if (SilverCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SilverCoin);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Area.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Area);
      }
      if (Cover.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cover);
      }
      if (Type != global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType.Slice) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += realDanmakuUsers_.CalculateSize(_repeated_realDanmakuUsers_codec);
      size += lotteryDanmakuUsers_.CalculateSize(_repeated_lotteryDanmakuUsers_codec);
      size += goldUsersAndCoin_.CalculateSize(_map_goldUsersAndCoin_codec);
      size += silverUsersAndCoin_.CalculateSize(_map_silverUsersAndCoin_codec);
      size += participatedUsers_.CalculateSize(_repeated_participatedUsers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiLiveStatistic other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.Start != 0UL) {
        Start = other.Start;
      }
      if (other.End != 0UL) {
        End = other.End;
      }
      if (other.MaxPopularity != 0) {
        MaxPopularity = other.MaxPopularity;
      }
      if (other.LastPopularity != 0) {
        LastPopularity = other.LastPopularity;
      }
      if (other.GoldCoin != 0) {
        GoldCoin = other.GoldCoin;
      }
      if (other.SilverCoin != 0) {
        SilverCoin = other.SilverCoin;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Area.Length != 0) {
        Area = other.Area;
      }
      if (other.Cover.Length != 0) {
        Cover = other.Cover;
      }
      if (other.Type != global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType.Slice) {
        Type = other.Type;
      }
      realDanmakuUsers_.Add(other.realDanmakuUsers_);
      lotteryDanmakuUsers_.Add(other.lotteryDanmakuUsers_);
      goldUsersAndCoin_.Add(other.goldUsersAndCoin_);
      silverUsersAndCoin_.Add(other.silverUsersAndCoin_);
      participatedUsers_.Add(other.participatedUsers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            Start = input.ReadUInt64();
            break;
          }
          case 24: {
            End = input.ReadUInt64();
            break;
          }
          case 32: {
            MaxPopularity = input.ReadUInt32();
            break;
          }
          case 40: {
            LastPopularity = input.ReadUInt32();
            break;
          }
          case 48: {
            GoldCoin = input.ReadUInt32();
            break;
          }
          case 56: {
            SilverCoin = input.ReadUInt32();
            break;
          }
          case 66: {
            Title = input.ReadString();
            break;
          }
          case 74: {
            Area = input.ReadString();
            break;
          }
          case 82: {
            Cover = input.ReadString();
            break;
          }
          case 88: {
            Type = (global::VNerve.Analyst.Bilibili.Live.BiLiveStatisticType) input.ReadEnum();
            break;
          }
          case 130:
          case 128: {
            realDanmakuUsers_.AddEntriesFrom(input, _repeated_realDanmakuUsers_codec);
            break;
          }
          case 138:
          case 136: {
            lotteryDanmakuUsers_.AddEntriesFrom(input, _repeated_lotteryDanmakuUsers_codec);
            break;
          }
          case 146: {
            goldUsersAndCoin_.AddEntriesFrom(input, _map_goldUsersAndCoin_codec);
            break;
          }
          case 154: {
            silverUsersAndCoin_.AddEntriesFrom(input, _map_silverUsersAndCoin_codec);
            break;
          }
          case 162:
          case 160: {
            participatedUsers_.AddEntriesFrom(input, _repeated_participatedUsers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
