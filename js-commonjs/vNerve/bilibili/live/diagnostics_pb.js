// source: vNerve/bilibili/live/diagnostics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics', null, global);
goog.exportSymbol('proto.vNerve.bilibili.live.RoomStatus', null, global);
goog.exportSymbol('proto.vNerve.bilibili.live.RoomTask', null, global);
goog.exportSymbol('proto.vNerve.bilibili.live.WorkerStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vNerve.bilibili.live.WorkerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vNerve.bilibili.live.WorkerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vNerve.bilibili.live.WorkerStatus.displayName = 'proto.vNerve.bilibili.live.WorkerStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vNerve.bilibili.live.RoomStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vNerve.bilibili.live.RoomStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vNerve.bilibili.live.RoomStatus.displayName = 'proto.vNerve.bilibili.live.RoomStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vNerve.bilibili.live.RoomTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vNerve.bilibili.live.RoomTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vNerve.bilibili.live.RoomTask.displayName = 'proto.vNerve.bilibili.live.RoomTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.repeatedFields_, null);
};
goog.inherits(proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.displayName = 'proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.vNerve.bilibili.live.WorkerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vNerve.bilibili.live.WorkerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.WorkerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxRooms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentConnections: jspb.Message.getFieldWithDefault(msg, 3, 0),
    allowNewTaskAfter: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vNerve.bilibili.live.WorkerStatus}
 */
proto.vNerve.bilibili.live.WorkerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vNerve.bilibili.live.WorkerStatus;
  return proto.vNerve.bilibili.live.WorkerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vNerve.bilibili.live.WorkerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vNerve.bilibili.live.WorkerStatus}
 */
proto.vNerve.bilibili.live.WorkerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRooms(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentConnections(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllowNewTaskAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vNerve.bilibili.live.WorkerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vNerve.bilibili.live.WorkerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.WorkerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getMaxRooms();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurrentConnections();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAllowNewTaskAfter();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional fixed64 id = 1;
 * @return {number}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.WorkerStatus} returns this
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max_rooms = 2;
 * @return {number}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.getMaxRooms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.WorkerStatus} returns this
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.setMaxRooms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 current_connections = 3;
 * @return {number}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.getCurrentConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.WorkerStatus} returns this
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.setCurrentConnections = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 allow_new_task_after = 4;
 * @return {number}
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.getAllowNewTaskAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.WorkerStatus} returns this
 */
proto.vNerve.bilibili.live.WorkerStatus.prototype.setAllowNewTaskAfter = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.vNerve.bilibili.live.RoomStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vNerve.bilibili.live.RoomStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.RoomStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentConnections: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vNerve.bilibili.live.RoomStatus}
 */
proto.vNerve.bilibili.live.RoomStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vNerve.bilibili.live.RoomStatus;
  return proto.vNerve.bilibili.live.RoomStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vNerve.bilibili.live.RoomStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vNerve.bilibili.live.RoomStatus}
 */
proto.vNerve.bilibili.live.RoomStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vNerve.bilibili.live.RoomStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vNerve.bilibili.live.RoomStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.RoomStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurrentConnections();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.RoomStatus} returns this
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 current_connections = 2;
 * @return {number}
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.getCurrentConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.RoomStatus} returns this
 */
proto.vNerve.bilibili.live.RoomStatus.prototype.setCurrentConnections = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vNerve.bilibili.live.RoomTask.prototype.toObject = function(opt_includeInstance) {
  return proto.vNerve.bilibili.live.RoomTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vNerve.bilibili.live.RoomTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.RoomTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vNerve.bilibili.live.RoomTask}
 */
proto.vNerve.bilibili.live.RoomTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vNerve.bilibili.live.RoomTask;
  return proto.vNerve.bilibili.live.RoomTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vNerve.bilibili.live.RoomTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vNerve.bilibili.live.RoomTask}
 */
proto.vNerve.bilibili.live.RoomTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setWorkerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vNerve.bilibili.live.RoomTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vNerve.bilibili.live.RoomTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vNerve.bilibili.live.RoomTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.RoomTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerId();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional fixed64 worker_id = 1;
 * @return {number}
 */
proto.vNerve.bilibili.live.RoomTask.prototype.getWorkerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.RoomTask} returns this
 */
proto.vNerve.bilibili.live.RoomTask.prototype.setWorkerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 room_id = 2;
 * @return {number}
 */
proto.vNerve.bilibili.live.RoomTask.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.RoomTask} returns this
 */
proto.vNerve.bilibili.live.RoomTask.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.toObject = function(opt_includeInstance) {
  return proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxTasksPerRoom: jspb.Message.getFieldWithDefault(msg, 1, 0),
    workerStatusesList: jspb.Message.toObjectList(msg.getWorkerStatusesList(),
    proto.vNerve.bilibili.live.WorkerStatus.toObject, includeInstance),
    roomStatusesList: jspb.Message.toObjectList(msg.getRoomStatusesList(),
    proto.vNerve.bilibili.live.RoomStatus.toObject, includeInstance),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.vNerve.bilibili.live.RoomTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics;
  return proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxTasksPerRoom(value);
      break;
    case 2:
      var value = new proto.vNerve.bilibili.live.WorkerStatus;
      reader.readMessage(value,proto.vNerve.bilibili.live.WorkerStatus.deserializeBinaryFromReader);
      msg.addWorkerStatuses(value);
      break;
    case 3:
      var value = new proto.vNerve.bilibili.live.RoomStatus;
      reader.readMessage(value,proto.vNerve.bilibili.live.RoomStatus.deserializeBinaryFromReader);
      msg.addRoomStatuses(value);
      break;
    case 4:
      var value = new proto.vNerve.bilibili.live.RoomTask;
      reader.readMessage(value,proto.vNerve.bilibili.live.RoomTask.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxTasksPerRoom();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWorkerStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vNerve.bilibili.live.WorkerStatus.serializeBinaryToWriter
    );
  }
  f = message.getRoomStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vNerve.bilibili.live.RoomStatus.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.vNerve.bilibili.live.RoomTask.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 max_tasks_per_room = 1;
 * @return {number}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.getMaxTasksPerRoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.setMaxTasksPerRoom = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated WorkerStatus worker_statuses = 2;
 * @return {!Array<!proto.vNerve.bilibili.live.WorkerStatus>}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.getWorkerStatusesList = function() {
  return /** @type{!Array<!proto.vNerve.bilibili.live.WorkerStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vNerve.bilibili.live.WorkerStatus, 2));
};


/**
 * @param {!Array<!proto.vNerve.bilibili.live.WorkerStatus>} value
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
*/
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.setWorkerStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vNerve.bilibili.live.WorkerStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vNerve.bilibili.live.WorkerStatus}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.addWorkerStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vNerve.bilibili.live.WorkerStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.clearWorkerStatusesList = function() {
  return this.setWorkerStatusesList([]);
};


/**
 * repeated RoomStatus room_statuses = 3;
 * @return {!Array<!proto.vNerve.bilibili.live.RoomStatus>}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.getRoomStatusesList = function() {
  return /** @type{!Array<!proto.vNerve.bilibili.live.RoomStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vNerve.bilibili.live.RoomStatus, 3));
};


/**
 * @param {!Array<!proto.vNerve.bilibili.live.RoomStatus>} value
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
*/
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.setRoomStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vNerve.bilibili.live.RoomStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vNerve.bilibili.live.RoomStatus}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.addRoomStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vNerve.bilibili.live.RoomStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.clearRoomStatusesList = function() {
  return this.setRoomStatusesList([]);
};


/**
 * repeated RoomTask tasks = 4;
 * @return {!Array<!proto.vNerve.bilibili.live.RoomTask>}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.vNerve.bilibili.live.RoomTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vNerve.bilibili.live.RoomTask, 4));
};


/**
 * @param {!Array<!proto.vNerve.bilibili.live.RoomTask>} value
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
*/
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.vNerve.bilibili.live.RoomTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vNerve.bilibili.live.RoomTask}
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.vNerve.bilibili.live.RoomTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics} returns this
 */
proto.vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


goog.object.extend(exports, proto.vNerve.bilibili.live);
