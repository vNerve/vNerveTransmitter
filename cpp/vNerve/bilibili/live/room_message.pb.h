// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/room_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vNerve/bilibili/live/user_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class LiveStatusChangedMessage;
class LiveStatusChangedMessageDefaultTypeInternal;
extern LiveStatusChangedMessageDefaultTypeInternal _LiveStatusChangedMessage_default_instance_;
class PopularityChangedMessage;
class PopularityChangedMessageDefaultTypeInternal;
extern PopularityChangedMessageDefaultTypeInternal _PopularityChangedMessage_default_instance_;
class RoomAdminInfo;
class RoomAdminInfoDefaultTypeInternal;
extern RoomAdminInfoDefaultTypeInternal _RoomAdminInfo_default_instance_;
class RoomBaseInfo;
class RoomBaseInfoDefaultTypeInternal;
extern RoomBaseInfoDefaultTypeInternal _RoomBaseInfo_default_instance_;
class RoomInfoChangedMessage;
class RoomInfoChangedMessageDefaultTypeInternal;
extern RoomInfoChangedMessageDefaultTypeInternal _RoomInfoChangedMessage_default_instance_;
class RoomLimitedMessage;
class RoomLimitedMessageDefaultTypeInternal;
extern RoomLimitedMessageDefaultTypeInternal _RoomLimitedMessage_default_instance_;
class RoomLockedMessage;
class RoomLockedMessageDefaultTypeInternal;
extern RoomLockedMessageDefaultTypeInternal _RoomLockedMessage_default_instance_;
class RoomMessage;
class RoomMessageDefaultTypeInternal;
extern RoomMessageDefaultTypeInternal _RoomMessage_default_instance_;
class RoomWarningMessage;
class RoomWarningMessageDefaultTypeInternal;
extern RoomWarningMessageDefaultTypeInternal _RoomWarningMessage_default_instance_;
class SuperChatDeleteMessage;
class SuperChatDeleteMessageDefaultTypeInternal;
extern SuperChatDeleteMessageDefaultTypeInternal _SuperChatDeleteMessage_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::live::LiveStatusChangedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::LiveStatusChangedMessage>(Arena*);
template<> ::vNerve::bilibili::live::PopularityChangedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::PopularityChangedMessage>(Arena*);
template<> ::vNerve::bilibili::live::RoomAdminInfo* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomAdminInfo>(Arena*);
template<> ::vNerve::bilibili::live::RoomBaseInfo* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomBaseInfo>(Arena*);
template<> ::vNerve::bilibili::live::RoomInfoChangedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomInfoChangedMessage>(Arena*);
template<> ::vNerve::bilibili::live::RoomLimitedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomLimitedMessage>(Arena*);
template<> ::vNerve::bilibili::live::RoomLockedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomLockedMessage>(Arena*);
template<> ::vNerve::bilibili::live::RoomMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomMessage>(Arena*);
template<> ::vNerve::bilibili::live::RoomWarningMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomWarningMessage>(Arena*);
template<> ::vNerve::bilibili::live::SuperChatDeleteMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::SuperChatDeleteMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {
namespace live {

enum LiveStatus : int {
  PREPARING = 0,
  LIVE = 1,
  ROUND = 2,
  CUT_OFF = 3,
  LiveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiveStatus_IsValid(int value);
constexpr LiveStatus LiveStatus_MIN = PREPARING;
constexpr LiveStatus LiveStatus_MAX = CUT_OFF;
constexpr int LiveStatus_ARRAYSIZE = LiveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveStatus_descriptor();
template<typename T>
inline const std::string& LiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiveStatus_descriptor(), enum_t_value);
}
inline bool LiveStatus_Parse(
    const std::string& name, LiveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiveStatus>(
    LiveStatus_descriptor(), name, value);
}
// ===================================================================

class RoomMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomMessage) */ {
 public:
  RoomMessage();
  virtual ~RoomMessage();

  RoomMessage(const RoomMessage& from);
  RoomMessage(RoomMessage&& from) noexcept
    : RoomMessage() {
    *this = ::std::move(from);
  }

  inline RoomMessage& operator=(const RoomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMessage& operator=(RoomMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomMessage& default_instance();

  enum PayloadCase {
    kUserMessage = 2,
    kPopularityChange = 3,
    kLiveStatus = 16,
    kInfoChange = 17,
    kRoomLocked = 18,
    kRoomWarning = 19,
    kRoomLimited = 20,
    kSuperchatDelete = 21,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomMessage* internal_default_instance() {
    return reinterpret_cast<const RoomMessage*>(
               &_RoomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomMessage& a, RoomMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomMessage* New() const final {
    return CreateMaybeMessage<RoomMessage>(nullptr);
  }

  RoomMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomMessage& from);
  void MergeFrom(const RoomMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomMessage";
  }
  protected:
  explicit RoomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kUserMessageFieldNumber = 2,
    kPopularityChangeFieldNumber = 3,
    kLiveStatusFieldNumber = 16,
    kInfoChangeFieldNumber = 17,
    kRoomLockedFieldNumber = 18,
    kRoomWarningFieldNumber = 19,
    kRoomLimitedFieldNumber = 20,
    kSuperchatDeleteFieldNumber = 21,
  };
  // uint32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.bilibili.live.UserMessage user_message = 2;
  bool has_user_message() const;
  private:
  bool _internal_has_user_message() const;
  public:
  void clear_user_message();
  const ::vNerve::bilibili::live::UserMessage& user_message() const;
  ::vNerve::bilibili::live::UserMessage* release_user_message();
  ::vNerve::bilibili::live::UserMessage* mutable_user_message();
  void set_allocated_user_message(::vNerve::bilibili::live::UserMessage* user_message);
  private:
  const ::vNerve::bilibili::live::UserMessage& _internal_user_message() const;
  ::vNerve::bilibili::live::UserMessage* _internal_mutable_user_message();
  public:
  void unsafe_arena_set_allocated_user_message(
      ::vNerve::bilibili::live::UserMessage* user_message);
  ::vNerve::bilibili::live::UserMessage* unsafe_arena_release_user_message();

  // .vNerve.bilibili.live.PopularityChangedMessage popularity_change = 3;
  bool has_popularity_change() const;
  private:
  bool _internal_has_popularity_change() const;
  public:
  void clear_popularity_change();
  const ::vNerve::bilibili::live::PopularityChangedMessage& popularity_change() const;
  ::vNerve::bilibili::live::PopularityChangedMessage* release_popularity_change();
  ::vNerve::bilibili::live::PopularityChangedMessage* mutable_popularity_change();
  void set_allocated_popularity_change(::vNerve::bilibili::live::PopularityChangedMessage* popularity_change);
  private:
  const ::vNerve::bilibili::live::PopularityChangedMessage& _internal_popularity_change() const;
  ::vNerve::bilibili::live::PopularityChangedMessage* _internal_mutable_popularity_change();
  public:
  void unsafe_arena_set_allocated_popularity_change(
      ::vNerve::bilibili::live::PopularityChangedMessage* popularity_change);
  ::vNerve::bilibili::live::PopularityChangedMessage* unsafe_arena_release_popularity_change();

  // .vNerve.bilibili.live.LiveStatusChangedMessage live_status = 16;
  bool has_live_status() const;
  private:
  bool _internal_has_live_status() const;
  public:
  void clear_live_status();
  const ::vNerve::bilibili::live::LiveStatusChangedMessage& live_status() const;
  ::vNerve::bilibili::live::LiveStatusChangedMessage* release_live_status();
  ::vNerve::bilibili::live::LiveStatusChangedMessage* mutable_live_status();
  void set_allocated_live_status(::vNerve::bilibili::live::LiveStatusChangedMessage* live_status);
  private:
  const ::vNerve::bilibili::live::LiveStatusChangedMessage& _internal_live_status() const;
  ::vNerve::bilibili::live::LiveStatusChangedMessage* _internal_mutable_live_status();
  public:
  void unsafe_arena_set_allocated_live_status(
      ::vNerve::bilibili::live::LiveStatusChangedMessage* live_status);
  ::vNerve::bilibili::live::LiveStatusChangedMessage* unsafe_arena_release_live_status();

  // .vNerve.bilibili.live.RoomInfoChangedMessage info_change = 17;
  bool has_info_change() const;
  private:
  bool _internal_has_info_change() const;
  public:
  void clear_info_change();
  const ::vNerve::bilibili::live::RoomInfoChangedMessage& info_change() const;
  ::vNerve::bilibili::live::RoomInfoChangedMessage* release_info_change();
  ::vNerve::bilibili::live::RoomInfoChangedMessage* mutable_info_change();
  void set_allocated_info_change(::vNerve::bilibili::live::RoomInfoChangedMessage* info_change);
  private:
  const ::vNerve::bilibili::live::RoomInfoChangedMessage& _internal_info_change() const;
  ::vNerve::bilibili::live::RoomInfoChangedMessage* _internal_mutable_info_change();
  public:
  void unsafe_arena_set_allocated_info_change(
      ::vNerve::bilibili::live::RoomInfoChangedMessage* info_change);
  ::vNerve::bilibili::live::RoomInfoChangedMessage* unsafe_arena_release_info_change();

  // .vNerve.bilibili.live.RoomLockedMessage room_locked = 18;
  bool has_room_locked() const;
  private:
  bool _internal_has_room_locked() const;
  public:
  void clear_room_locked();
  const ::vNerve::bilibili::live::RoomLockedMessage& room_locked() const;
  ::vNerve::bilibili::live::RoomLockedMessage* release_room_locked();
  ::vNerve::bilibili::live::RoomLockedMessage* mutable_room_locked();
  void set_allocated_room_locked(::vNerve::bilibili::live::RoomLockedMessage* room_locked);
  private:
  const ::vNerve::bilibili::live::RoomLockedMessage& _internal_room_locked() const;
  ::vNerve::bilibili::live::RoomLockedMessage* _internal_mutable_room_locked();
  public:
  void unsafe_arena_set_allocated_room_locked(
      ::vNerve::bilibili::live::RoomLockedMessage* room_locked);
  ::vNerve::bilibili::live::RoomLockedMessage* unsafe_arena_release_room_locked();

  // .vNerve.bilibili.live.RoomWarningMessage room_warning = 19;
  bool has_room_warning() const;
  private:
  bool _internal_has_room_warning() const;
  public:
  void clear_room_warning();
  const ::vNerve::bilibili::live::RoomWarningMessage& room_warning() const;
  ::vNerve::bilibili::live::RoomWarningMessage* release_room_warning();
  ::vNerve::bilibili::live::RoomWarningMessage* mutable_room_warning();
  void set_allocated_room_warning(::vNerve::bilibili::live::RoomWarningMessage* room_warning);
  private:
  const ::vNerve::bilibili::live::RoomWarningMessage& _internal_room_warning() const;
  ::vNerve::bilibili::live::RoomWarningMessage* _internal_mutable_room_warning();
  public:
  void unsafe_arena_set_allocated_room_warning(
      ::vNerve::bilibili::live::RoomWarningMessage* room_warning);
  ::vNerve::bilibili::live::RoomWarningMessage* unsafe_arena_release_room_warning();

  // .vNerve.bilibili.live.RoomLimitedMessage room_limited = 20;
  bool has_room_limited() const;
  private:
  bool _internal_has_room_limited() const;
  public:
  void clear_room_limited();
  const ::vNerve::bilibili::live::RoomLimitedMessage& room_limited() const;
  ::vNerve::bilibili::live::RoomLimitedMessage* release_room_limited();
  ::vNerve::bilibili::live::RoomLimitedMessage* mutable_room_limited();
  void set_allocated_room_limited(::vNerve::bilibili::live::RoomLimitedMessage* room_limited);
  private:
  const ::vNerve::bilibili::live::RoomLimitedMessage& _internal_room_limited() const;
  ::vNerve::bilibili::live::RoomLimitedMessage* _internal_mutable_room_limited();
  public:
  void unsafe_arena_set_allocated_room_limited(
      ::vNerve::bilibili::live::RoomLimitedMessage* room_limited);
  ::vNerve::bilibili::live::RoomLimitedMessage* unsafe_arena_release_room_limited();

  // .vNerve.bilibili.live.SuperChatDeleteMessage superchat_delete = 21;
  bool has_superchat_delete() const;
  private:
  bool _internal_has_superchat_delete() const;
  public:
  void clear_superchat_delete();
  const ::vNerve::bilibili::live::SuperChatDeleteMessage& superchat_delete() const;
  ::vNerve::bilibili::live::SuperChatDeleteMessage* release_superchat_delete();
  ::vNerve::bilibili::live::SuperChatDeleteMessage* mutable_superchat_delete();
  void set_allocated_superchat_delete(::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_delete);
  private:
  const ::vNerve::bilibili::live::SuperChatDeleteMessage& _internal_superchat_delete() const;
  ::vNerve::bilibili::live::SuperChatDeleteMessage* _internal_mutable_superchat_delete();
  public:
  void unsafe_arena_set_allocated_superchat_delete(
      ::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_delete);
  ::vNerve::bilibili::live::SuperChatDeleteMessage* unsafe_arena_release_superchat_delete();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomMessage)
 private:
  class _Internal;
  void set_has_user_message();
  void set_has_popularity_change();
  void set_has_live_status();
  void set_has_info_change();
  void set_has_room_locked();
  void set_has_room_warning();
  void set_has_room_limited();
  void set_has_superchat_delete();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::vNerve::bilibili::live::UserMessage* user_message_;
    ::vNerve::bilibili::live::PopularityChangedMessage* popularity_change_;
    ::vNerve::bilibili::live::LiveStatusChangedMessage* live_status_;
    ::vNerve::bilibili::live::RoomInfoChangedMessage* info_change_;
    ::vNerve::bilibili::live::RoomLockedMessage* room_locked_;
    ::vNerve::bilibili::live::RoomWarningMessage* room_warning_;
    ::vNerve::bilibili::live::RoomLimitedMessage* room_limited_;
    ::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_delete_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PopularityChangedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.PopularityChangedMessage) */ {
 public:
  PopularityChangedMessage();
  virtual ~PopularityChangedMessage();

  PopularityChangedMessage(const PopularityChangedMessage& from);
  PopularityChangedMessage(PopularityChangedMessage&& from) noexcept
    : PopularityChangedMessage() {
    *this = ::std::move(from);
  }

  inline PopularityChangedMessage& operator=(const PopularityChangedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopularityChangedMessage& operator=(PopularityChangedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PopularityChangedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PopularityChangedMessage* internal_default_instance() {
    return reinterpret_cast<const PopularityChangedMessage*>(
               &_PopularityChangedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PopularityChangedMessage& a, PopularityChangedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PopularityChangedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PopularityChangedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopularityChangedMessage* New() const final {
    return CreateMaybeMessage<PopularityChangedMessage>(nullptr);
  }

  PopularityChangedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopularityChangedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PopularityChangedMessage& from);
  void MergeFrom(const PopularityChangedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopularityChangedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.PopularityChangedMessage";
  }
  protected:
  explicit PopularityChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPopularityFieldNumber = 1,
  };
  // uint32 popularity = 1;
  void clear_popularity();
  ::PROTOBUF_NAMESPACE_ID::uint32 popularity() const;
  void set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_popularity() const;
  void _internal_set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.PopularityChangedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 popularity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LiveStatusChangedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.LiveStatusChangedMessage) */ {
 public:
  LiveStatusChangedMessage();
  virtual ~LiveStatusChangedMessage();

  LiveStatusChangedMessage(const LiveStatusChangedMessage& from);
  LiveStatusChangedMessage(LiveStatusChangedMessage&& from) noexcept
    : LiveStatusChangedMessage() {
    *this = ::std::move(from);
  }

  inline LiveStatusChangedMessage& operator=(const LiveStatusChangedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveStatusChangedMessage& operator=(LiveStatusChangedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiveStatusChangedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiveStatusChangedMessage* internal_default_instance() {
    return reinterpret_cast<const LiveStatusChangedMessage*>(
               &_LiveStatusChangedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LiveStatusChangedMessage& a, LiveStatusChangedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LiveStatusChangedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveStatusChangedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiveStatusChangedMessage* New() const final {
    return CreateMaybeMessage<LiveStatusChangedMessage>(nullptr);
  }

  LiveStatusChangedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiveStatusChangedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiveStatusChangedMessage& from);
  void MergeFrom(const LiveStatusChangedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiveStatusChangedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.LiveStatusChangedMessage";
  }
  protected:
  explicit LiveStatusChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .vNerve.bilibili.live.LiveStatus status = 1;
  void clear_status();
  ::vNerve::bilibili::live::LiveStatus status() const;
  void set_status(::vNerve::bilibili::live::LiveStatus value);
  private:
  ::vNerve::bilibili::live::LiveStatus _internal_status() const;
  void _internal_set_status(::vNerve::bilibili::live::LiveStatus value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.LiveStatusChangedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoChangedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomInfoChangedMessage) */ {
 public:
  RoomInfoChangedMessage();
  virtual ~RoomInfoChangedMessage();

  RoomInfoChangedMessage(const RoomInfoChangedMessage& from);
  RoomInfoChangedMessage(RoomInfoChangedMessage&& from) noexcept
    : RoomInfoChangedMessage() {
    *this = ::std::move(from);
  }

  inline RoomInfoChangedMessage& operator=(const RoomInfoChangedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoChangedMessage& operator=(RoomInfoChangedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfoChangedMessage& default_instance();

  enum ChangedCase {
    kBaseInfo = 1,
    kBackgroundUrl = 2,
    kSkinId = 3,
    kAdmin = 4,
    CHANGED_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfoChangedMessage* internal_default_instance() {
    return reinterpret_cast<const RoomInfoChangedMessage*>(
               &_RoomInfoChangedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomInfoChangedMessage& a, RoomInfoChangedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfoChangedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfoChangedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoChangedMessage* New() const final {
    return CreateMaybeMessage<RoomInfoChangedMessage>(nullptr);
  }

  RoomInfoChangedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoChangedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfoChangedMessage& from);
  void MergeFrom(const RoomInfoChangedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoChangedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomInfoChangedMessage";
  }
  protected:
  explicit RoomInfoChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kBackgroundUrlFieldNumber = 2,
    kSkinIdFieldNumber = 3,
    kAdminFieldNumber = 4,
  };
  // .vNerve.bilibili.live.RoomBaseInfo base_info = 1;
  bool has_base_info() const;
  private:
  bool _internal_has_base_info() const;
  public:
  void clear_base_info();
  const ::vNerve::bilibili::live::RoomBaseInfo& base_info() const;
  ::vNerve::bilibili::live::RoomBaseInfo* release_base_info();
  ::vNerve::bilibili::live::RoomBaseInfo* mutable_base_info();
  void set_allocated_base_info(::vNerve::bilibili::live::RoomBaseInfo* base_info);
  private:
  const ::vNerve::bilibili::live::RoomBaseInfo& _internal_base_info() const;
  ::vNerve::bilibili::live::RoomBaseInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::vNerve::bilibili::live::RoomBaseInfo* base_info);
  ::vNerve::bilibili::live::RoomBaseInfo* unsafe_arena_release_base_info();

  // string background_url = 2;
  private:
  bool _internal_has_background_url() const;
  public:
  void clear_background_url();
  const std::string& background_url() const;
  void set_background_url(const std::string& value);
  void set_background_url(std::string&& value);
  void set_background_url(const char* value);
  void set_background_url(const char* value, size_t size);
  std::string* mutable_background_url();
  std::string* release_background_url();
  void set_allocated_background_url(std::string* background_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_background_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_background_url(
      std::string* background_url);
  private:
  const std::string& _internal_background_url() const;
  void _internal_set_background_url(const std::string& value);
  std::string* _internal_mutable_background_url();
  public:

  // uint32 skin_id = 3;
  private:
  bool _internal_has_skin_id() const;
  public:
  void clear_skin_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skin_id() const;
  void set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skin_id() const;
  void _internal_set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.bilibili.live.RoomAdminInfo admin = 4;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  const ::vNerve::bilibili::live::RoomAdminInfo& admin() const;
  ::vNerve::bilibili::live::RoomAdminInfo* release_admin();
  ::vNerve::bilibili::live::RoomAdminInfo* mutable_admin();
  void set_allocated_admin(::vNerve::bilibili::live::RoomAdminInfo* admin);
  private:
  const ::vNerve::bilibili::live::RoomAdminInfo& _internal_admin() const;
  ::vNerve::bilibili::live::RoomAdminInfo* _internal_mutable_admin();
  public:
  void unsafe_arena_set_allocated_admin(
      ::vNerve::bilibili::live::RoomAdminInfo* admin);
  ::vNerve::bilibili::live::RoomAdminInfo* unsafe_arena_release_admin();

  void clear_changed();
  ChangedCase changed_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomInfoChangedMessage)
 private:
  class _Internal;
  void set_has_base_info();
  void set_has_background_url();
  void set_has_skin_id();
  void set_has_admin();

  inline bool has_changed() const;
  inline void clear_has_changed();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ChangedUnion {
    ChangedUnion() {}
    ::vNerve::bilibili::live::RoomBaseInfo* base_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_url_;
    ::PROTOBUF_NAMESPACE_ID::uint32 skin_id_;
    ::vNerve::bilibili::live::RoomAdminInfo* admin_;
  } changed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomBaseInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomBaseInfo) */ {
 public:
  RoomBaseInfo();
  virtual ~RoomBaseInfo();

  RoomBaseInfo(const RoomBaseInfo& from);
  RoomBaseInfo(RoomBaseInfo&& from) noexcept
    : RoomBaseInfo() {
    *this = ::std::move(from);
  }

  inline RoomBaseInfo& operator=(const RoomBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomBaseInfo& operator=(RoomBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomBaseInfo* internal_default_instance() {
    return reinterpret_cast<const RoomBaseInfo*>(
               &_RoomBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomBaseInfo& a, RoomBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomBaseInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomBaseInfo* New() const final {
    return CreateMaybeMessage<RoomBaseInfo>(nullptr);
  }

  RoomBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomBaseInfo& from);
  void MergeFrom(const RoomBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomBaseInfo";
  }
  protected:
  explicit RoomBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kAreaNameFieldNumber = 3,
    kParentAreaNameFieldNumber = 5,
    kAreaIdFieldNumber = 2,
    kParentAreaIdFieldNumber = 4,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string area_name = 3;
  void clear_area_name();
  const std::string& area_name() const;
  void set_area_name(const std::string& value);
  void set_area_name(std::string&& value);
  void set_area_name(const char* value);
  void set_area_name(const char* value, size_t size);
  std::string* mutable_area_name();
  std::string* release_area_name();
  void set_allocated_area_name(std::string* area_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_area_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_area_name(
      std::string* area_name);
  private:
  const std::string& _internal_area_name() const;
  void _internal_set_area_name(const std::string& value);
  std::string* _internal_mutable_area_name();
  public:

  // string parent_area_name = 5;
  void clear_parent_area_name();
  const std::string& parent_area_name() const;
  void set_parent_area_name(const std::string& value);
  void set_parent_area_name(std::string&& value);
  void set_parent_area_name(const char* value);
  void set_parent_area_name(const char* value, size_t size);
  std::string* mutable_parent_area_name();
  std::string* release_parent_area_name();
  void set_allocated_parent_area_name(std::string* parent_area_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent_area_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent_area_name(
      std::string* parent_area_name);
  private:
  const std::string& _internal_parent_area_name() const;
  void _internal_set_parent_area_name(const std::string& value);
  std::string* _internal_mutable_parent_area_name();
  public:

  // uint32 area_id = 2;
  void clear_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id() const;
  void set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_area_id() const;
  void _internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 parent_area_id = 4;
  void clear_parent_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_area_id() const;
  void set_parent_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parent_area_id() const;
  void _internal_set_parent_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomBaseInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_area_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 area_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_area_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomAdminInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomAdminInfo) */ {
 public:
  RoomAdminInfo();
  virtual ~RoomAdminInfo();

  RoomAdminInfo(const RoomAdminInfo& from);
  RoomAdminInfo(RoomAdminInfo&& from) noexcept
    : RoomAdminInfo() {
    *this = ::std::move(from);
  }

  inline RoomAdminInfo& operator=(const RoomAdminInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomAdminInfo& operator=(RoomAdminInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomAdminInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomAdminInfo* internal_default_instance() {
    return reinterpret_cast<const RoomAdminInfo*>(
               &_RoomAdminInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomAdminInfo& a, RoomAdminInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomAdminInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomAdminInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomAdminInfo* New() const final {
    return CreateMaybeMessage<RoomAdminInfo>(nullptr);
  }

  RoomAdminInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomAdminInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomAdminInfo& from);
  void MergeFrom(const RoomAdminInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomAdminInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomAdminInfo";
  }
  protected:
  explicit RoomAdminInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // repeated uint64 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uid() const;
  void _internal_add_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uid(int index) const;
  void set_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uid();

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomAdminInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomLockedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomLockedMessage) */ {
 public:
  RoomLockedMessage();
  virtual ~RoomLockedMessage();

  RoomLockedMessage(const RoomLockedMessage& from);
  RoomLockedMessage(RoomLockedMessage&& from) noexcept
    : RoomLockedMessage() {
    *this = ::std::move(from);
  }

  inline RoomLockedMessage& operator=(const RoomLockedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLockedMessage& operator=(RoomLockedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomLockedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomLockedMessage* internal_default_instance() {
    return reinterpret_cast<const RoomLockedMessage*>(
               &_RoomLockedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoomLockedMessage& a, RoomLockedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLockedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomLockedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLockedMessage* New() const final {
    return CreateMaybeMessage<RoomLockedMessage>(nullptr);
  }

  RoomLockedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLockedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomLockedMessage& from);
  void MergeFrom(const RoomLockedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLockedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomLockedMessage";
  }
  protected:
  explicit RoomLockedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockedUntilFieldNumber = 1,
  };
  // uint64 locked_until = 1;
  void clear_locked_until();
  ::PROTOBUF_NAMESPACE_ID::uint64 locked_until() const;
  void set_locked_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_locked_until() const;
  void _internal_set_locked_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomLockedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 locked_until_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomWarningMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomWarningMessage) */ {
 public:
  RoomWarningMessage();
  virtual ~RoomWarningMessage();

  RoomWarningMessage(const RoomWarningMessage& from);
  RoomWarningMessage(RoomWarningMessage&& from) noexcept
    : RoomWarningMessage() {
    *this = ::std::move(from);
  }

  inline RoomWarningMessage& operator=(const RoomWarningMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomWarningMessage& operator=(RoomWarningMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomWarningMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomWarningMessage* internal_default_instance() {
    return reinterpret_cast<const RoomWarningMessage*>(
               &_RoomWarningMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoomWarningMessage& a, RoomWarningMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomWarningMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomWarningMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomWarningMessage* New() const final {
    return CreateMaybeMessage<RoomWarningMessage>(nullptr);
  }

  RoomWarningMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomWarningMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomWarningMessage& from);
  void MergeFrom(const RoomWarningMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomWarningMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomWarningMessage";
  }
  protected:
  explicit RoomWarningMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomWarningMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RoomLimitedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomLimitedMessage) */ {
 public:
  RoomLimitedMessage();
  virtual ~RoomLimitedMessage();

  RoomLimitedMessage(const RoomLimitedMessage& from);
  RoomLimitedMessage(RoomLimitedMessage&& from) noexcept
    : RoomLimitedMessage() {
    *this = ::std::move(from);
  }

  inline RoomLimitedMessage& operator=(const RoomLimitedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLimitedMessage& operator=(RoomLimitedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomLimitedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomLimitedMessage* internal_default_instance() {
    return reinterpret_cast<const RoomLimitedMessage*>(
               &_RoomLimitedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoomLimitedMessage& a, RoomLimitedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLimitedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomLimitedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLimitedMessage* New() const final {
    return CreateMaybeMessage<RoomLimitedMessage>(nullptr);
  }

  RoomLimitedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLimitedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomLimitedMessage& from);
  void MergeFrom(const RoomLimitedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLimitedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomLimitedMessage";
  }
  protected:
  explicit RoomLimitedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDelayRangeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 delay_range = 2;
  void clear_delay_range();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_range() const;
  void set_delay_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay_range() const;
  void _internal_set_delay_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomLimitedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SuperChatDeleteMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.SuperChatDeleteMessage) */ {
 public:
  SuperChatDeleteMessage();
  virtual ~SuperChatDeleteMessage();

  SuperChatDeleteMessage(const SuperChatDeleteMessage& from);
  SuperChatDeleteMessage(SuperChatDeleteMessage&& from) noexcept
    : SuperChatDeleteMessage() {
    *this = ::std::move(from);
  }

  inline SuperChatDeleteMessage& operator=(const SuperChatDeleteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuperChatDeleteMessage& operator=(SuperChatDeleteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuperChatDeleteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuperChatDeleteMessage* internal_default_instance() {
    return reinterpret_cast<const SuperChatDeleteMessage*>(
               &_SuperChatDeleteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SuperChatDeleteMessage& a, SuperChatDeleteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SuperChatDeleteMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuperChatDeleteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuperChatDeleteMessage* New() const final {
    return CreateMaybeMessage<SuperChatDeleteMessage>(nullptr);
  }

  SuperChatDeleteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuperChatDeleteMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuperChatDeleteMessage& from);
  void MergeFrom(const SuperChatDeleteMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuperChatDeleteMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.SuperChatDeleteMessage";
  }
  protected:
  explicit SuperChatDeleteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated uint64 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.SuperChatDeleteMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomMessage

// uint32 room_id = 1;
inline void RoomMessage::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMessage::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMessage::room_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.room_id)
  return _internal_room_id();
}
inline void RoomMessage::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void RoomMessage::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomMessage.room_id)
}

// .vNerve.bilibili.live.UserMessage user_message = 2;
inline bool RoomMessage::_internal_has_user_message() const {
  return payload_case() == kUserMessage;
}
inline bool RoomMessage::has_user_message() const {
  return _internal_has_user_message();
}
inline void RoomMessage::set_has_user_message() {
  _oneof_case_[0] = kUserMessage;
}
inline ::vNerve::bilibili::live::UserMessage* RoomMessage::release_user_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.user_message)
  if (_internal_has_user_message()) {
    clear_has_payload();
      ::vNerve::bilibili::live::UserMessage* temp = payload_.user_message_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.user_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::UserMessage& RoomMessage::_internal_user_message() const {
  return _internal_has_user_message()
      ? *payload_.user_message_
      : *reinterpret_cast< ::vNerve::bilibili::live::UserMessage*>(&::vNerve::bilibili::live::_UserMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::UserMessage& RoomMessage::user_message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.user_message)
  return _internal_user_message();
}
inline ::vNerve::bilibili::live::UserMessage* RoomMessage::unsafe_arena_release_user_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.user_message)
  if (_internal_has_user_message()) {
    clear_has_payload();
    ::vNerve::bilibili::live::UserMessage* temp = payload_.user_message_;
    payload_.user_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_user_message(::vNerve::bilibili::live::UserMessage* user_message) {
  clear_payload();
  if (user_message) {
    set_has_user_message();
    payload_.user_message_ = user_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.user_message)
}
inline ::vNerve::bilibili::live::UserMessage* RoomMessage::_internal_mutable_user_message() {
  if (!_internal_has_user_message()) {
    clear_payload();
    set_has_user_message();
    payload_.user_message_ = CreateMaybeMessage< ::vNerve::bilibili::live::UserMessage >(
        GetArenaNoVirtual());
  }
  return payload_.user_message_;
}
inline ::vNerve::bilibili::live::UserMessage* RoomMessage::mutable_user_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.user_message)
  return _internal_mutable_user_message();
}

// .vNerve.bilibili.live.PopularityChangedMessage popularity_change = 3;
inline bool RoomMessage::_internal_has_popularity_change() const {
  return payload_case() == kPopularityChange;
}
inline bool RoomMessage::has_popularity_change() const {
  return _internal_has_popularity_change();
}
inline void RoomMessage::set_has_popularity_change() {
  _oneof_case_[0] = kPopularityChange;
}
inline void RoomMessage::clear_popularity_change() {
  if (_internal_has_popularity_change()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.popularity_change_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::PopularityChangedMessage* RoomMessage::release_popularity_change() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.popularity_change)
  if (_internal_has_popularity_change()) {
    clear_has_payload();
      ::vNerve::bilibili::live::PopularityChangedMessage* temp = payload_.popularity_change_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.popularity_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::PopularityChangedMessage& RoomMessage::_internal_popularity_change() const {
  return _internal_has_popularity_change()
      ? *payload_.popularity_change_
      : *reinterpret_cast< ::vNerve::bilibili::live::PopularityChangedMessage*>(&::vNerve::bilibili::live::_PopularityChangedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::PopularityChangedMessage& RoomMessage::popularity_change() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.popularity_change)
  return _internal_popularity_change();
}
inline ::vNerve::bilibili::live::PopularityChangedMessage* RoomMessage::unsafe_arena_release_popularity_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.popularity_change)
  if (_internal_has_popularity_change()) {
    clear_has_payload();
    ::vNerve::bilibili::live::PopularityChangedMessage* temp = payload_.popularity_change_;
    payload_.popularity_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_popularity_change(::vNerve::bilibili::live::PopularityChangedMessage* popularity_change) {
  clear_payload();
  if (popularity_change) {
    set_has_popularity_change();
    payload_.popularity_change_ = popularity_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.popularity_change)
}
inline ::vNerve::bilibili::live::PopularityChangedMessage* RoomMessage::_internal_mutable_popularity_change() {
  if (!_internal_has_popularity_change()) {
    clear_payload();
    set_has_popularity_change();
    payload_.popularity_change_ = CreateMaybeMessage< ::vNerve::bilibili::live::PopularityChangedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.popularity_change_;
}
inline ::vNerve::bilibili::live::PopularityChangedMessage* RoomMessage::mutable_popularity_change() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.popularity_change)
  return _internal_mutable_popularity_change();
}

// .vNerve.bilibili.live.LiveStatusChangedMessage live_status = 16;
inline bool RoomMessage::_internal_has_live_status() const {
  return payload_case() == kLiveStatus;
}
inline bool RoomMessage::has_live_status() const {
  return _internal_has_live_status();
}
inline void RoomMessage::set_has_live_status() {
  _oneof_case_[0] = kLiveStatus;
}
inline void RoomMessage::clear_live_status() {
  if (_internal_has_live_status()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.live_status_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::LiveStatusChangedMessage* RoomMessage::release_live_status() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.live_status)
  if (_internal_has_live_status()) {
    clear_has_payload();
      ::vNerve::bilibili::live::LiveStatusChangedMessage* temp = payload_.live_status_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.live_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::LiveStatusChangedMessage& RoomMessage::_internal_live_status() const {
  return _internal_has_live_status()
      ? *payload_.live_status_
      : *reinterpret_cast< ::vNerve::bilibili::live::LiveStatusChangedMessage*>(&::vNerve::bilibili::live::_LiveStatusChangedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::LiveStatusChangedMessage& RoomMessage::live_status() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.live_status)
  return _internal_live_status();
}
inline ::vNerve::bilibili::live::LiveStatusChangedMessage* RoomMessage::unsafe_arena_release_live_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.live_status)
  if (_internal_has_live_status()) {
    clear_has_payload();
    ::vNerve::bilibili::live::LiveStatusChangedMessage* temp = payload_.live_status_;
    payload_.live_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_live_status(::vNerve::bilibili::live::LiveStatusChangedMessage* live_status) {
  clear_payload();
  if (live_status) {
    set_has_live_status();
    payload_.live_status_ = live_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.live_status)
}
inline ::vNerve::bilibili::live::LiveStatusChangedMessage* RoomMessage::_internal_mutable_live_status() {
  if (!_internal_has_live_status()) {
    clear_payload();
    set_has_live_status();
    payload_.live_status_ = CreateMaybeMessage< ::vNerve::bilibili::live::LiveStatusChangedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.live_status_;
}
inline ::vNerve::bilibili::live::LiveStatusChangedMessage* RoomMessage::mutable_live_status() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.live_status)
  return _internal_mutable_live_status();
}

// .vNerve.bilibili.live.RoomInfoChangedMessage info_change = 17;
inline bool RoomMessage::_internal_has_info_change() const {
  return payload_case() == kInfoChange;
}
inline bool RoomMessage::has_info_change() const {
  return _internal_has_info_change();
}
inline void RoomMessage::set_has_info_change() {
  _oneof_case_[0] = kInfoChange;
}
inline void RoomMessage::clear_info_change() {
  if (_internal_has_info_change()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.info_change_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::RoomInfoChangedMessage* RoomMessage::release_info_change() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.info_change)
  if (_internal_has_info_change()) {
    clear_has_payload();
      ::vNerve::bilibili::live::RoomInfoChangedMessage* temp = payload_.info_change_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.info_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomInfoChangedMessage& RoomMessage::_internal_info_change() const {
  return _internal_has_info_change()
      ? *payload_.info_change_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomInfoChangedMessage*>(&::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomInfoChangedMessage& RoomMessage::info_change() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.info_change)
  return _internal_info_change();
}
inline ::vNerve::bilibili::live::RoomInfoChangedMessage* RoomMessage::unsafe_arena_release_info_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.info_change)
  if (_internal_has_info_change()) {
    clear_has_payload();
    ::vNerve::bilibili::live::RoomInfoChangedMessage* temp = payload_.info_change_;
    payload_.info_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_info_change(::vNerve::bilibili::live::RoomInfoChangedMessage* info_change) {
  clear_payload();
  if (info_change) {
    set_has_info_change();
    payload_.info_change_ = info_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.info_change)
}
inline ::vNerve::bilibili::live::RoomInfoChangedMessage* RoomMessage::_internal_mutable_info_change() {
  if (!_internal_has_info_change()) {
    clear_payload();
    set_has_info_change();
    payload_.info_change_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomInfoChangedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.info_change_;
}
inline ::vNerve::bilibili::live::RoomInfoChangedMessage* RoomMessage::mutable_info_change() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.info_change)
  return _internal_mutable_info_change();
}

// .vNerve.bilibili.live.RoomLockedMessage room_locked = 18;
inline bool RoomMessage::_internal_has_room_locked() const {
  return payload_case() == kRoomLocked;
}
inline bool RoomMessage::has_room_locked() const {
  return _internal_has_room_locked();
}
inline void RoomMessage::set_has_room_locked() {
  _oneof_case_[0] = kRoomLocked;
}
inline void RoomMessage::clear_room_locked() {
  if (_internal_has_room_locked()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.room_locked_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::RoomLockedMessage* RoomMessage::release_room_locked() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.room_locked)
  if (_internal_has_room_locked()) {
    clear_has_payload();
      ::vNerve::bilibili::live::RoomLockedMessage* temp = payload_.room_locked_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.room_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomLockedMessage& RoomMessage::_internal_room_locked() const {
  return _internal_has_room_locked()
      ? *payload_.room_locked_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomLockedMessage*>(&::vNerve::bilibili::live::_RoomLockedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomLockedMessage& RoomMessage::room_locked() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.room_locked)
  return _internal_room_locked();
}
inline ::vNerve::bilibili::live::RoomLockedMessage* RoomMessage::unsafe_arena_release_room_locked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.room_locked)
  if (_internal_has_room_locked()) {
    clear_has_payload();
    ::vNerve::bilibili::live::RoomLockedMessage* temp = payload_.room_locked_;
    payload_.room_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_room_locked(::vNerve::bilibili::live::RoomLockedMessage* room_locked) {
  clear_payload();
  if (room_locked) {
    set_has_room_locked();
    payload_.room_locked_ = room_locked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.room_locked)
}
inline ::vNerve::bilibili::live::RoomLockedMessage* RoomMessage::_internal_mutable_room_locked() {
  if (!_internal_has_room_locked()) {
    clear_payload();
    set_has_room_locked();
    payload_.room_locked_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomLockedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.room_locked_;
}
inline ::vNerve::bilibili::live::RoomLockedMessage* RoomMessage::mutable_room_locked() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.room_locked)
  return _internal_mutable_room_locked();
}

// .vNerve.bilibili.live.RoomWarningMessage room_warning = 19;
inline bool RoomMessage::_internal_has_room_warning() const {
  return payload_case() == kRoomWarning;
}
inline bool RoomMessage::has_room_warning() const {
  return _internal_has_room_warning();
}
inline void RoomMessage::set_has_room_warning() {
  _oneof_case_[0] = kRoomWarning;
}
inline void RoomMessage::clear_room_warning() {
  if (_internal_has_room_warning()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.room_warning_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::RoomWarningMessage* RoomMessage::release_room_warning() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.room_warning)
  if (_internal_has_room_warning()) {
    clear_has_payload();
      ::vNerve::bilibili::live::RoomWarningMessage* temp = payload_.room_warning_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.room_warning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomWarningMessage& RoomMessage::_internal_room_warning() const {
  return _internal_has_room_warning()
      ? *payload_.room_warning_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomWarningMessage*>(&::vNerve::bilibili::live::_RoomWarningMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomWarningMessage& RoomMessage::room_warning() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.room_warning)
  return _internal_room_warning();
}
inline ::vNerve::bilibili::live::RoomWarningMessage* RoomMessage::unsafe_arena_release_room_warning() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.room_warning)
  if (_internal_has_room_warning()) {
    clear_has_payload();
    ::vNerve::bilibili::live::RoomWarningMessage* temp = payload_.room_warning_;
    payload_.room_warning_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_room_warning(::vNerve::bilibili::live::RoomWarningMessage* room_warning) {
  clear_payload();
  if (room_warning) {
    set_has_room_warning();
    payload_.room_warning_ = room_warning;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.room_warning)
}
inline ::vNerve::bilibili::live::RoomWarningMessage* RoomMessage::_internal_mutable_room_warning() {
  if (!_internal_has_room_warning()) {
    clear_payload();
    set_has_room_warning();
    payload_.room_warning_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomWarningMessage >(
        GetArenaNoVirtual());
  }
  return payload_.room_warning_;
}
inline ::vNerve::bilibili::live::RoomWarningMessage* RoomMessage::mutable_room_warning() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.room_warning)
  return _internal_mutable_room_warning();
}

// .vNerve.bilibili.live.RoomLimitedMessage room_limited = 20;
inline bool RoomMessage::_internal_has_room_limited() const {
  return payload_case() == kRoomLimited;
}
inline bool RoomMessage::has_room_limited() const {
  return _internal_has_room_limited();
}
inline void RoomMessage::set_has_room_limited() {
  _oneof_case_[0] = kRoomLimited;
}
inline void RoomMessage::clear_room_limited() {
  if (_internal_has_room_limited()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.room_limited_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::RoomLimitedMessage* RoomMessage::release_room_limited() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.room_limited)
  if (_internal_has_room_limited()) {
    clear_has_payload();
      ::vNerve::bilibili::live::RoomLimitedMessage* temp = payload_.room_limited_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.room_limited_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomLimitedMessage& RoomMessage::_internal_room_limited() const {
  return _internal_has_room_limited()
      ? *payload_.room_limited_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomLimitedMessage*>(&::vNerve::bilibili::live::_RoomLimitedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomLimitedMessage& RoomMessage::room_limited() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.room_limited)
  return _internal_room_limited();
}
inline ::vNerve::bilibili::live::RoomLimitedMessage* RoomMessage::unsafe_arena_release_room_limited() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.room_limited)
  if (_internal_has_room_limited()) {
    clear_has_payload();
    ::vNerve::bilibili::live::RoomLimitedMessage* temp = payload_.room_limited_;
    payload_.room_limited_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_room_limited(::vNerve::bilibili::live::RoomLimitedMessage* room_limited) {
  clear_payload();
  if (room_limited) {
    set_has_room_limited();
    payload_.room_limited_ = room_limited;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.room_limited)
}
inline ::vNerve::bilibili::live::RoomLimitedMessage* RoomMessage::_internal_mutable_room_limited() {
  if (!_internal_has_room_limited()) {
    clear_payload();
    set_has_room_limited();
    payload_.room_limited_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomLimitedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.room_limited_;
}
inline ::vNerve::bilibili::live::RoomLimitedMessage* RoomMessage::mutable_room_limited() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.room_limited)
  return _internal_mutable_room_limited();
}

// .vNerve.bilibili.live.SuperChatDeleteMessage superchat_delete = 21;
inline bool RoomMessage::_internal_has_superchat_delete() const {
  return payload_case() == kSuperchatDelete;
}
inline bool RoomMessage::has_superchat_delete() const {
  return _internal_has_superchat_delete();
}
inline void RoomMessage::set_has_superchat_delete() {
  _oneof_case_[0] = kSuperchatDelete;
}
inline void RoomMessage::clear_superchat_delete() {
  if (_internal_has_superchat_delete()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.superchat_delete_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::SuperChatDeleteMessage* RoomMessage::release_superchat_delete() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomMessage.superchat_delete)
  if (_internal_has_superchat_delete()) {
    clear_has_payload();
      ::vNerve::bilibili::live::SuperChatDeleteMessage* temp = payload_.superchat_delete_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.superchat_delete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::SuperChatDeleteMessage& RoomMessage::_internal_superchat_delete() const {
  return _internal_has_superchat_delete()
      ? *payload_.superchat_delete_
      : *reinterpret_cast< ::vNerve::bilibili::live::SuperChatDeleteMessage*>(&::vNerve::bilibili::live::_SuperChatDeleteMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::SuperChatDeleteMessage& RoomMessage::superchat_delete() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomMessage.superchat_delete)
  return _internal_superchat_delete();
}
inline ::vNerve::bilibili::live::SuperChatDeleteMessage* RoomMessage::unsafe_arena_release_superchat_delete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomMessage.superchat_delete)
  if (_internal_has_superchat_delete()) {
    clear_has_payload();
    ::vNerve::bilibili::live::SuperChatDeleteMessage* temp = payload_.superchat_delete_;
    payload_.superchat_delete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomMessage::unsafe_arena_set_allocated_superchat_delete(::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_delete) {
  clear_payload();
  if (superchat_delete) {
    set_has_superchat_delete();
    payload_.superchat_delete_ = superchat_delete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomMessage.superchat_delete)
}
inline ::vNerve::bilibili::live::SuperChatDeleteMessage* RoomMessage::_internal_mutable_superchat_delete() {
  if (!_internal_has_superchat_delete()) {
    clear_payload();
    set_has_superchat_delete();
    payload_.superchat_delete_ = CreateMaybeMessage< ::vNerve::bilibili::live::SuperChatDeleteMessage >(
        GetArenaNoVirtual());
  }
  return payload_.superchat_delete_;
}
inline ::vNerve::bilibili::live::SuperChatDeleteMessage* RoomMessage::mutable_superchat_delete() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomMessage.superchat_delete)
  return _internal_mutable_superchat_delete();
}

inline bool RoomMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void RoomMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline RoomMessage::PayloadCase RoomMessage::payload_case() const {
  return RoomMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PopularityChangedMessage

// uint32 popularity = 1;
inline void PopularityChangedMessage::clear_popularity() {
  popularity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PopularityChangedMessage::_internal_popularity() const {
  return popularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PopularityChangedMessage::popularity() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.PopularityChangedMessage.popularity)
  return _internal_popularity();
}
inline void PopularityChangedMessage::_internal_set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  popularity_ = value;
}
inline void PopularityChangedMessage::set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_popularity(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.PopularityChangedMessage.popularity)
}

// -------------------------------------------------------------------

// LiveStatusChangedMessage

// .vNerve.bilibili.live.LiveStatus status = 1;
inline void LiveStatusChangedMessage::clear_status() {
  status_ = 0;
}
inline ::vNerve::bilibili::live::LiveStatus LiveStatusChangedMessage::_internal_status() const {
  return static_cast< ::vNerve::bilibili::live::LiveStatus >(status_);
}
inline ::vNerve::bilibili::live::LiveStatus LiveStatusChangedMessage::status() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.LiveStatusChangedMessage.status)
  return _internal_status();
}
inline void LiveStatusChangedMessage::_internal_set_status(::vNerve::bilibili::live::LiveStatus value) {
  
  status_ = value;
}
inline void LiveStatusChangedMessage::set_status(::vNerve::bilibili::live::LiveStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.LiveStatusChangedMessage.status)
}

// string message = 2;
inline void LiveStatusChangedMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LiveStatusChangedMessage::message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.LiveStatusChangedMessage.message)
  return _internal_message();
}
inline void LiveStatusChangedMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}
inline std::string* LiveStatusChangedMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.LiveStatusChangedMessage.message)
  return _internal_mutable_message();
}
inline const std::string& LiveStatusChangedMessage::_internal_message() const {
  return message_.Get();
}
inline void LiveStatusChangedMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LiveStatusChangedMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}
inline void LiveStatusChangedMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}
inline void LiveStatusChangedMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}
inline std::string* LiveStatusChangedMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LiveStatusChangedMessage::release_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.LiveStatusChangedMessage.message)
  
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LiveStatusChangedMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}
inline std::string* LiveStatusChangedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.LiveStatusChangedMessage.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LiveStatusChangedMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.LiveStatusChangedMessage.message)
}

// -------------------------------------------------------------------

// RoomInfoChangedMessage

// .vNerve.bilibili.live.RoomBaseInfo base_info = 1;
inline bool RoomInfoChangedMessage::_internal_has_base_info() const {
  return changed_case() == kBaseInfo;
}
inline bool RoomInfoChangedMessage::has_base_info() const {
  return _internal_has_base_info();
}
inline void RoomInfoChangedMessage::set_has_base_info() {
  _oneof_case_[0] = kBaseInfo;
}
inline void RoomInfoChangedMessage::clear_base_info() {
  if (_internal_has_base_info()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete changed_.base_info_;
    }
    clear_has_changed();
  }
}
inline ::vNerve::bilibili::live::RoomBaseInfo* RoomInfoChangedMessage::release_base_info() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
  if (_internal_has_base_info()) {
    clear_has_changed();
      ::vNerve::bilibili::live::RoomBaseInfo* temp = changed_.base_info_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    changed_.base_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomBaseInfo& RoomInfoChangedMessage::_internal_base_info() const {
  return _internal_has_base_info()
      ? *changed_.base_info_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomBaseInfo*>(&::vNerve::bilibili::live::_RoomBaseInfo_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomBaseInfo& RoomInfoChangedMessage::base_info() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
  return _internal_base_info();
}
inline ::vNerve::bilibili::live::RoomBaseInfo* RoomInfoChangedMessage::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
  if (_internal_has_base_info()) {
    clear_has_changed();
    ::vNerve::bilibili::live::RoomBaseInfo* temp = changed_.base_info_;
    changed_.base_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomInfoChangedMessage::unsafe_arena_set_allocated_base_info(::vNerve::bilibili::live::RoomBaseInfo* base_info) {
  clear_changed();
  if (base_info) {
    set_has_base_info();
    changed_.base_info_ = base_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
}
inline ::vNerve::bilibili::live::RoomBaseInfo* RoomInfoChangedMessage::_internal_mutable_base_info() {
  if (!_internal_has_base_info()) {
    clear_changed();
    set_has_base_info();
    changed_.base_info_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomBaseInfo >(
        GetArenaNoVirtual());
  }
  return changed_.base_info_;
}
inline ::vNerve::bilibili::live::RoomBaseInfo* RoomInfoChangedMessage::mutable_base_info() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
  return _internal_mutable_base_info();
}

// string background_url = 2;
inline bool RoomInfoChangedMessage::_internal_has_background_url() const {
  return changed_case() == kBackgroundUrl;
}
inline void RoomInfoChangedMessage::set_has_background_url() {
  _oneof_case_[0] = kBackgroundUrl;
}
inline void RoomInfoChangedMessage::clear_background_url() {
  if (_internal_has_background_url()) {
    changed_.background_url_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_changed();
  }
}
inline const std::string& RoomInfoChangedMessage::background_url() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
  return _internal_background_url();
}
inline void RoomInfoChangedMessage::set_background_url(const std::string& value) {
  _internal_set_background_url(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}
inline std::string* RoomInfoChangedMessage::mutable_background_url() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
  return _internal_mutable_background_url();
}
inline const std::string& RoomInfoChangedMessage::_internal_background_url() const {
  if (_internal_has_background_url()) {
    return changed_.background_url_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RoomInfoChangedMessage::_internal_set_background_url(const std::string& value) {
  if (!_internal_has_background_url()) {
    clear_changed();
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  changed_.background_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void RoomInfoChangedMessage::set_background_url(std::string&& value) {
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
  if (!_internal_has_background_url()) {
    clear_changed();
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  changed_.background_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}
inline void RoomInfoChangedMessage::set_background_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_background_url()) {
    clear_changed();
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  changed_.background_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}
inline void RoomInfoChangedMessage::set_background_url(const char* value,
                             size_t size) {
  if (!_internal_has_background_url()) {
    clear_changed();
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  changed_.background_url_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}
inline std::string* RoomInfoChangedMessage::_internal_mutable_background_url() {
  if (!_internal_has_background_url()) {
    clear_changed();
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return changed_.background_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* RoomInfoChangedMessage::release_background_url() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
  if (_internal_has_background_url()) {
    clear_has_changed();
    return changed_.background_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void RoomInfoChangedMessage::set_allocated_background_url(std::string* background_url) {
  if (has_changed()) {
    clear_changed();
  }
  if (background_url != nullptr) {
    set_has_background_url();
    changed_.background_url_.UnsafeSetDefault(background_url);
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}
inline std::string* RoomInfoChangedMessage::unsafe_arena_release_background_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_background_url()) {
    clear_has_changed();
    return changed_.background_url_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void RoomInfoChangedMessage::unsafe_arena_set_allocated_background_url(std::string* background_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_background_url()) {
    changed_.background_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_changed();
  if (background_url) {
    set_has_background_url();
    changed_.background_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), background_url, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.background_url)
}

// uint32 skin_id = 3;
inline bool RoomInfoChangedMessage::_internal_has_skin_id() const {
  return changed_case() == kSkinId;
}
inline void RoomInfoChangedMessage::set_has_skin_id() {
  _oneof_case_[0] = kSkinId;
}
inline void RoomInfoChangedMessage::clear_skin_id() {
  if (_internal_has_skin_id()) {
    changed_.skin_id_ = 0u;
    clear_has_changed();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoChangedMessage::_internal_skin_id() const {
  if (_internal_has_skin_id()) {
    return changed_.skin_id_;
  }
  return 0u;
}
inline void RoomInfoChangedMessage::_internal_set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_skin_id()) {
    clear_changed();
    set_has_skin_id();
  }
  changed_.skin_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomInfoChangedMessage::skin_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomInfoChangedMessage.skin_id)
  return _internal_skin_id();
}
inline void RoomInfoChangedMessage::set_skin_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skin_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomInfoChangedMessage.skin_id)
}

// .vNerve.bilibili.live.RoomAdminInfo admin = 4;
inline bool RoomInfoChangedMessage::_internal_has_admin() const {
  return changed_case() == kAdmin;
}
inline bool RoomInfoChangedMessage::has_admin() const {
  return _internal_has_admin();
}
inline void RoomInfoChangedMessage::set_has_admin() {
  _oneof_case_[0] = kAdmin;
}
inline void RoomInfoChangedMessage::clear_admin() {
  if (_internal_has_admin()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete changed_.admin_;
    }
    clear_has_changed();
  }
}
inline ::vNerve::bilibili::live::RoomAdminInfo* RoomInfoChangedMessage::release_admin() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
  if (_internal_has_admin()) {
    clear_has_changed();
      ::vNerve::bilibili::live::RoomAdminInfo* temp = changed_.admin_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    changed_.admin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomAdminInfo& RoomInfoChangedMessage::_internal_admin() const {
  return _internal_has_admin()
      ? *changed_.admin_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomAdminInfo*>(&::vNerve::bilibili::live::_RoomAdminInfo_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomAdminInfo& RoomInfoChangedMessage::admin() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
  return _internal_admin();
}
inline ::vNerve::bilibili::live::RoomAdminInfo* RoomInfoChangedMessage::unsafe_arena_release_admin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
  if (_internal_has_admin()) {
    clear_has_changed();
    ::vNerve::bilibili::live::RoomAdminInfo* temp = changed_.admin_;
    changed_.admin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomInfoChangedMessage::unsafe_arena_set_allocated_admin(::vNerve::bilibili::live::RoomAdminInfo* admin) {
  clear_changed();
  if (admin) {
    set_has_admin();
    changed_.admin_ = admin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
}
inline ::vNerve::bilibili::live::RoomAdminInfo* RoomInfoChangedMessage::_internal_mutable_admin() {
  if (!_internal_has_admin()) {
    clear_changed();
    set_has_admin();
    changed_.admin_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomAdminInfo >(
        GetArenaNoVirtual());
  }
  return changed_.admin_;
}
inline ::vNerve::bilibili::live::RoomAdminInfo* RoomInfoChangedMessage::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
  return _internal_mutable_admin();
}

inline bool RoomInfoChangedMessage::has_changed() const {
  return changed_case() != CHANGED_NOT_SET;
}
inline void RoomInfoChangedMessage::clear_has_changed() {
  _oneof_case_[0] = CHANGED_NOT_SET;
}
inline RoomInfoChangedMessage::ChangedCase RoomInfoChangedMessage::changed_case() const {
  return RoomInfoChangedMessage::ChangedCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomBaseInfo

// string title = 1;
inline void RoomBaseInfo::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& RoomBaseInfo::title() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomBaseInfo.title)
  return _internal_title();
}
inline void RoomBaseInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomBaseInfo.title)
}
inline std::string* RoomBaseInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomBaseInfo.title)
  return _internal_mutable_title();
}
inline const std::string& RoomBaseInfo::_internal_title() const {
  return title_.Get();
}
inline void RoomBaseInfo::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomBaseInfo.title)
}
inline void RoomBaseInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomBaseInfo.title)
}
inline void RoomBaseInfo::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomBaseInfo.title)
}
inline std::string* RoomBaseInfo::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* RoomBaseInfo::release_title() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomBaseInfo.title)
  
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomBaseInfo.title)
}
inline std::string* RoomBaseInfo::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomBaseInfo.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RoomBaseInfo::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomBaseInfo.title)
}

// uint32 area_id = 2;
inline void RoomBaseInfo::clear_area_id() {
  area_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomBaseInfo::_internal_area_id() const {
  return area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomBaseInfo::area_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomBaseInfo.area_id)
  return _internal_area_id();
}
inline void RoomBaseInfo::_internal_set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  area_id_ = value;
}
inline void RoomBaseInfo::set_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_area_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomBaseInfo.area_id)
}

// string area_name = 3;
inline void RoomBaseInfo::clear_area_name() {
  area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& RoomBaseInfo::area_name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomBaseInfo.area_name)
  return _internal_area_name();
}
inline void RoomBaseInfo::set_area_name(const std::string& value) {
  _internal_set_area_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomBaseInfo.area_name)
}
inline std::string* RoomBaseInfo::mutable_area_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomBaseInfo.area_name)
  return _internal_mutable_area_name();
}
inline const std::string& RoomBaseInfo::_internal_area_name() const {
  return area_name_.Get();
}
inline void RoomBaseInfo::_internal_set_area_name(const std::string& value) {
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_area_name(std::string&& value) {
  
  area_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomBaseInfo.area_name)
}
inline void RoomBaseInfo::set_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomBaseInfo.area_name)
}
inline void RoomBaseInfo::set_area_name(const char* value,
    size_t size) {
  
  area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomBaseInfo.area_name)
}
inline std::string* RoomBaseInfo::_internal_mutable_area_name() {
  
  return area_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* RoomBaseInfo::release_area_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomBaseInfo.area_name)
  
  return area_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_allocated_area_name(std::string* area_name) {
  if (area_name != nullptr) {
    
  } else {
    
  }
  area_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomBaseInfo.area_name)
}
inline std::string* RoomBaseInfo::unsafe_arena_release_area_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomBaseInfo.area_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return area_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RoomBaseInfo::unsafe_arena_set_allocated_area_name(
    std::string* area_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (area_name != nullptr) {
    
  } else {
    
  }
  area_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      area_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomBaseInfo.area_name)
}

// uint32 parent_area_id = 4;
inline void RoomBaseInfo::clear_parent_area_id() {
  parent_area_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomBaseInfo::_internal_parent_area_id() const {
  return parent_area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomBaseInfo::parent_area_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomBaseInfo.parent_area_id)
  return _internal_parent_area_id();
}
inline void RoomBaseInfo::_internal_set_parent_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parent_area_id_ = value;
}
inline void RoomBaseInfo::set_parent_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parent_area_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomBaseInfo.parent_area_id)
}

// string parent_area_name = 5;
inline void RoomBaseInfo::clear_parent_area_name() {
  parent_area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& RoomBaseInfo::parent_area_name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
  return _internal_parent_area_name();
}
inline void RoomBaseInfo::set_parent_area_name(const std::string& value) {
  _internal_set_parent_area_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}
inline std::string* RoomBaseInfo::mutable_parent_area_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
  return _internal_mutable_parent_area_name();
}
inline const std::string& RoomBaseInfo::_internal_parent_area_name() const {
  return parent_area_name_.Get();
}
inline void RoomBaseInfo::_internal_set_parent_area_name(const std::string& value) {
  
  parent_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_parent_area_name(std::string&& value) {
  
  parent_area_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}
inline void RoomBaseInfo::set_parent_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}
inline void RoomBaseInfo::set_parent_area_name(const char* value,
    size_t size) {
  
  parent_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}
inline std::string* RoomBaseInfo::_internal_mutable_parent_area_name() {
  
  return parent_area_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* RoomBaseInfo::release_parent_area_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
  
  return parent_area_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RoomBaseInfo::set_allocated_parent_area_name(std::string* parent_area_name) {
  if (parent_area_name != nullptr) {
    
  } else {
    
  }
  parent_area_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_area_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}
inline std::string* RoomBaseInfo::unsafe_arena_release_parent_area_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_area_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RoomBaseInfo::unsafe_arena_set_allocated_parent_area_name(
    std::string* parent_area_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent_area_name != nullptr) {
    
  } else {
    
  }
  parent_area_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent_area_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomBaseInfo.parent_area_name)
}

// -------------------------------------------------------------------

// RoomAdminInfo

// repeated uint64 uid = 1;
inline int RoomAdminInfo::_internal_uid_size() const {
  return uid_.size();
}
inline int RoomAdminInfo::uid_size() const {
  return _internal_uid_size();
}
inline void RoomAdminInfo::clear_uid() {
  uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomAdminInfo::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomAdminInfo::uid(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomAdminInfo.uid)
  return _internal_uid(index);
}
inline void RoomAdminInfo::set_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomAdminInfo.uid)
}
inline void RoomAdminInfo::_internal_add_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uid_.Add(value);
}
inline void RoomAdminInfo::add_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:vNerve.bilibili.live.RoomAdminInfo.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RoomAdminInfo::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RoomAdminInfo::uid() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.live.RoomAdminInfo.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RoomAdminInfo::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RoomAdminInfo::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.live.RoomAdminInfo.uid)
  return _internal_mutable_uid();
}

// -------------------------------------------------------------------

// RoomLockedMessage

// uint64 locked_until = 1;
inline void RoomLockedMessage::clear_locked_until() {
  locked_until_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomLockedMessage::_internal_locked_until() const {
  return locked_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomLockedMessage::locked_until() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomLockedMessage.locked_until)
  return _internal_locked_until();
}
inline void RoomLockedMessage::_internal_set_locked_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  locked_until_ = value;
}
inline void RoomLockedMessage::set_locked_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_locked_until(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomLockedMessage.locked_until)
}

// -------------------------------------------------------------------

// RoomWarningMessage

// string message = 1;
inline void RoomWarningMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& RoomWarningMessage::message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomWarningMessage.message)
  return _internal_message();
}
inline void RoomWarningMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomWarningMessage.message)
}
inline std::string* RoomWarningMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomWarningMessage.message)
  return _internal_mutable_message();
}
inline const std::string& RoomWarningMessage::_internal_message() const {
  return message_.Get();
}
inline void RoomWarningMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void RoomWarningMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomWarningMessage.message)
}
inline void RoomWarningMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomWarningMessage.message)
}
inline void RoomWarningMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomWarningMessage.message)
}
inline std::string* RoomWarningMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* RoomWarningMessage::release_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomWarningMessage.message)
  
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RoomWarningMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomWarningMessage.message)
}
inline std::string* RoomWarningMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomWarningMessage.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RoomWarningMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomWarningMessage.message)
}

// -------------------------------------------------------------------

// RoomLimitedMessage

// string type = 1;
inline void RoomLimitedMessage::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& RoomLimitedMessage::type() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomLimitedMessage.type)
  return _internal_type();
}
inline void RoomLimitedMessage::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomLimitedMessage.type)
}
inline std::string* RoomLimitedMessage::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.RoomLimitedMessage.type)
  return _internal_mutable_type();
}
inline const std::string& RoomLimitedMessage::_internal_type() const {
  return type_.Get();
}
inline void RoomLimitedMessage::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void RoomLimitedMessage::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.RoomLimitedMessage.type)
}
inline void RoomLimitedMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.RoomLimitedMessage.type)
}
inline void RoomLimitedMessage::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.RoomLimitedMessage.type)
}
inline std::string* RoomLimitedMessage::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* RoomLimitedMessage::release_type() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.RoomLimitedMessage.type)
  
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RoomLimitedMessage::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomLimitedMessage.type)
}
inline std::string* RoomLimitedMessage::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.RoomLimitedMessage.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RoomLimitedMessage::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.RoomLimitedMessage.type)
}

// uint32 delay_range = 2;
inline void RoomLimitedMessage::clear_delay_range() {
  delay_range_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomLimitedMessage::_internal_delay_range() const {
  return delay_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomLimitedMessage::delay_range() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomLimitedMessage.delay_range)
  return _internal_delay_range();
}
inline void RoomLimitedMessage::_internal_set_delay_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delay_range_ = value;
}
inline void RoomLimitedMessage::set_delay_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay_range(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomLimitedMessage.delay_range)
}

// -------------------------------------------------------------------

// SuperChatDeleteMessage

// repeated uint64 id = 1;
inline int SuperChatDeleteMessage::_internal_id_size() const {
  return id_.size();
}
inline int SuperChatDeleteMessage::id_size() const {
  return _internal_id_size();
}
inline void SuperChatDeleteMessage::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatDeleteMessage::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatDeleteMessage::id(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatDeleteMessage.id)
  return _internal_id(index);
}
inline void SuperChatDeleteMessage::set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatDeleteMessage.id)
}
inline void SuperChatDeleteMessage::_internal_add_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  id_.Add(value);
}
inline void SuperChatDeleteMessage::add_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:vNerve.bilibili.live.SuperChatDeleteMessage.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SuperChatDeleteMessage::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SuperChatDeleteMessage::id() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.live.SuperChatDeleteMessage.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SuperChatDeleteMessage::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SuperChatDeleteMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.live.SuperChatDeleteMessage.id)
  return _internal_mutable_id();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace bilibili
}  // namespace vNerve

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vNerve::bilibili::live::LiveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::LiveStatus>() {
  return ::vNerve::bilibili::live::LiveStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto
