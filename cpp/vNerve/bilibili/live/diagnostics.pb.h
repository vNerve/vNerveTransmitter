// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/diagnostics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class BilibiliLiveSupervisorDiagnostics;
class BilibiliLiveSupervisorDiagnosticsDefaultTypeInternal;
extern BilibiliLiveSupervisorDiagnosticsDefaultTypeInternal _BilibiliLiveSupervisorDiagnostics_default_instance_;
class RoomStatus;
class RoomStatusDefaultTypeInternal;
extern RoomStatusDefaultTypeInternal _RoomStatus_default_instance_;
class RoomTask;
class RoomTaskDefaultTypeInternal;
extern RoomTaskDefaultTypeInternal _RoomTask_default_instance_;
class WorkerStatus;
class WorkerStatusDefaultTypeInternal;
extern WorkerStatusDefaultTypeInternal _WorkerStatus_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics* Arena::CreateMaybeMessage<::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics>(Arena*);
template<> ::vNerve::bilibili::live::RoomStatus* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomStatus>(Arena*);
template<> ::vNerve::bilibili::live::RoomTask* Arena::CreateMaybeMessage<::vNerve::bilibili::live::RoomTask>(Arena*);
template<> ::vNerve::bilibili::live::WorkerStatus* Arena::CreateMaybeMessage<::vNerve::bilibili::live::WorkerStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {
namespace live {

// ===================================================================

class WorkerStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.WorkerStatus) */ {
 public:
  WorkerStatus();
  virtual ~WorkerStatus();

  WorkerStatus(const WorkerStatus& from);
  WorkerStatus(WorkerStatus&& from) noexcept
    : WorkerStatus() {
    *this = ::std::move(from);
  }

  inline WorkerStatus& operator=(const WorkerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerStatus& operator=(WorkerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerStatus* internal_default_instance() {
    return reinterpret_cast<const WorkerStatus*>(
               &_WorkerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkerStatus& a, WorkerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerStatus* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerStatus* New() const final {
    return CreateMaybeMessage<WorkerStatus>(nullptr);
  }

  WorkerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerStatus& from);
  void MergeFrom(const WorkerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.WorkerStatus";
  }
  protected:
  explicit WorkerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaxRoomsFieldNumber = 2,
    kCurrentConnectionsFieldNumber = 3,
    kAllowNewTaskAfterFieldNumber = 4,
  };
  // fixed64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 max_rooms = 2;
  void clear_max_rooms();
  ::PROTOBUF_NAMESPACE_ID::int32 max_rooms() const;
  void set_max_rooms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_rooms() const;
  void _internal_set_max_rooms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_connections = 3;
  void clear_current_connections();
  ::PROTOBUF_NAMESPACE_ID::int32 current_connections() const;
  void set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_connections() const;
  void _internal_set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 allow_new_task_after = 4;
  void clear_allow_new_task_after();
  ::PROTOBUF_NAMESPACE_ID::int64 allow_new_task_after() const;
  void set_allow_new_task_after(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allow_new_task_after() const;
  void _internal_set_allow_new_task_after(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.WorkerStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_rooms_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_connections_;
  ::PROTOBUF_NAMESPACE_ID::int64 allow_new_task_after_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
};
// -------------------------------------------------------------------

class RoomStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomStatus) */ {
 public:
  RoomStatus();
  virtual ~RoomStatus();

  RoomStatus(const RoomStatus& from);
  RoomStatus(RoomStatus&& from) noexcept
    : RoomStatus() {
    *this = ::std::move(from);
  }

  inline RoomStatus& operator=(const RoomStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomStatus& operator=(RoomStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomStatus* internal_default_instance() {
    return reinterpret_cast<const RoomStatus*>(
               &_RoomStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomStatus& a, RoomStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomStatus* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomStatus* New() const final {
    return CreateMaybeMessage<RoomStatus>(nullptr);
  }

  RoomStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomStatus& from);
  void MergeFrom(const RoomStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomStatus";
  }
  protected:
  explicit RoomStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCurrentConnectionsFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_connections = 2;
  void clear_current_connections();
  ::PROTOBUF_NAMESPACE_ID::int32 current_connections() const;
  void set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_connections() const;
  void _internal_set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
};
// -------------------------------------------------------------------

class RoomTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.RoomTask) */ {
 public:
  RoomTask();
  virtual ~RoomTask();

  RoomTask(const RoomTask& from);
  RoomTask(RoomTask&& from) noexcept
    : RoomTask() {
    *this = ::std::move(from);
  }

  inline RoomTask& operator=(const RoomTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomTask& operator=(RoomTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomTask* internal_default_instance() {
    return reinterpret_cast<const RoomTask*>(
               &_RoomTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomTask& a, RoomTask& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomTask* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomTask* New() const final {
    return CreateMaybeMessage<RoomTask>(nullptr);
  }

  RoomTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomTask& from);
  void MergeFrom(const RoomTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.RoomTask";
  }
  protected:
  explicit RoomTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // fixed64 worker_id = 1;
  void clear_worker_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 worker_id() const;
  void set_worker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_worker_id() const;
  void _internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.RoomTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 worker_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
};
// -------------------------------------------------------------------

class BilibiliLiveSupervisorDiagnostics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics) */ {
 public:
  BilibiliLiveSupervisorDiagnostics();
  virtual ~BilibiliLiveSupervisorDiagnostics();

  BilibiliLiveSupervisorDiagnostics(const BilibiliLiveSupervisorDiagnostics& from);
  BilibiliLiveSupervisorDiagnostics(BilibiliLiveSupervisorDiagnostics&& from) noexcept
    : BilibiliLiveSupervisorDiagnostics() {
    *this = ::std::move(from);
  }

  inline BilibiliLiveSupervisorDiagnostics& operator=(const BilibiliLiveSupervisorDiagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BilibiliLiveSupervisorDiagnostics& operator=(BilibiliLiveSupervisorDiagnostics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BilibiliLiveSupervisorDiagnostics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BilibiliLiveSupervisorDiagnostics* internal_default_instance() {
    return reinterpret_cast<const BilibiliLiveSupervisorDiagnostics*>(
               &_BilibiliLiveSupervisorDiagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BilibiliLiveSupervisorDiagnostics& a, BilibiliLiveSupervisorDiagnostics& b) {
    a.Swap(&b);
  }
  inline void Swap(BilibiliLiveSupervisorDiagnostics* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BilibiliLiveSupervisorDiagnostics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BilibiliLiveSupervisorDiagnostics* New() const final {
    return CreateMaybeMessage<BilibiliLiveSupervisorDiagnostics>(nullptr);
  }

  BilibiliLiveSupervisorDiagnostics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BilibiliLiveSupervisorDiagnostics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BilibiliLiveSupervisorDiagnostics& from);
  void MergeFrom(const BilibiliLiveSupervisorDiagnostics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BilibiliLiveSupervisorDiagnostics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics";
  }
  protected:
  explicit BilibiliLiveSupervisorDiagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerStatusesFieldNumber = 2,
    kRoomStatusesFieldNumber = 3,
    kTasksFieldNumber = 4,
    kMaxTasksPerRoomFieldNumber = 1,
  };
  // repeated .vNerve.bilibili.live.WorkerStatus worker_statuses = 2;
  int worker_statuses_size() const;
  private:
  int _internal_worker_statuses_size() const;
  public:
  void clear_worker_statuses();
  ::vNerve::bilibili::live::WorkerStatus* mutable_worker_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::WorkerStatus >*
      mutable_worker_statuses();
  private:
  const ::vNerve::bilibili::live::WorkerStatus& _internal_worker_statuses(int index) const;
  ::vNerve::bilibili::live::WorkerStatus* _internal_add_worker_statuses();
  public:
  const ::vNerve::bilibili::live::WorkerStatus& worker_statuses(int index) const;
  ::vNerve::bilibili::live::WorkerStatus* add_worker_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::WorkerStatus >&
      worker_statuses() const;

  // repeated .vNerve.bilibili.live.RoomStatus room_statuses = 3;
  int room_statuses_size() const;
  private:
  int _internal_room_statuses_size() const;
  public:
  void clear_room_statuses();
  ::vNerve::bilibili::live::RoomStatus* mutable_room_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomStatus >*
      mutable_room_statuses();
  private:
  const ::vNerve::bilibili::live::RoomStatus& _internal_room_statuses(int index) const;
  ::vNerve::bilibili::live::RoomStatus* _internal_add_room_statuses();
  public:
  const ::vNerve::bilibili::live::RoomStatus& room_statuses(int index) const;
  ::vNerve::bilibili::live::RoomStatus* add_room_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomStatus >&
      room_statuses() const;

  // repeated .vNerve.bilibili.live.RoomTask tasks = 4;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::vNerve::bilibili::live::RoomTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomTask >*
      mutable_tasks();
  private:
  const ::vNerve::bilibili::live::RoomTask& _internal_tasks(int index) const;
  ::vNerve::bilibili::live::RoomTask* _internal_add_tasks();
  public:
  const ::vNerve::bilibili::live::RoomTask& tasks(int index) const;
  ::vNerve::bilibili::live::RoomTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomTask >&
      tasks() const;

  // int32 max_tasks_per_room = 1;
  void clear_max_tasks_per_room();
  ::PROTOBUF_NAMESPACE_ID::int32 max_tasks_per_room() const;
  void set_max_tasks_per_room(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_tasks_per_room() const;
  void _internal_set_max_tasks_per_room(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::WorkerStatus > worker_statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomStatus > room_statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomTask > tasks_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_tasks_per_room_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkerStatus

// fixed64 id = 1;
inline void WorkerStatus::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerStatus::id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WorkerStatus.id)
  return _internal_id();
}
inline void WorkerStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void WorkerStatus::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WorkerStatus.id)
}

// int32 max_rooms = 2;
inline void WorkerStatus::clear_max_rooms() {
  max_rooms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerStatus::_internal_max_rooms() const {
  return max_rooms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerStatus::max_rooms() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WorkerStatus.max_rooms)
  return _internal_max_rooms();
}
inline void WorkerStatus::_internal_set_max_rooms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_rooms_ = value;
}
inline void WorkerStatus::set_max_rooms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_rooms(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WorkerStatus.max_rooms)
}

// int32 current_connections = 3;
inline void WorkerStatus::clear_current_connections() {
  current_connections_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerStatus::_internal_current_connections() const {
  return current_connections_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerStatus::current_connections() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WorkerStatus.current_connections)
  return _internal_current_connections();
}
inline void WorkerStatus::_internal_set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_connections_ = value;
}
inline void WorkerStatus::set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_connections(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WorkerStatus.current_connections)
}

// int64 allow_new_task_after = 4;
inline void WorkerStatus::clear_allow_new_task_after() {
  allow_new_task_after_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkerStatus::_internal_allow_new_task_after() const {
  return allow_new_task_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkerStatus::allow_new_task_after() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WorkerStatus.allow_new_task_after)
  return _internal_allow_new_task_after();
}
inline void WorkerStatus::_internal_set_allow_new_task_after(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allow_new_task_after_ = value;
}
inline void WorkerStatus::set_allow_new_task_after(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_allow_new_task_after(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WorkerStatus.allow_new_task_after)
}

// -------------------------------------------------------------------

// RoomStatus

// int32 id = 1;
inline void RoomStatus::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomStatus::id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomStatus.id)
  return _internal_id();
}
inline void RoomStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RoomStatus::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomStatus.id)
}

// int32 current_connections = 2;
inline void RoomStatus::clear_current_connections() {
  current_connections_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomStatus::_internal_current_connections() const {
  return current_connections_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomStatus::current_connections() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomStatus.current_connections)
  return _internal_current_connections();
}
inline void RoomStatus::_internal_set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_connections_ = value;
}
inline void RoomStatus::set_current_connections(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_connections(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomStatus.current_connections)
}

// -------------------------------------------------------------------

// RoomTask

// fixed64 worker_id = 1;
inline void RoomTask::clear_worker_id() {
  worker_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomTask::_internal_worker_id() const {
  return worker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomTask::worker_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomTask.worker_id)
  return _internal_worker_id();
}
inline void RoomTask::_internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  worker_id_ = value;
}
inline void RoomTask::set_worker_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomTask.worker_id)
}

// int32 room_id = 2;
inline void RoomTask::clear_room_id() {
  room_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomTask::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomTask::room_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.RoomTask.room_id)
  return _internal_room_id();
}
inline void RoomTask::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_id_ = value;
}
inline void RoomTask::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.RoomTask.room_id)
}

// -------------------------------------------------------------------

// BilibiliLiveSupervisorDiagnostics

// int32 max_tasks_per_room = 1;
inline void BilibiliLiveSupervisorDiagnostics::clear_max_tasks_per_room() {
  max_tasks_per_room_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BilibiliLiveSupervisorDiagnostics::_internal_max_tasks_per_room() const {
  return max_tasks_per_room_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BilibiliLiveSupervisorDiagnostics::max_tasks_per_room() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.max_tasks_per_room)
  return _internal_max_tasks_per_room();
}
inline void BilibiliLiveSupervisorDiagnostics::_internal_set_max_tasks_per_room(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_tasks_per_room_ = value;
}
inline void BilibiliLiveSupervisorDiagnostics::set_max_tasks_per_room(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_tasks_per_room(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.max_tasks_per_room)
}

// repeated .vNerve.bilibili.live.WorkerStatus worker_statuses = 2;
inline int BilibiliLiveSupervisorDiagnostics::_internal_worker_statuses_size() const {
  return worker_statuses_.size();
}
inline int BilibiliLiveSupervisorDiagnostics::worker_statuses_size() const {
  return _internal_worker_statuses_size();
}
inline void BilibiliLiveSupervisorDiagnostics::clear_worker_statuses() {
  worker_statuses_.Clear();
}
inline ::vNerve::bilibili::live::WorkerStatus* BilibiliLiveSupervisorDiagnostics::mutable_worker_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.worker_statuses)
  return worker_statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::WorkerStatus >*
BilibiliLiveSupervisorDiagnostics::mutable_worker_statuses() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.worker_statuses)
  return &worker_statuses_;
}
inline const ::vNerve::bilibili::live::WorkerStatus& BilibiliLiveSupervisorDiagnostics::_internal_worker_statuses(int index) const {
  return worker_statuses_.Get(index);
}
inline const ::vNerve::bilibili::live::WorkerStatus& BilibiliLiveSupervisorDiagnostics::worker_statuses(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.worker_statuses)
  return _internal_worker_statuses(index);
}
inline ::vNerve::bilibili::live::WorkerStatus* BilibiliLiveSupervisorDiagnostics::_internal_add_worker_statuses() {
  return worker_statuses_.Add();
}
inline ::vNerve::bilibili::live::WorkerStatus* BilibiliLiveSupervisorDiagnostics::add_worker_statuses() {
  // @@protoc_insertion_point(field_add:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.worker_statuses)
  return _internal_add_worker_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::WorkerStatus >&
BilibiliLiveSupervisorDiagnostics::worker_statuses() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.worker_statuses)
  return worker_statuses_;
}

// repeated .vNerve.bilibili.live.RoomStatus room_statuses = 3;
inline int BilibiliLiveSupervisorDiagnostics::_internal_room_statuses_size() const {
  return room_statuses_.size();
}
inline int BilibiliLiveSupervisorDiagnostics::room_statuses_size() const {
  return _internal_room_statuses_size();
}
inline void BilibiliLiveSupervisorDiagnostics::clear_room_statuses() {
  room_statuses_.Clear();
}
inline ::vNerve::bilibili::live::RoomStatus* BilibiliLiveSupervisorDiagnostics::mutable_room_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.room_statuses)
  return room_statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomStatus >*
BilibiliLiveSupervisorDiagnostics::mutable_room_statuses() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.room_statuses)
  return &room_statuses_;
}
inline const ::vNerve::bilibili::live::RoomStatus& BilibiliLiveSupervisorDiagnostics::_internal_room_statuses(int index) const {
  return room_statuses_.Get(index);
}
inline const ::vNerve::bilibili::live::RoomStatus& BilibiliLiveSupervisorDiagnostics::room_statuses(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.room_statuses)
  return _internal_room_statuses(index);
}
inline ::vNerve::bilibili::live::RoomStatus* BilibiliLiveSupervisorDiagnostics::_internal_add_room_statuses() {
  return room_statuses_.Add();
}
inline ::vNerve::bilibili::live::RoomStatus* BilibiliLiveSupervisorDiagnostics::add_room_statuses() {
  // @@protoc_insertion_point(field_add:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.room_statuses)
  return _internal_add_room_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomStatus >&
BilibiliLiveSupervisorDiagnostics::room_statuses() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.room_statuses)
  return room_statuses_;
}

// repeated .vNerve.bilibili.live.RoomTask tasks = 4;
inline int BilibiliLiveSupervisorDiagnostics::_internal_tasks_size() const {
  return tasks_.size();
}
inline int BilibiliLiveSupervisorDiagnostics::tasks_size() const {
  return _internal_tasks_size();
}
inline void BilibiliLiveSupervisorDiagnostics::clear_tasks() {
  tasks_.Clear();
}
inline ::vNerve::bilibili::live::RoomTask* BilibiliLiveSupervisorDiagnostics::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomTask >*
BilibiliLiveSupervisorDiagnostics::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.tasks)
  return &tasks_;
}
inline const ::vNerve::bilibili::live::RoomTask& BilibiliLiveSupervisorDiagnostics::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::vNerve::bilibili::live::RoomTask& BilibiliLiveSupervisorDiagnostics::tasks(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.tasks)
  return _internal_tasks(index);
}
inline ::vNerve::bilibili::live::RoomTask* BilibiliLiveSupervisorDiagnostics::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::vNerve::bilibili::live::RoomTask* BilibiliLiveSupervisorDiagnostics::add_tasks() {
  // @@protoc_insertion_point(field_add:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::live::RoomTask >&
BilibiliLiveSupervisorDiagnostics::tasks() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace bilibili
}  // namespace vNerve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto
