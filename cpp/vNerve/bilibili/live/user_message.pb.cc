// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/user_message.proto

#include "vNerve/bilibili/live/user_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class UserMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserMessage> _instance;
  const ::vNerve::bilibili::live::DanmakuMessage* danmaku_;
  const ::vNerve::bilibili::live::GiftMessage* gift_;
  const ::vNerve::bilibili::live::SuperChatMessage* super_chat_;
  const ::vNerve::bilibili::live::NewGuardMessage* new_guard_;
  const ::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip_;
  const ::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard_;
  const ::vNerve::bilibili::live::UserBlockedMessage* user_blocked_;
  const ::vNerve::bilibili::live::UserKickedOutMessage* user_kicked_out_;
} _UserMessage_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
  bool admin_;
  bool main_vip_;
} _UserInfo_default_instance_;
class MedalInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedalInfo> _instance;
} _MedalInfo_default_instance_;
class DanmakuMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DanmakuMessage> _instance;
} _DanmakuMessage_default_instance_;
class SuperChatMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuperChatMessage> _instance;
} _SuperChatMessage_default_instance_;
class GiftMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GiftMessage> _instance;
} _GiftMessage_default_instance_;
class WelcomeVIPMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WelcomeVIPMessage> _instance;
} _WelcomeVIPMessage_default_instance_;
class WelcomeGuardMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WelcomeGuardMessage> _instance;
} _WelcomeGuardMessage_default_instance_;
class NewGuardMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewGuardMessage> _instance;
} _NewGuardMessage_default_instance_;
class UserBlockedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserBlockedMessage> _instance;
} _UserBlockedMessage_default_instance_;
class UserKickedOutMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserKickedOutMessage> _instance;
} _UserKickedOutMessage_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
static void InitDefaultsscc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_DanmakuMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::DanmakuMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::DanmakuMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_GiftMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::GiftMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::GiftMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_MedalInfo_default_instance_;
    new (ptr) ::vNerve::bilibili::live::MedalInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::MedalInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_NewGuardMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::NewGuardMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::NewGuardMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_SuperChatMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::SuperChatMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::SuperChatMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_UserBlockedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::UserBlockedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::UserBlockedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_UserInfo_default_instance_;
    new (ptr) ::vNerve::bilibili::live::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {
      &scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_UserKickedOutMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::UserKickedOutMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::UserKickedOutMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_UserMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::UserMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::UserMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {
      &scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_WelcomeGuardMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::WelcomeGuardMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::WelcomeGuardMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_WelcomeVIPMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::WelcomeVIPMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::WelcomeVIPMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserMessage, user_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, danmaku_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, gift_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, super_chat_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, new_guard_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, welcome_vip_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, welcome_guard_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, user_blocked_),
  offsetof(::vNerve::bilibili::live::UserMessageDefaultTypeInternal, user_kicked_out_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserMessage, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, user_level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, user_level_border_color_),
  offsetof(::vNerve::bilibili::live::UserInfoDefaultTypeInternal, admin_),
  offsetof(::vNerve::bilibili::live::UserInfoDefaultTypeInternal, main_vip_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, live_vip_level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, title_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, medal_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, guard_level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, phone_verified_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, regular_user_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, admin_optional_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserInfo, main_vip_optional_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, medal_name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, medal_level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, medal_color_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, streamer_uid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, streamer_name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::MedalInfo, streamer_roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::DanmakuMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::DanmakuMessage, message_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::DanmakuMessage, lottery_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, message_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, token_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, price_cny_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, price_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, lasting_time_sec_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, start_time_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatMessage, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, is_gold_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, total_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, gift_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, gift_name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, single_price_coin_raw_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::GiftMessage, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WelcomeVIPMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WelcomeVIPMessage, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WelcomeGuardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WelcomeGuardMessage, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, total_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, count_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, duration_level_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::NewGuardMessage, buy_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserBlockedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::UserKickedOutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::bilibili::live::UserMessage)},
  { 15, -1, sizeof(::vNerve::bilibili::live::UserInfo)},
  { 35, -1, sizeof(::vNerve::bilibili::live::MedalInfo)},
  { 46, -1, sizeof(::vNerve::bilibili::live::DanmakuMessage)},
  { 53, -1, sizeof(::vNerve::bilibili::live::SuperChatMessage)},
  { 66, -1, sizeof(::vNerve::bilibili::live::GiftMessage)},
  { 77, -1, sizeof(::vNerve::bilibili::live::WelcomeVIPMessage)},
  { 83, -1, sizeof(::vNerve::bilibili::live::WelcomeGuardMessage)},
  { 89, -1, sizeof(::vNerve::bilibili::live::NewGuardMessage)},
  { 99, -1, sizeof(::vNerve::bilibili::live::UserBlockedMessage)},
  { 104, -1, sizeof(::vNerve::bilibili::live::UserKickedOutMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_UserMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_MedalInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_DanmakuMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_SuperChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_GiftMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_WelcomeVIPMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_WelcomeGuardMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_NewGuardMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_UserBlockedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_UserKickedOutMessage_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'vNerve/bilibili/live/user_message.prot"
  "o\022\024vNerve.bilibili.live\"\271\004\n\013UserMessage\022"
  ",\n\004user\030\001 \001(\0132\036.vNerve.bilibili.live.Use"
  "rInfo\0227\n\007danmaku\030\002 \001(\0132$.vNerve.bilibili"
  ".live.DanmakuMessageH\000\0221\n\004gift\030\003 \001(\0132!.v"
  "Nerve.bilibili.live.GiftMessageH\000\022<\n\nsup"
  "er_chat\030\004 \001(\0132&.vNerve.bilibili.live.Sup"
  "erChatMessageH\000\022:\n\tnew_guard\030\005 \001(\0132%.vNe"
  "rve.bilibili.live.NewGuardMessageH\000\022>\n\013w"
  "elcome_vip\030\006 \001(\0132\'.vNerve.bilibili.live."
  "WelcomeVIPMessageH\000\022B\n\rwelcome_guard\030\007 \001"
  "(\0132).vNerve.bilibili.live.WelcomeGuardMe"
  "ssageH\000\022@\n\014user_blocked\030\020 \001(\0132(.vNerve.b"
  "ilibili.live.UserBlockedMessageH\000\022E\n\017use"
  "r_kicked_out\030\021 \001(\0132*.vNerve.bilibili.liv"
  "e.UserKickedOutMessageH\000B\t\n\007payload\"\232\003\n\010"
  "UserInfo\022\013\n\003uid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\022\n\na"
  "vatar_url\030\003 \001(\t\022\022\n\nuser_level\030\004 \001(\005\022\037\n\027u"
  "ser_level_border_color\030\005 \001(\007\022\017\n\005admin\030\006 "
  "\001(\010H\000\022\022\n\010main_vip\030\007 \001(\010H\001\022:\n\016live_vip_le"
  "vel\030\010 \001(\0162\".vNerve.bilibili.live.LiveVip"
  "Level\022\r\n\005title\030\t \001(\t\022.\n\005medal\030\n \001(\0132\037.vN"
  "erve.bilibili.live.MedalInfo\0225\n\013guard_le"
  "vel\030\013 \001(\0162 .vNerve.bilibili.live.GuardLe"
  "vel\022\026\n\016phone_verified\030\014 \001(\010\022\024\n\014regular_u"
  "ser\030\r \001(\010B\020\n\016admin_optionalB\023\n\021main_vip_"
  "optional\"\217\001\n\tMedalInfo\022\022\n\nmedal_name\030\001 \001"
  "(\t\022\023\n\013medal_level\030\002 \001(\r\022\023\n\013medal_color\030\003"
  " \001(\007\022\024\n\014streamer_uid\030\004 \001(\004\022\025\n\rstreamer_n"
  "ame\030\005 \001(\t\022\027\n\017streamer_roomid\030\006 \001(\r\"a\n\016Da"
  "nmakuMessage\022\017\n\007message\030\001 \001(\t\022>\n\014lottery"
  "_type\030\002 \001(\0162(.vNerve.bilibili.live.Lotte"
  "ryDanmakuType\"\245\001\n\020SuperChatMessage\022\017\n\007me"
  "ssage\030\001 \001(\t\022\n\n\002id\030\003 \001(\r\022\r\n\005token\030\004 \001(\t\022\021"
  "\n\tprice_cny\030\005 \001(\r\022\022\n\nprice_coin\030\006 \001(\r\022\030\n"
  "\020lasting_time_sec\030\007 \001(\r\022\022\n\nstart_time\030\010 "
  "\001(\004\022\020\n\010end_time\030\t \001(\004\"\204\001\n\013GiftMessage\022\017\n"
  "\007is_gold\030\001 \001(\010\022\022\n\ntotal_coin\030\002 \001(\r\022\017\n\007gi"
  "ft_id\030\003 \001(\r\022\021\n\tgift_name\030\004 \001(\t\022\035\n\025single"
  "_price_coin_raw\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\"F\n\021"
  "WelcomeVIPMessage\0221\n\005level\030\001 \001(\0162\".vNerv"
  "e.bilibili.live.LiveVipLevel\"F\n\023WelcomeG"
  "uardMessage\022/\n\005level\030\001 \001(\0162 .vNerve.bili"
  "bili.live.GuardLevel\"\335\001\n\017NewGuardMessage"
  "\022/\n\005level\030\001 \001(\0162 .vNerve.bilibili.live.G"
  "uardLevel\022\022\n\ntotal_coin\030\002 \001(\r\022\r\n\005count\030\003"
  " \001(\r\022@\n\016duration_level\030\004 \001(\0162(.vNerve.bi"
  "libili.live.GuardDurationLevel\0224\n\010buy_ty"
  "pe\030\005 \001(\0162\".vNerve.bilibili.live.GuardBuy"
  "Type\"\024\n\022UserBlockedMessage\"\026\n\024UserKicked"
  "OutMessage*;\n\014LiveVipLevel\022\n\n\006NO_VIP\020\000\022\017"
  "\n\013MONTHLY_VIP\020\001\022\016\n\nYEARLY_VIP\020\002*<\n\022Lotte"
  "ryDanmakuType\022\016\n\nNO_LOTTERY\020\000\022\t\n\005STORM\020\001"
  "\022\013\n\007LOTTERY\020\002*>\n\nGuardLevel\022\014\n\010NO_GUARD\020"
  "\000\022\n\n\006LEVEL1\020\001\022\n\n\006LEVEL2\020\002\022\n\n\006LEVEL3\020\003*/\n"
  "\014GuardBuyType\022\013\n\007NO_TYPE\020\000\022\007\n\003BUY\020\001\022\t\n\005R"
  "ENEW\020\002*J\n\022GuardDurationLevel\022\017\n\013NO_DURAT"
  "ION\020\000\022\021\n\rMONTHLY_GUARD\020\001\022\020\n\014WEEKLY_GUARD"
  "\020\002B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_sccs[11] = {
  &scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
  &scc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_once;
static bool descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto = {
  &descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_initialized, descriptor_table_protodef_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto, "vNerve/bilibili/live/user_message.proto", 2335,
  &descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_once, descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_sccs, descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto::offsets,
  file_level_metadata_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto, 11, file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto, file_level_service_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto), true);
namespace vNerve {
namespace bilibili {
namespace live {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveVipLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[0];
}
bool LiveVipLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LotteryDanmakuType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[1];
}
bool LotteryDanmakuType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[2];
}
bool GuardLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardBuyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[3];
}
bool GuardBuyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardDurationLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto[4];
}
bool GuardDurationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserMessage::InitAsDefaultInstance() {
  ::vNerve::bilibili::live::_UserMessage_default_instance_._instance.get_mutable()->user_ = const_cast< ::vNerve::bilibili::live::UserInfo*>(
      ::vNerve::bilibili::live::UserInfo::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.danmaku_ = const_cast< ::vNerve::bilibili::live::DanmakuMessage*>(
      ::vNerve::bilibili::live::DanmakuMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.gift_ = const_cast< ::vNerve::bilibili::live::GiftMessage*>(
      ::vNerve::bilibili::live::GiftMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.super_chat_ = const_cast< ::vNerve::bilibili::live::SuperChatMessage*>(
      ::vNerve::bilibili::live::SuperChatMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.new_guard_ = const_cast< ::vNerve::bilibili::live::NewGuardMessage*>(
      ::vNerve::bilibili::live::NewGuardMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.welcome_vip_ = const_cast< ::vNerve::bilibili::live::WelcomeVIPMessage*>(
      ::vNerve::bilibili::live::WelcomeVIPMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.welcome_guard_ = const_cast< ::vNerve::bilibili::live::WelcomeGuardMessage*>(
      ::vNerve::bilibili::live::WelcomeGuardMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.user_blocked_ = const_cast< ::vNerve::bilibili::live::UserBlockedMessage*>(
      ::vNerve::bilibili::live::UserBlockedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_UserMessage_default_instance_.user_kicked_out_ = const_cast< ::vNerve::bilibili::live::UserKickedOutMessage*>(
      ::vNerve::bilibili::live::UserKickedOutMessage::internal_default_instance());
}
class UserMessage::_Internal {
 public:
  static const ::vNerve::bilibili::live::UserInfo& user(const UserMessage* msg);
  static const ::vNerve::bilibili::live::DanmakuMessage& danmaku(const UserMessage* msg);
  static const ::vNerve::bilibili::live::GiftMessage& gift(const UserMessage* msg);
  static const ::vNerve::bilibili::live::SuperChatMessage& super_chat(const UserMessage* msg);
  static const ::vNerve::bilibili::live::NewGuardMessage& new_guard(const UserMessage* msg);
  static const ::vNerve::bilibili::live::WelcomeVIPMessage& welcome_vip(const UserMessage* msg);
  static const ::vNerve::bilibili::live::WelcomeGuardMessage& welcome_guard(const UserMessage* msg);
  static const ::vNerve::bilibili::live::UserBlockedMessage& user_blocked(const UserMessage* msg);
  static const ::vNerve::bilibili::live::UserKickedOutMessage& user_kicked_out(const UserMessage* msg);
};

const ::vNerve::bilibili::live::UserInfo&
UserMessage::_Internal::user(const UserMessage* msg) {
  return *msg->user_;
}
const ::vNerve::bilibili::live::DanmakuMessage&
UserMessage::_Internal::danmaku(const UserMessage* msg) {
  return *msg->payload_.danmaku_;
}
const ::vNerve::bilibili::live::GiftMessage&
UserMessage::_Internal::gift(const UserMessage* msg) {
  return *msg->payload_.gift_;
}
const ::vNerve::bilibili::live::SuperChatMessage&
UserMessage::_Internal::super_chat(const UserMessage* msg) {
  return *msg->payload_.super_chat_;
}
const ::vNerve::bilibili::live::NewGuardMessage&
UserMessage::_Internal::new_guard(const UserMessage* msg) {
  return *msg->payload_.new_guard_;
}
const ::vNerve::bilibili::live::WelcomeVIPMessage&
UserMessage::_Internal::welcome_vip(const UserMessage* msg) {
  return *msg->payload_.welcome_vip_;
}
const ::vNerve::bilibili::live::WelcomeGuardMessage&
UserMessage::_Internal::welcome_guard(const UserMessage* msg) {
  return *msg->payload_.welcome_guard_;
}
const ::vNerve::bilibili::live::UserBlockedMessage&
UserMessage::_Internal::user_blocked(const UserMessage* msg) {
  return *msg->payload_.user_blocked_;
}
const ::vNerve::bilibili::live::UserKickedOutMessage&
UserMessage::_Internal::user_kicked_out(const UserMessage* msg) {
  return *msg->payload_.user_kicked_out_;
}
void UserMessage::unsafe_arena_set_allocated_user(
    ::vNerve::bilibili::live::UserInfo* user) {
  if (GetArenaNoVirtual() == nullptr) {
    delete user_;
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.user)
}
void UserMessage::set_allocated_danmaku(::vNerve::bilibili::live::DanmakuMessage* danmaku) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (danmaku) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(danmaku);
    if (message_arena != submessage_arena) {
      danmaku = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, danmaku, submessage_arena);
    }
    set_has_danmaku();
    payload_.danmaku_ = danmaku;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.danmaku)
}
void UserMessage::set_allocated_gift(::vNerve::bilibili::live::GiftMessage* gift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (gift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gift);
    if (message_arena != submessage_arena) {
      gift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gift, submessage_arena);
    }
    set_has_gift();
    payload_.gift_ = gift;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.gift)
}
void UserMessage::set_allocated_super_chat(::vNerve::bilibili::live::SuperChatMessage* super_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (super_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super_chat);
    if (message_arena != submessage_arena) {
      super_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super_chat, submessage_arena);
    }
    set_has_super_chat();
    payload_.super_chat_ = super_chat;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.super_chat)
}
void UserMessage::set_allocated_new_guard(::vNerve::bilibili::live::NewGuardMessage* new_guard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (new_guard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_guard);
    if (message_arena != submessage_arena) {
      new_guard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_guard, submessage_arena);
    }
    set_has_new_guard();
    payload_.new_guard_ = new_guard;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.new_guard)
}
void UserMessage::set_allocated_welcome_vip(::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (welcome_vip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome_vip);
    if (message_arena != submessage_arena) {
      welcome_vip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome_vip, submessage_arena);
    }
    set_has_welcome_vip();
    payload_.welcome_vip_ = welcome_vip;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.welcome_vip)
}
void UserMessage::set_allocated_welcome_guard(::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (welcome_guard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome_guard);
    if (message_arena != submessage_arena) {
      welcome_guard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome_guard, submessage_arena);
    }
    set_has_welcome_guard();
    payload_.welcome_guard_ = welcome_guard;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.welcome_guard)
}
void UserMessage::set_allocated_user_blocked(::vNerve::bilibili::live::UserBlockedMessage* user_blocked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (user_blocked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_blocked);
    if (message_arena != submessage_arena) {
      user_blocked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_blocked, submessage_arena);
    }
    set_has_user_blocked();
    payload_.user_blocked_ = user_blocked;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.user_blocked)
}
void UserMessage::set_allocated_user_kicked_out(::vNerve::bilibili::live::UserKickedOutMessage* user_kicked_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (user_kicked_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_kicked_out);
    if (message_arena != submessage_arena) {
      user_kicked_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_kicked_out, submessage_arena);
    }
    set_has_user_kicked_out();
    payload_.user_kicked_out_ = user_kicked_out;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.user_kicked_out)
}
UserMessage::UserMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.UserMessage)
}
UserMessage::UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.UserMessage)
}
UserMessage::UserMessage(const UserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::vNerve::bilibili::live::UserInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kDanmaku: {
      _internal_mutable_danmaku()->::vNerve::bilibili::live::DanmakuMessage::MergeFrom(from._internal_danmaku());
      break;
    }
    case kGift: {
      _internal_mutable_gift()->::vNerve::bilibili::live::GiftMessage::MergeFrom(from._internal_gift());
      break;
    }
    case kSuperChat: {
      _internal_mutable_super_chat()->::vNerve::bilibili::live::SuperChatMessage::MergeFrom(from._internal_super_chat());
      break;
    }
    case kNewGuard: {
      _internal_mutable_new_guard()->::vNerve::bilibili::live::NewGuardMessage::MergeFrom(from._internal_new_guard());
      break;
    }
    case kWelcomeVip: {
      _internal_mutable_welcome_vip()->::vNerve::bilibili::live::WelcomeVIPMessage::MergeFrom(from._internal_welcome_vip());
      break;
    }
    case kWelcomeGuard: {
      _internal_mutable_welcome_guard()->::vNerve::bilibili::live::WelcomeGuardMessage::MergeFrom(from._internal_welcome_guard());
      break;
    }
    case kUserBlocked: {
      _internal_mutable_user_blocked()->::vNerve::bilibili::live::UserBlockedMessage::MergeFrom(from._internal_user_blocked());
      break;
    }
    case kUserKickedOut: {
      _internal_mutable_user_kicked_out()->::vNerve::bilibili::live::UserKickedOutMessage::MergeFrom(from._internal_user_kicked_out());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.UserMessage)
}

void UserMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  user_ = nullptr;
  clear_has_payload();
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (has_payload()) {
    clear_payload();
  }
}

void UserMessage::ArenaDtor(void* object) {
  UserMessage* _this = reinterpret_cast< UserMessage* >(object);
  (void)_this;
}
void UserMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserMessage& UserMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void UserMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.live.UserMessage)
  switch (payload_case()) {
    case kDanmaku: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.danmaku_;
      }
      break;
    }
    case kGift: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.gift_;
      }
      break;
    }
    case kSuperChat: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.super_chat_;
      }
      break;
    }
    case kNewGuard: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.new_guard_;
      }
      break;
    }
    case kWelcomeVip: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.welcome_vip_;
      }
      break;
    }
    case kWelcomeGuard: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.welcome_guard_;
      }
      break;
    }
    case kUserBlocked: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.user_blocked_;
      }
      break;
    }
    case kUserKickedOut: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.user_kicked_out_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* UserMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.UserInfo user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.DanmakuMessage danmaku = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_danmaku(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.GiftMessage gift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gift(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.SuperChatMessage super_chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.NewGuardMessage new_guard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_guard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.WelcomeVIPMessage welcome_vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_welcome_vip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.WelcomeGuardMessage welcome_guard = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_welcome_guard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.UserBlockedMessage user_blocked = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_blocked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.UserKickedOutMessage user_kicked_out = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_kicked_out(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.UserInfo user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .vNerve.bilibili.live.DanmakuMessage danmaku = 2;
  if (_internal_has_danmaku()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::danmaku(this), target, stream);
  }

  // .vNerve.bilibili.live.GiftMessage gift = 3;
  if (_internal_has_gift()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gift(this), target, stream);
  }

  // .vNerve.bilibili.live.SuperChatMessage super_chat = 4;
  if (_internal_has_super_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super_chat(this), target, stream);
  }

  // .vNerve.bilibili.live.NewGuardMessage new_guard = 5;
  if (_internal_has_new_guard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_guard(this), target, stream);
  }

  // .vNerve.bilibili.live.WelcomeVIPMessage welcome_vip = 6;
  if (_internal_has_welcome_vip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::welcome_vip(this), target, stream);
  }

  // .vNerve.bilibili.live.WelcomeGuardMessage welcome_guard = 7;
  if (_internal_has_welcome_guard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::welcome_guard(this), target, stream);
  }

  // .vNerve.bilibili.live.UserBlockedMessage user_blocked = 16;
  if (_internal_has_user_blocked()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::user_blocked(this), target, stream);
  }

  // .vNerve.bilibili.live.UserKickedOutMessage user_kicked_out = 17;
  if (_internal_has_user_kicked_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::user_kicked_out(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.UserMessage)
  return target;
}

size_t UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.UserMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vNerve.bilibili.live.UserInfo user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  switch (payload_case()) {
    // .vNerve.bilibili.live.DanmakuMessage danmaku = 2;
    case kDanmaku: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.danmaku_);
      break;
    }
    // .vNerve.bilibili.live.GiftMessage gift = 3;
    case kGift: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gift_);
      break;
    }
    // .vNerve.bilibili.live.SuperChatMessage super_chat = 4;
    case kSuperChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.super_chat_);
      break;
    }
    // .vNerve.bilibili.live.NewGuardMessage new_guard = 5;
    case kNewGuard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.new_guard_);
      break;
    }
    // .vNerve.bilibili.live.WelcomeVIPMessage welcome_vip = 6;
    case kWelcomeVip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.welcome_vip_);
      break;
    }
    // .vNerve.bilibili.live.WelcomeGuardMessage welcome_guard = 7;
    case kWelcomeGuard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.welcome_guard_);
      break;
    }
    // .vNerve.bilibili.live.UserBlockedMessage user_blocked = 16;
    case kUserBlocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_blocked_);
      break;
    }
    // .vNerve.bilibili.live.UserKickedOutMessage user_kicked_out = 17;
    case kUserKickedOut: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_kicked_out_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.UserMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.UserMessage)
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::vNerve::bilibili::live::UserInfo::MergeFrom(from._internal_user());
  }
  switch (from.payload_case()) {
    case kDanmaku: {
      _internal_mutable_danmaku()->::vNerve::bilibili::live::DanmakuMessage::MergeFrom(from._internal_danmaku());
      break;
    }
    case kGift: {
      _internal_mutable_gift()->::vNerve::bilibili::live::GiftMessage::MergeFrom(from._internal_gift());
      break;
    }
    case kSuperChat: {
      _internal_mutable_super_chat()->::vNerve::bilibili::live::SuperChatMessage::MergeFrom(from._internal_super_chat());
      break;
    }
    case kNewGuard: {
      _internal_mutable_new_guard()->::vNerve::bilibili::live::NewGuardMessage::MergeFrom(from._internal_new_guard());
      break;
    }
    case kWelcomeVip: {
      _internal_mutable_welcome_vip()->::vNerve::bilibili::live::WelcomeVIPMessage::MergeFrom(from._internal_welcome_vip());
      break;
    }
    case kWelcomeGuard: {
      _internal_mutable_welcome_guard()->::vNerve::bilibili::live::WelcomeGuardMessage::MergeFrom(from._internal_welcome_guard());
      break;
    }
    case kUserBlocked: {
      _internal_mutable_user_blocked()->::vNerve::bilibili::live::UserBlockedMessage::MergeFrom(from._internal_user_blocked());
      break;
    }
    case kUserKickedOut: {
      _internal_mutable_user_kicked_out()->::vNerve::bilibili::live::UserKickedOutMessage::MergeFrom(from._internal_user_kicked_out());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void UserMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {
  return true;
}

void UserMessage::InternalSwap(UserMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_, other->user_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
  ::vNerve::bilibili::live::_UserInfo_default_instance_.admin_ = false;
  ::vNerve::bilibili::live::_UserInfo_default_instance_.main_vip_ = false;
  ::vNerve::bilibili::live::_UserInfo_default_instance_._instance.get_mutable()->medal_ = const_cast< ::vNerve::bilibili::live::MedalInfo*>(
      ::vNerve::bilibili::live::MedalInfo::internal_default_instance());
}
class UserInfo::_Internal {
 public:
  static const ::vNerve::bilibili::live::MedalInfo& medal(const UserInfo* msg);
};

const ::vNerve::bilibili::live::MedalInfo&
UserInfo::_Internal::medal(const UserInfo* msg) {
  return *msg->medal_;
}
void UserInfo::unsafe_arena_set_allocated_medal(
    ::vNerve::bilibili::live::MedalInfo* medal) {
  if (GetArenaNoVirtual() == nullptr) {
    delete medal_;
  }
  medal_ = medal;
  if (medal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserInfo.medal)
}
UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.UserInfo)
}
UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
      GetArenaNoVirtual());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_medal()) {
    medal_ = new ::vNerve::bilibili::live::MedalInfo(*from.medal_);
  } else {
    medal_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&regular_user_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(regular_user_));
  clear_has_admin_optional();
  switch (from.admin_optional_case()) {
    case kAdmin: {
      _internal_set_admin(from._internal_admin());
      break;
    }
    case ADMIN_OPTIONAL_NOT_SET: {
      break;
    }
  }
  clear_has_main_vip_optional();
  switch (from.main_vip_optional_case()) {
    case kMainVip: {
      _internal_set_main_vip(from._internal_main_vip());
      break;
    }
    case MAIN_VIP_OPTIONAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&medal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regular_user_) -
      reinterpret_cast<char*>(&medal_)) + sizeof(regular_user_));
  clear_has_admin_optional();
  clear_has_main_vip_optional();
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete medal_;
  if (has_admin_optional()) {
    clear_admin_optional();
  }
  if (has_main_vip_optional()) {
    clear_main_vip_optional();
  }
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::clear_admin_optional() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.live.UserInfo)
  switch (admin_optional_case()) {
    case kAdmin: {
      // No need to clear
      break;
    }
    case ADMIN_OPTIONAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADMIN_OPTIONAL_NOT_SET;
}

void UserInfo::clear_main_vip_optional() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.live.UserInfo)
  switch (main_vip_optional_case()) {
    case kMainVip: {
      // No need to clear
      break;
    }
    case MAIN_VIP_OPTIONAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MAIN_VIP_OPTIONAL_NOT_SET;
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && medal_ != nullptr) {
    delete medal_;
  }
  medal_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regular_user_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(regular_user_));
  clear_admin_optional();
  clear_main_vip_optional();
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.UserInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.UserInfo.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 user_level_border_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          user_level_border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // bool admin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_admin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool main_vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_main_vip(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.LiveVipLevel live_vip_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_live_vip_level(static_cast<::vNerve::bilibili::live::LiveVipLevel>(val));
        } else goto handle_unusual;
        continue;
      // string title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.UserInfo.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.MedalInfo medal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_medal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.GuardLevel guard_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_guard_level(static_cast<::vNerve::bilibili::live::GuardLevel>(val));
        } else goto handle_unusual;
        continue;
      // bool phone_verified = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool regular_user = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          regular_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.UserInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.UserInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatar_url(), target);
  }

  // int32 user_level = 4;
  if (this->user_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_user_level(), target);
  }

  // fixed32 user_level_border_color = 5;
  if (this->user_level_border_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_user_level_border_color(), target);
  }

  // bool admin = 6;
  if (_internal_has_admin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_admin(), target);
  }

  // bool main_vip = 7;
  if (_internal_has_main_vip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_main_vip(), target);
  }

  // .vNerve.bilibili.live.LiveVipLevel live_vip_level = 8;
  if (this->live_vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_live_vip_level(), target);
  }

  // string title = 9;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.UserInfo.title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  // .vNerve.bilibili.live.MedalInfo medal = 10;
  if (this->has_medal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::medal(this), target, stream);
  }

  // .vNerve.bilibili.live.GuardLevel guard_level = 11;
  if (this->guard_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_guard_level(), target);
  }

  // bool phone_verified = 12;
  if (this->phone_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_phone_verified(), target);
  }

  // bool regular_user = 13;
  if (this->regular_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_regular_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string title = 9;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .vNerve.bilibili.live.MedalInfo medal = 10;
  if (this->has_medal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *medal_);
  }

  // uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  // int32 user_level = 4;
  if (this->user_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_level());
  }

  // fixed32 user_level_border_color = 5;
  if (this->user_level_border_color() != 0) {
    total_size += 1 + 4;
  }

  // .vNerve.bilibili.live.LiveVipLevel live_vip_level = 8;
  if (this->live_vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_live_vip_level());
  }

  // .vNerve.bilibili.live.GuardLevel guard_level = 11;
  if (this->guard_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_guard_level());
  }

  // bool phone_verified = 12;
  if (this->phone_verified() != 0) {
    total_size += 1 + 1;
  }

  // bool regular_user = 13;
  if (this->regular_user() != 0) {
    total_size += 1 + 1;
  }

  switch (admin_optional_case()) {
    // bool admin = 6;
    case kAdmin: {
      total_size += 1 + 1;
      break;
    }
    case ADMIN_OPTIONAL_NOT_SET: {
      break;
    }
  }
  switch (main_vip_optional_case()) {
    // bool main_vip = 7;
    case kMainVip: {
      total_size += 1 + 1;
      break;
    }
    case MAIN_VIP_OPTIONAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.has_medal()) {
    _internal_mutable_medal()->::vNerve::bilibili::live::MedalInfo::MergeFrom(from._internal_medal());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.user_level() != 0) {
    _internal_set_user_level(from._internal_user_level());
  }
  if (from.user_level_border_color() != 0) {
    _internal_set_user_level_border_color(from._internal_user_level_border_color());
  }
  if (from.live_vip_level() != 0) {
    _internal_set_live_vip_level(from._internal_live_vip_level());
  }
  if (from.guard_level() != 0) {
    _internal_set_guard_level(from._internal_guard_level());
  }
  if (from.phone_verified() != 0) {
    _internal_set_phone_verified(from._internal_phone_verified());
  }
  if (from.regular_user() != 0) {
    _internal_set_regular_user(from._internal_regular_user());
  }
  switch (from.admin_optional_case()) {
    case kAdmin: {
      _internal_set_admin(from._internal_admin());
      break;
    }
    case ADMIN_OPTIONAL_NOT_SET: {
      break;
    }
  }
  switch (from.main_vip_optional_case()) {
    case kMainVip: {
      _internal_set_main_vip(from._internal_main_vip());
      break;
    }
    case MAIN_VIP_OPTIONAL_NOT_SET: {
      break;
    }
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(medal_, other->medal_);
  swap(uid_, other->uid_);
  swap(user_level_, other->user_level_);
  swap(user_level_border_color_, other->user_level_border_color_);
  swap(live_vip_level_, other->live_vip_level_);
  swap(guard_level_, other->guard_level_);
  swap(phone_verified_, other->phone_verified_);
  swap(regular_user_, other->regular_user_);
  swap(admin_optional_, other->admin_optional_);
  swap(main_vip_optional_, other->main_vip_optional_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedalInfo::InitAsDefaultInstance() {
}
class MedalInfo::_Internal {
 public:
};

MedalInfo::MedalInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.MedalInfo)
}
MedalInfo::MedalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.MedalInfo)
}
MedalInfo::MedalInfo(const MedalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  medal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_medal_name().empty()) {
    medal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_medal_name(),
      GetArenaNoVirtual());
  }
  streamer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamer_name().empty()) {
    streamer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_streamer_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&medal_level_, &from.medal_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&streamer_roomid_) -
    reinterpret_cast<char*>(&medal_level_)) + sizeof(streamer_roomid_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.MedalInfo)
}

void MedalInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  medal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&medal_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streamer_roomid_) -
      reinterpret_cast<char*>(&medal_level_)) + sizeof(streamer_roomid_));
}

MedalInfo::~MedalInfo() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.MedalInfo)
  SharedDtor();
}

void MedalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  medal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MedalInfo::ArenaDtor(void* object) {
  MedalInfo* _this = reinterpret_cast< MedalInfo* >(object);
  (void)_this;
}
void MedalInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MedalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedalInfo& MedalInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedalInfo_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void MedalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.MedalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  medal_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  streamer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&medal_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streamer_roomid_) -
      reinterpret_cast<char*>(&medal_level_)) + sizeof(streamer_roomid_));
  _internal_metadata_.Clear();
}

const char* MedalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string medal_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_medal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.MedalInfo.medal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 medal_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          medal_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 medal_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          medal_color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // uint64 streamer_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          streamer_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string streamer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_streamer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.MedalInfo.streamer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 streamer_roomid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          streamer_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedalInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.MedalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string medal_name = 1;
  if (this->medal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_medal_name().data(), static_cast<int>(this->_internal_medal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.MedalInfo.medal_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_medal_name(), target);
  }

  // uint32 medal_level = 2;
  if (this->medal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_medal_level(), target);
  }

  // fixed32 medal_color = 3;
  if (this->medal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_medal_color(), target);
  }

  // uint64 streamer_uid = 4;
  if (this->streamer_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_streamer_uid(), target);
  }

  // string streamer_name = 5;
  if (this->streamer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamer_name().data(), static_cast<int>(this->_internal_streamer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.MedalInfo.streamer_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_streamer_name(), target);
  }

  // uint32 streamer_roomid = 6;
  if (this->streamer_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_streamer_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.MedalInfo)
  return target;
}

size_t MedalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.MedalInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string medal_name = 1;
  if (this->medal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_medal_name());
  }

  // string streamer_name = 5;
  if (this->streamer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamer_name());
  }

  // uint32 medal_level = 2;
  if (this->medal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_medal_level());
  }

  // fixed32 medal_color = 3;
  if (this->medal_color() != 0) {
    total_size += 1 + 4;
  }

  // uint64 streamer_uid = 4;
  if (this->streamer_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_streamer_uid());
  }

  // uint32 streamer_roomid = 6;
  if (this->streamer_roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_streamer_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedalInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.MedalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MedalInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedalInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.MedalInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.MedalInfo)
    MergeFrom(*source);
  }
}

void MedalInfo::MergeFrom(const MedalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.MedalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.medal_name().size() > 0) {
    _internal_set_medal_name(from._internal_medal_name());
  }
  if (from.streamer_name().size() > 0) {
    _internal_set_streamer_name(from._internal_streamer_name());
  }
  if (from.medal_level() != 0) {
    _internal_set_medal_level(from._internal_medal_level());
  }
  if (from.medal_color() != 0) {
    _internal_set_medal_color(from._internal_medal_color());
  }
  if (from.streamer_uid() != 0) {
    _internal_set_streamer_uid(from._internal_streamer_uid());
  }
  if (from.streamer_roomid() != 0) {
    _internal_set_streamer_roomid(from._internal_streamer_roomid());
  }
}

void MedalInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.MedalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedalInfo::CopyFrom(const MedalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.MedalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedalInfo::IsInitialized() const {
  return true;
}

void MedalInfo::InternalSwap(MedalInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  medal_name_.Swap(&other->medal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  streamer_name_.Swap(&other->streamer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(medal_level_, other->medal_level_);
  swap(medal_color_, other->medal_color_);
  swap(streamer_uid_, other->streamer_uid_);
  swap(streamer_roomid_, other->streamer_roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedalInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DanmakuMessage::InitAsDefaultInstance() {
}
class DanmakuMessage::_Internal {
 public:
};

DanmakuMessage::DanmakuMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.DanmakuMessage)
}
DanmakuMessage::DanmakuMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.DanmakuMessage)
}
DanmakuMessage::DanmakuMessage(const DanmakuMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArenaNoVirtual());
  }
  lottery_type_ = from.lottery_type_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.DanmakuMessage)
}

void DanmakuMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lottery_type_ = 0;
}

DanmakuMessage::~DanmakuMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.DanmakuMessage)
  SharedDtor();
}

void DanmakuMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DanmakuMessage::ArenaDtor(void* object) {
  DanmakuMessage* _this = reinterpret_cast< DanmakuMessage* >(object);
  (void)_this;
}
void DanmakuMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DanmakuMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DanmakuMessage& DanmakuMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DanmakuMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DanmakuMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.DanmakuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lottery_type_ = 0;
  _internal_metadata_.Clear();
}

const char* DanmakuMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.DanmakuMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.LotteryDanmakuType lottery_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_lottery_type(static_cast<::vNerve::bilibili::live::LotteryDanmakuType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DanmakuMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.DanmakuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.DanmakuMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .vNerve.bilibili.live.LotteryDanmakuType lottery_type = 2;
  if (this->lottery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lottery_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.DanmakuMessage)
  return target;
}

size_t DanmakuMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.DanmakuMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .vNerve.bilibili.live.LotteryDanmakuType lottery_type = 2;
  if (this->lottery_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lottery_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DanmakuMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.DanmakuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DanmakuMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DanmakuMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.DanmakuMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.DanmakuMessage)
    MergeFrom(*source);
  }
}

void DanmakuMessage::MergeFrom(const DanmakuMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.DanmakuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.lottery_type() != 0) {
    _internal_set_lottery_type(from._internal_lottery_type());
  }
}

void DanmakuMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.DanmakuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanmakuMessage::CopyFrom(const DanmakuMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.DanmakuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmakuMessage::IsInitialized() const {
  return true;
}

void DanmakuMessage::InternalSwap(DanmakuMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lottery_type_, other->lottery_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmakuMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuperChatMessage::InitAsDefaultInstance() {
}
class SuperChatMessage::_Internal {
 public:
};

SuperChatMessage::SuperChatMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.SuperChatMessage)
}
SuperChatMessage::SuperChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.SuperChatMessage)
}
SuperChatMessage::SuperChatMessage(const SuperChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArenaNoVirtual());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.SuperChatMessage)
}

void SuperChatMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(end_time_));
}

SuperChatMessage::~SuperChatMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.SuperChatMessage)
  SharedDtor();
}

void SuperChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SuperChatMessage::ArenaDtor(void* object) {
  SuperChatMessage* _this = reinterpret_cast< SuperChatMessage* >(object);
  (void)_this;
}
void SuperChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuperChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuperChatMessage& SuperChatMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuperChatMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void SuperChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.SuperChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* SuperChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.SuperChatMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.SuperChatMessage.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 price_cny = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_cny_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 price_coin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lasting_time_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lasting_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuperChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.SuperChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.SuperChatMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.SuperChatMessage.token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_token(), target);
  }

  // uint32 price_cny = 5;
  if (this->price_cny() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_price_cny(), target);
  }

  // uint32 price_coin = 6;
  if (this->price_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_price_coin(), target);
  }

  // uint32 lasting_time_sec = 7;
  if (this->lasting_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lasting_time_sec(), target);
  }

  // uint64 start_time = 8;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_start_time(), target);
  }

  // uint64 end_time = 9;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.SuperChatMessage)
  return target;
}

size_t SuperChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.SuperChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 price_cny = 5;
  if (this->price_cny() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_price_cny());
  }

  // uint32 price_coin = 6;
  if (this->price_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_price_coin());
  }

  // uint32 lasting_time_sec = 7;
  if (this->lasting_time_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lasting_time_sec());
  }

  // uint64 start_time = 8;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 end_time = 9;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuperChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.SuperChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SuperChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuperChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.SuperChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.SuperChatMessage)
    MergeFrom(*source);
  }
}

void SuperChatMessage::MergeFrom(const SuperChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.SuperChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.price_cny() != 0) {
    _internal_set_price_cny(from._internal_price_cny());
  }
  if (from.price_coin() != 0) {
    _internal_set_price_coin(from._internal_price_coin());
  }
  if (from.lasting_time_sec() != 0) {
    _internal_set_lasting_time_sec(from._internal_lasting_time_sec());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void SuperChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.SuperChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperChatMessage::CopyFrom(const SuperChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.SuperChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperChatMessage::IsInitialized() const {
  return true;
}

void SuperChatMessage::InternalSwap(SuperChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(price_cny_, other->price_cny_);
  swap(price_coin_, other->price_coin_);
  swap(lasting_time_sec_, other->lasting_time_sec_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuperChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GiftMessage::InitAsDefaultInstance() {
}
class GiftMessage::_Internal {
 public:
};

GiftMessage::GiftMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.GiftMessage)
}
GiftMessage::GiftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.GiftMessage)
}
GiftMessage::GiftMessage(const GiftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gift_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gift_name().empty()) {
    gift_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gift_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&is_gold_, &from.is_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&is_gold_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.GiftMessage)
}

void GiftMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  gift_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&is_gold_)) + sizeof(count_));
}

GiftMessage::~GiftMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.GiftMessage)
  SharedDtor();
}

void GiftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  gift_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GiftMessage::ArenaDtor(void* object) {
  GiftMessage* _this = reinterpret_cast< GiftMessage* >(object);
  (void)_this;
}
void GiftMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GiftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GiftMessage& GiftMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GiftMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void GiftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.GiftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gift_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&is_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&is_gold_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* GiftMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gift_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gift_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gift_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_gift_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.GiftMessage.gift_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 single_price_coin_raw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          single_price_coin_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GiftMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.GiftMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_gold = 1;
  if (this->is_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_gold(), target);
  }

  // uint32 total_coin = 2;
  if (this->total_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_coin(), target);
  }

  // uint32 gift_id = 3;
  if (this->gift_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gift_id(), target);
  }

  // string gift_name = 4;
  if (this->gift_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gift_name().data(), static_cast<int>(this->_internal_gift_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.GiftMessage.gift_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gift_name(), target);
  }

  // uint32 single_price_coin_raw = 5;
  if (this->single_price_coin_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_single_price_coin_raw(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.GiftMessage)
  return target;
}

size_t GiftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.GiftMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gift_name = 4;
  if (this->gift_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gift_name());
  }

  // bool is_gold = 1;
  if (this->is_gold() != 0) {
    total_size += 1 + 1;
  }

  // uint32 total_coin = 2;
  if (this->total_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_coin());
  }

  // uint32 gift_id = 3;
  if (this->gift_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gift_id());
  }

  // uint32 single_price_coin_raw = 5;
  if (this->single_price_coin_raw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_single_price_coin_raw());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiftMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.GiftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GiftMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.GiftMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.GiftMessage)
    MergeFrom(*source);
  }
}

void GiftMessage::MergeFrom(const GiftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.GiftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gift_name().size() > 0) {
    _internal_set_gift_name(from._internal_gift_name());
  }
  if (from.is_gold() != 0) {
    _internal_set_is_gold(from._internal_is_gold());
  }
  if (from.total_coin() != 0) {
    _internal_set_total_coin(from._internal_total_coin());
  }
  if (from.gift_id() != 0) {
    _internal_set_gift_id(from._internal_gift_id());
  }
  if (from.single_price_coin_raw() != 0) {
    _internal_set_single_price_coin_raw(from._internal_single_price_coin_raw());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GiftMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.GiftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftMessage::CopyFrom(const GiftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.GiftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftMessage::IsInitialized() const {
  return true;
}

void GiftMessage::InternalSwap(GiftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gift_name_.Swap(&other->gift_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_gold_, other->is_gold_);
  swap(total_coin_, other->total_coin_);
  swap(gift_id_, other->gift_id_);
  swap(single_price_coin_raw_, other->single_price_coin_raw_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GiftMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WelcomeVIPMessage::InitAsDefaultInstance() {
}
class WelcomeVIPMessage::_Internal {
 public:
};

WelcomeVIPMessage::WelcomeVIPMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.WelcomeVIPMessage)
}
WelcomeVIPMessage::WelcomeVIPMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.WelcomeVIPMessage)
}
WelcomeVIPMessage::WelcomeVIPMessage(const WelcomeVIPMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.WelcomeVIPMessage)
}

void WelcomeVIPMessage::SharedCtor() {
  level_ = 0;
}

WelcomeVIPMessage::~WelcomeVIPMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.WelcomeVIPMessage)
  SharedDtor();
}

void WelcomeVIPMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void WelcomeVIPMessage::ArenaDtor(void* object) {
  WelcomeVIPMessage* _this = reinterpret_cast< WelcomeVIPMessage* >(object);
  (void)_this;
}
void WelcomeVIPMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WelcomeVIPMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WelcomeVIPMessage& WelcomeVIPMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WelcomeVIPMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void WelcomeVIPMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.WelcomeVIPMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear();
}

const char* WelcomeVIPMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.LiveVipLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::vNerve::bilibili::live::LiveVipLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WelcomeVIPMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.WelcomeVIPMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.LiveVipLevel level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.WelcomeVIPMessage)
  return target;
}

size_t WelcomeVIPMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.WelcomeVIPMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vNerve.bilibili.live.LiveVipLevel level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WelcomeVIPMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.WelcomeVIPMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WelcomeVIPMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WelcomeVIPMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.WelcomeVIPMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.WelcomeVIPMessage)
    MergeFrom(*source);
  }
}

void WelcomeVIPMessage::MergeFrom(const WelcomeVIPMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.WelcomeVIPMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void WelcomeVIPMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.WelcomeVIPMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelcomeVIPMessage::CopyFrom(const WelcomeVIPMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.WelcomeVIPMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelcomeVIPMessage::IsInitialized() const {
  return true;
}

void WelcomeVIPMessage::InternalSwap(WelcomeVIPMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WelcomeVIPMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WelcomeGuardMessage::InitAsDefaultInstance() {
}
class WelcomeGuardMessage::_Internal {
 public:
};

WelcomeGuardMessage::WelcomeGuardMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.WelcomeGuardMessage)
}
WelcomeGuardMessage::WelcomeGuardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.WelcomeGuardMessage)
}
WelcomeGuardMessage::WelcomeGuardMessage(const WelcomeGuardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.WelcomeGuardMessage)
}

void WelcomeGuardMessage::SharedCtor() {
  level_ = 0;
}

WelcomeGuardMessage::~WelcomeGuardMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.WelcomeGuardMessage)
  SharedDtor();
}

void WelcomeGuardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void WelcomeGuardMessage::ArenaDtor(void* object) {
  WelcomeGuardMessage* _this = reinterpret_cast< WelcomeGuardMessage* >(object);
  (void)_this;
}
void WelcomeGuardMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WelcomeGuardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WelcomeGuardMessage& WelcomeGuardMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WelcomeGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void WelcomeGuardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.WelcomeGuardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear();
}

const char* WelcomeGuardMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.GuardLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::vNerve::bilibili::live::GuardLevel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WelcomeGuardMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.WelcomeGuardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.GuardLevel level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.WelcomeGuardMessage)
  return target;
}

size_t WelcomeGuardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.WelcomeGuardMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vNerve.bilibili.live.GuardLevel level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WelcomeGuardMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.WelcomeGuardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WelcomeGuardMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WelcomeGuardMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.WelcomeGuardMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.WelcomeGuardMessage)
    MergeFrom(*source);
  }
}

void WelcomeGuardMessage::MergeFrom(const WelcomeGuardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.WelcomeGuardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void WelcomeGuardMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.WelcomeGuardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelcomeGuardMessage::CopyFrom(const WelcomeGuardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.WelcomeGuardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelcomeGuardMessage::IsInitialized() const {
  return true;
}

void WelcomeGuardMessage::InternalSwap(WelcomeGuardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WelcomeGuardMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewGuardMessage::InitAsDefaultInstance() {
}
class NewGuardMessage::_Internal {
 public:
};

NewGuardMessage::NewGuardMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.NewGuardMessage)
}
NewGuardMessage::NewGuardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.NewGuardMessage)
}
NewGuardMessage::NewGuardMessage(const NewGuardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_type_) -
    reinterpret_cast<char*>(&level_)) + sizeof(buy_type_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.NewGuardMessage)
}

void NewGuardMessage::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_type_) -
      reinterpret_cast<char*>(&level_)) + sizeof(buy_type_));
}

NewGuardMessage::~NewGuardMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.NewGuardMessage)
  SharedDtor();
}

void NewGuardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void NewGuardMessage::ArenaDtor(void* object) {
  NewGuardMessage* _this = reinterpret_cast< NewGuardMessage* >(object);
  (void)_this;
}
void NewGuardMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewGuardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewGuardMessage& NewGuardMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewGuardMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void NewGuardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.NewGuardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_type_) -
      reinterpret_cast<char*>(&level_)) + sizeof(buy_type_));
  _internal_metadata_.Clear();
}

const char* NewGuardMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.GuardLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::vNerve::bilibili::live::GuardLevel>(val));
        } else goto handle_unusual;
        continue;
      // uint32 total_coin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.GuardDurationLevel duration_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_duration_level(static_cast<::vNerve::bilibili::live::GuardDurationLevel>(val));
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.GuardBuyType buy_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_buy_type(static_cast<::vNerve::bilibili::live::GuardBuyType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewGuardMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.NewGuardMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.GuardLevel level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // uint32 total_coin = 2;
  if (this->total_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_coin(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // .vNerve.bilibili.live.GuardDurationLevel duration_level = 4;
  if (this->duration_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_duration_level(), target);
  }

  // .vNerve.bilibili.live.GuardBuyType buy_type = 5;
  if (this->buy_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_buy_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.NewGuardMessage)
  return target;
}

size_t NewGuardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.NewGuardMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vNerve.bilibili.live.GuardLevel level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  // uint32 total_coin = 2;
  if (this->total_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_coin());
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // .vNerve.bilibili.live.GuardDurationLevel duration_level = 4;
  if (this->duration_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_duration_level());
  }

  // .vNerve.bilibili.live.GuardBuyType buy_type = 5;
  if (this->buy_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_buy_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewGuardMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.NewGuardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewGuardMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewGuardMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.NewGuardMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.NewGuardMessage)
    MergeFrom(*source);
  }
}

void NewGuardMessage::MergeFrom(const NewGuardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.NewGuardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.total_coin() != 0) {
    _internal_set_total_coin(from._internal_total_coin());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.duration_level() != 0) {
    _internal_set_duration_level(from._internal_duration_level());
  }
  if (from.buy_type() != 0) {
    _internal_set_buy_type(from._internal_buy_type());
  }
}

void NewGuardMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.NewGuardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGuardMessage::CopyFrom(const NewGuardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.NewGuardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGuardMessage::IsInitialized() const {
  return true;
}

void NewGuardMessage::InternalSwap(NewGuardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
  swap(total_coin_, other->total_coin_);
  swap(count_, other->count_);
  swap(duration_level_, other->duration_level_);
  swap(buy_type_, other->buy_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewGuardMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserBlockedMessage::InitAsDefaultInstance() {
}
class UserBlockedMessage::_Internal {
 public:
};

UserBlockedMessage::UserBlockedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.UserBlockedMessage)
}
UserBlockedMessage::UserBlockedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.UserBlockedMessage)
}
UserBlockedMessage::UserBlockedMessage(const UserBlockedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.UserBlockedMessage)
}

void UserBlockedMessage::SharedCtor() {
}

UserBlockedMessage::~UserBlockedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.UserBlockedMessage)
  SharedDtor();
}

void UserBlockedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void UserBlockedMessage::ArenaDtor(void* object) {
  UserBlockedMessage* _this = reinterpret_cast< UserBlockedMessage* >(object);
  (void)_this;
}
void UserBlockedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserBlockedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBlockedMessage& UserBlockedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserBlockedMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void UserBlockedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.UserBlockedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UserBlockedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserBlockedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.UserBlockedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.UserBlockedMessage)
  return target;
}

size_t UserBlockedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.UserBlockedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBlockedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.UserBlockedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBlockedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserBlockedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.UserBlockedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.UserBlockedMessage)
    MergeFrom(*source);
  }
}

void UserBlockedMessage::MergeFrom(const UserBlockedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.UserBlockedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserBlockedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.UserBlockedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBlockedMessage::CopyFrom(const UserBlockedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.UserBlockedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBlockedMessage::IsInitialized() const {
  return true;
}

void UserBlockedMessage::InternalSwap(UserBlockedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBlockedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserKickedOutMessage::InitAsDefaultInstance() {
}
class UserKickedOutMessage::_Internal {
 public:
};

UserKickedOutMessage::UserKickedOutMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.UserKickedOutMessage)
}
UserKickedOutMessage::UserKickedOutMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.UserKickedOutMessage)
}
UserKickedOutMessage::UserKickedOutMessage(const UserKickedOutMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.UserKickedOutMessage)
}

void UserKickedOutMessage::SharedCtor() {
}

UserKickedOutMessage::~UserKickedOutMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.UserKickedOutMessage)
  SharedDtor();
}

void UserKickedOutMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void UserKickedOutMessage::ArenaDtor(void* object) {
  UserKickedOutMessage* _this = reinterpret_cast< UserKickedOutMessage* >(object);
  (void)_this;
}
void UserKickedOutMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserKickedOutMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserKickedOutMessage& UserKickedOutMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserKickedOutMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void UserKickedOutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.UserKickedOutMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UserKickedOutMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserKickedOutMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.UserKickedOutMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.UserKickedOutMessage)
  return target;
}

size_t UserKickedOutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.UserKickedOutMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserKickedOutMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.UserKickedOutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserKickedOutMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserKickedOutMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.UserKickedOutMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.UserKickedOutMessage)
    MergeFrom(*source);
  }
}

void UserKickedOutMessage::MergeFrom(const UserKickedOutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.UserKickedOutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserKickedOutMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.UserKickedOutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserKickedOutMessage::CopyFrom(const UserKickedOutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.UserKickedOutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserKickedOutMessage::IsInitialized() const {
  return true;
}

void UserKickedOutMessage::InternalSwap(UserKickedOutMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserKickedOutMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::UserMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::UserMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::UserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::UserInfo* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::MedalInfo* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::MedalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::MedalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::DanmakuMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::DanmakuMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::DanmakuMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::SuperChatMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::SuperChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::SuperChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::GiftMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::GiftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::GiftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::WelcomeVIPMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::WelcomeVIPMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::WelcomeVIPMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::WelcomeGuardMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::WelcomeGuardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::WelcomeGuardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::NewGuardMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::NewGuardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::NewGuardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::UserBlockedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::UserBlockedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::UserBlockedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::UserKickedOutMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::UserKickedOutMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::UserKickedOutMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
