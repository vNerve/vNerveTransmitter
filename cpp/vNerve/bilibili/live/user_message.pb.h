// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/user_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class DanmakuMessage;
class DanmakuMessageDefaultTypeInternal;
extern DanmakuMessageDefaultTypeInternal _DanmakuMessage_default_instance_;
class GiftMessage;
class GiftMessageDefaultTypeInternal;
extern GiftMessageDefaultTypeInternal _GiftMessage_default_instance_;
class MedalInfo;
class MedalInfoDefaultTypeInternal;
extern MedalInfoDefaultTypeInternal _MedalInfo_default_instance_;
class NewGuardMessage;
class NewGuardMessageDefaultTypeInternal;
extern NewGuardMessageDefaultTypeInternal _NewGuardMessage_default_instance_;
class SuperChatMessage;
class SuperChatMessageDefaultTypeInternal;
extern SuperChatMessageDefaultTypeInternal _SuperChatMessage_default_instance_;
class UserBlockedMessage;
class UserBlockedMessageDefaultTypeInternal;
extern UserBlockedMessageDefaultTypeInternal _UserBlockedMessage_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserMessage;
class UserMessageDefaultTypeInternal;
extern UserMessageDefaultTypeInternal _UserMessage_default_instance_;
class WelcomeGuardMessage;
class WelcomeGuardMessageDefaultTypeInternal;
extern WelcomeGuardMessageDefaultTypeInternal _WelcomeGuardMessage_default_instance_;
class WelcomeVIPMessage;
class WelcomeVIPMessageDefaultTypeInternal;
extern WelcomeVIPMessageDefaultTypeInternal _WelcomeVIPMessage_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::live::DanmakuMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::DanmakuMessage>(Arena*);
template<> ::vNerve::bilibili::live::GiftMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::GiftMessage>(Arena*);
template<> ::vNerve::bilibili::live::MedalInfo* Arena::CreateMaybeMessage<::vNerve::bilibili::live::MedalInfo>(Arena*);
template<> ::vNerve::bilibili::live::NewGuardMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::NewGuardMessage>(Arena*);
template<> ::vNerve::bilibili::live::SuperChatMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::SuperChatMessage>(Arena*);
template<> ::vNerve::bilibili::live::UserBlockedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::UserBlockedMessage>(Arena*);
template<> ::vNerve::bilibili::live::UserInfo* Arena::CreateMaybeMessage<::vNerve::bilibili::live::UserInfo>(Arena*);
template<> ::vNerve::bilibili::live::UserMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::UserMessage>(Arena*);
template<> ::vNerve::bilibili::live::WelcomeGuardMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::WelcomeGuardMessage>(Arena*);
template<> ::vNerve::bilibili::live::WelcomeVIPMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::live::WelcomeVIPMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {
namespace live {

enum LiveVipLevel : int {
  NO_VIP = 0,
  MONTHLY_VIP = 1,
  YEARLY_VIP = 2,
  LiveVipLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiveVipLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiveVipLevel_IsValid(int value);
constexpr LiveVipLevel LiveVipLevel_MIN = NO_VIP;
constexpr LiveVipLevel LiveVipLevel_MAX = YEARLY_VIP;
constexpr int LiveVipLevel_ARRAYSIZE = LiveVipLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveVipLevel_descriptor();
template<typename T>
inline const std::string& LiveVipLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiveVipLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiveVipLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiveVipLevel_descriptor(), enum_t_value);
}
inline bool LiveVipLevel_Parse(
    const std::string& name, LiveVipLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiveVipLevel>(
    LiveVipLevel_descriptor(), name, value);
}
enum LotteryDanmakuType : int {
  NO_LOTTERY = 0,
  STORM = 1,
  LOTTERY = 2,
  LotteryDanmakuType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LotteryDanmakuType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LotteryDanmakuType_IsValid(int value);
constexpr LotteryDanmakuType LotteryDanmakuType_MIN = NO_LOTTERY;
constexpr LotteryDanmakuType LotteryDanmakuType_MAX = LOTTERY;
constexpr int LotteryDanmakuType_ARRAYSIZE = LotteryDanmakuType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LotteryDanmakuType_descriptor();
template<typename T>
inline const std::string& LotteryDanmakuType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LotteryDanmakuType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LotteryDanmakuType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LotteryDanmakuType_descriptor(), enum_t_value);
}
inline bool LotteryDanmakuType_Parse(
    const std::string& name, LotteryDanmakuType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LotteryDanmakuType>(
    LotteryDanmakuType_descriptor(), name, value);
}
enum GuardLevel : int {
  NO_GUARD = 0,
  LEVEL1 = 1,
  LEVEL2 = 2,
  LEVEL3 = 3,
  GuardLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GuardLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GuardLevel_IsValid(int value);
constexpr GuardLevel GuardLevel_MIN = NO_GUARD;
constexpr GuardLevel GuardLevel_MAX = LEVEL3;
constexpr int GuardLevel_ARRAYSIZE = GuardLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardLevel_descriptor();
template<typename T>
inline const std::string& GuardLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GuardLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GuardLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GuardLevel_descriptor(), enum_t_value);
}
inline bool GuardLevel_Parse(
    const std::string& name, GuardLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GuardLevel>(
    GuardLevel_descriptor(), name, value);
}
enum GuardBuyType : int {
  NO_TYPE = 0,
  BUY = 1,
  RENEW = 2,
  GuardBuyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GuardBuyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GuardBuyType_IsValid(int value);
constexpr GuardBuyType GuardBuyType_MIN = NO_TYPE;
constexpr GuardBuyType GuardBuyType_MAX = RENEW;
constexpr int GuardBuyType_ARRAYSIZE = GuardBuyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardBuyType_descriptor();
template<typename T>
inline const std::string& GuardBuyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GuardBuyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GuardBuyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GuardBuyType_descriptor(), enum_t_value);
}
inline bool GuardBuyType_Parse(
    const std::string& name, GuardBuyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GuardBuyType>(
    GuardBuyType_descriptor(), name, value);
}
enum GuardDurationLevel : int {
  NO_DURATION = 0,
  MONTHLY_GUARD = 1,
  WEEKLY_GUARD = 2,
  GuardDurationLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GuardDurationLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GuardDurationLevel_IsValid(int value);
constexpr GuardDurationLevel GuardDurationLevel_MIN = NO_DURATION;
constexpr GuardDurationLevel GuardDurationLevel_MAX = WEEKLY_GUARD;
constexpr int GuardDurationLevel_ARRAYSIZE = GuardDurationLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuardDurationLevel_descriptor();
template<typename T>
inline const std::string& GuardDurationLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GuardDurationLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GuardDurationLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GuardDurationLevel_descriptor(), enum_t_value);
}
inline bool GuardDurationLevel_Parse(
    const std::string& name, GuardDurationLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GuardDurationLevel>(
    GuardDurationLevel_descriptor(), name, value);
}
// ===================================================================

class UserMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.UserMessage) */ {
 public:
  UserMessage();
  virtual ~UserMessage();

  UserMessage(const UserMessage& from);
  UserMessage(UserMessage&& from) noexcept
    : UserMessage() {
    *this = ::std::move(from);
  }

  inline UserMessage& operator=(const UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMessage& operator=(UserMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserMessage& default_instance();

  enum PayloadCase {
    kDanmaku = 2,
    kGift = 3,
    kSuperChat = 4,
    kNewGuard = 5,
    kWelcomeVip = 6,
    kWelcomeGuard = 7,
    kUserBlocked = 16,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMessage* internal_default_instance() {
    return reinterpret_cast<const UserMessage*>(
               &_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserMessage& a, UserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserMessage* New() const final {
    return CreateMaybeMessage<UserMessage>(nullptr);
  }

  UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserMessage& from);
  void MergeFrom(const UserMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.UserMessage";
  }
  protected:
  explicit UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kDanmakuFieldNumber = 2,
    kGiftFieldNumber = 3,
    kSuperChatFieldNumber = 4,
    kNewGuardFieldNumber = 5,
    kWelcomeVipFieldNumber = 6,
    kWelcomeGuardFieldNumber = 7,
    kUserBlockedFieldNumber = 16,
  };
  // .vNerve.bilibili.live.UserInfo user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::vNerve::bilibili::live::UserInfo& user() const;
  ::vNerve::bilibili::live::UserInfo* release_user();
  ::vNerve::bilibili::live::UserInfo* mutable_user();
  void set_allocated_user(::vNerve::bilibili::live::UserInfo* user);
  private:
  const ::vNerve::bilibili::live::UserInfo& _internal_user() const;
  ::vNerve::bilibili::live::UserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::vNerve::bilibili::live::UserInfo* user);
  ::vNerve::bilibili::live::UserInfo* unsafe_arena_release_user();

  // .vNerve.bilibili.live.DanmakuMessage danmaku = 2;
  bool has_danmaku() const;
  private:
  bool _internal_has_danmaku() const;
  public:
  void clear_danmaku();
  const ::vNerve::bilibili::live::DanmakuMessage& danmaku() const;
  ::vNerve::bilibili::live::DanmakuMessage* release_danmaku();
  ::vNerve::bilibili::live::DanmakuMessage* mutable_danmaku();
  void set_allocated_danmaku(::vNerve::bilibili::live::DanmakuMessage* danmaku);
  private:
  const ::vNerve::bilibili::live::DanmakuMessage& _internal_danmaku() const;
  ::vNerve::bilibili::live::DanmakuMessage* _internal_mutable_danmaku();
  public:
  void unsafe_arena_set_allocated_danmaku(
      ::vNerve::bilibili::live::DanmakuMessage* danmaku);
  ::vNerve::bilibili::live::DanmakuMessage* unsafe_arena_release_danmaku();

  // .vNerve.bilibili.live.GiftMessage gift = 3;
  bool has_gift() const;
  private:
  bool _internal_has_gift() const;
  public:
  void clear_gift();
  const ::vNerve::bilibili::live::GiftMessage& gift() const;
  ::vNerve::bilibili::live::GiftMessage* release_gift();
  ::vNerve::bilibili::live::GiftMessage* mutable_gift();
  void set_allocated_gift(::vNerve::bilibili::live::GiftMessage* gift);
  private:
  const ::vNerve::bilibili::live::GiftMessage& _internal_gift() const;
  ::vNerve::bilibili::live::GiftMessage* _internal_mutable_gift();
  public:
  void unsafe_arena_set_allocated_gift(
      ::vNerve::bilibili::live::GiftMessage* gift);
  ::vNerve::bilibili::live::GiftMessage* unsafe_arena_release_gift();

  // .vNerve.bilibili.live.SuperChatMessage super_chat = 4;
  bool has_super_chat() const;
  private:
  bool _internal_has_super_chat() const;
  public:
  void clear_super_chat();
  const ::vNerve::bilibili::live::SuperChatMessage& super_chat() const;
  ::vNerve::bilibili::live::SuperChatMessage* release_super_chat();
  ::vNerve::bilibili::live::SuperChatMessage* mutable_super_chat();
  void set_allocated_super_chat(::vNerve::bilibili::live::SuperChatMessage* super_chat);
  private:
  const ::vNerve::bilibili::live::SuperChatMessage& _internal_super_chat() const;
  ::vNerve::bilibili::live::SuperChatMessage* _internal_mutable_super_chat();
  public:
  void unsafe_arena_set_allocated_super_chat(
      ::vNerve::bilibili::live::SuperChatMessage* super_chat);
  ::vNerve::bilibili::live::SuperChatMessage* unsafe_arena_release_super_chat();

  // .vNerve.bilibili.live.NewGuardMessage new_guard = 5;
  bool has_new_guard() const;
  private:
  bool _internal_has_new_guard() const;
  public:
  void clear_new_guard();
  const ::vNerve::bilibili::live::NewGuardMessage& new_guard() const;
  ::vNerve::bilibili::live::NewGuardMessage* release_new_guard();
  ::vNerve::bilibili::live::NewGuardMessage* mutable_new_guard();
  void set_allocated_new_guard(::vNerve::bilibili::live::NewGuardMessage* new_guard);
  private:
  const ::vNerve::bilibili::live::NewGuardMessage& _internal_new_guard() const;
  ::vNerve::bilibili::live::NewGuardMessage* _internal_mutable_new_guard();
  public:
  void unsafe_arena_set_allocated_new_guard(
      ::vNerve::bilibili::live::NewGuardMessage* new_guard);
  ::vNerve::bilibili::live::NewGuardMessage* unsafe_arena_release_new_guard();

  // .vNerve.bilibili.live.WelcomeVIPMessage welcome_vip = 6;
  bool has_welcome_vip() const;
  private:
  bool _internal_has_welcome_vip() const;
  public:
  void clear_welcome_vip();
  const ::vNerve::bilibili::live::WelcomeVIPMessage& welcome_vip() const;
  ::vNerve::bilibili::live::WelcomeVIPMessage* release_welcome_vip();
  ::vNerve::bilibili::live::WelcomeVIPMessage* mutable_welcome_vip();
  void set_allocated_welcome_vip(::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip);
  private:
  const ::vNerve::bilibili::live::WelcomeVIPMessage& _internal_welcome_vip() const;
  ::vNerve::bilibili::live::WelcomeVIPMessage* _internal_mutable_welcome_vip();
  public:
  void unsafe_arena_set_allocated_welcome_vip(
      ::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip);
  ::vNerve::bilibili::live::WelcomeVIPMessage* unsafe_arena_release_welcome_vip();

  // .vNerve.bilibili.live.WelcomeGuardMessage welcome_guard = 7;
  bool has_welcome_guard() const;
  private:
  bool _internal_has_welcome_guard() const;
  public:
  void clear_welcome_guard();
  const ::vNerve::bilibili::live::WelcomeGuardMessage& welcome_guard() const;
  ::vNerve::bilibili::live::WelcomeGuardMessage* release_welcome_guard();
  ::vNerve::bilibili::live::WelcomeGuardMessage* mutable_welcome_guard();
  void set_allocated_welcome_guard(::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard);
  private:
  const ::vNerve::bilibili::live::WelcomeGuardMessage& _internal_welcome_guard() const;
  ::vNerve::bilibili::live::WelcomeGuardMessage* _internal_mutable_welcome_guard();
  public:
  void unsafe_arena_set_allocated_welcome_guard(
      ::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard);
  ::vNerve::bilibili::live::WelcomeGuardMessage* unsafe_arena_release_welcome_guard();

  // .vNerve.bilibili.live.UserBlockedMessage user_blocked = 16;
  bool has_user_blocked() const;
  private:
  bool _internal_has_user_blocked() const;
  public:
  void clear_user_blocked();
  const ::vNerve::bilibili::live::UserBlockedMessage& user_blocked() const;
  ::vNerve::bilibili::live::UserBlockedMessage* release_user_blocked();
  ::vNerve::bilibili::live::UserBlockedMessage* mutable_user_blocked();
  void set_allocated_user_blocked(::vNerve::bilibili::live::UserBlockedMessage* user_blocked);
  private:
  const ::vNerve::bilibili::live::UserBlockedMessage& _internal_user_blocked() const;
  ::vNerve::bilibili::live::UserBlockedMessage* _internal_mutable_user_blocked();
  public:
  void unsafe_arena_set_allocated_user_blocked(
      ::vNerve::bilibili::live::UserBlockedMessage* user_blocked);
  ::vNerve::bilibili::live::UserBlockedMessage* unsafe_arena_release_user_blocked();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.UserMessage)
 private:
  class _Internal;
  void set_has_danmaku();
  void set_has_gift();
  void set_has_super_chat();
  void set_has_new_guard();
  void set_has_welcome_vip();
  void set_has_welcome_guard();
  void set_has_user_blocked();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vNerve::bilibili::live::UserInfo* user_;
  union PayloadUnion {
    PayloadUnion() {}
    ::vNerve::bilibili::live::DanmakuMessage* danmaku_;
    ::vNerve::bilibili::live::GiftMessage* gift_;
    ::vNerve::bilibili::live::SuperChatMessage* super_chat_;
    ::vNerve::bilibili::live::NewGuardMessage* new_guard_;
    ::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip_;
    ::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard_;
    ::vNerve::bilibili::live::UserBlockedMessage* user_blocked_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  enum AdminOptionalCase {
    kAdmin = 6,
    ADMIN_OPTIONAL_NOT_SET = 0,
  };

  enum MainVipOptionalCase {
    kMainVip = 7,
    MAIN_VIP_OPTIONAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kTitleFieldNumber = 9,
    kMedalFieldNumber = 10,
    kUidFieldNumber = 1,
    kUserLevelFieldNumber = 4,
    kUserLevelBorderColorFieldNumber = 5,
    kLiveVipLevelFieldNumber = 8,
    kGuardLevelFieldNumber = 11,
    kPhoneVerifiedFieldNumber = 12,
    kRegularUserFieldNumber = 13,
    kAdminFieldNumber = 6,
    kMainVipFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar_url = 3;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avatar_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avatar_url(
      std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string title = 9;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .vNerve.bilibili.live.MedalInfo medal = 10;
  bool has_medal() const;
  private:
  bool _internal_has_medal() const;
  public:
  void clear_medal();
  const ::vNerve::bilibili::live::MedalInfo& medal() const;
  ::vNerve::bilibili::live::MedalInfo* release_medal();
  ::vNerve::bilibili::live::MedalInfo* mutable_medal();
  void set_allocated_medal(::vNerve::bilibili::live::MedalInfo* medal);
  private:
  const ::vNerve::bilibili::live::MedalInfo& _internal_medal() const;
  ::vNerve::bilibili::live::MedalInfo* _internal_mutable_medal();
  public:
  void unsafe_arena_set_allocated_medal(
      ::vNerve::bilibili::live::MedalInfo* medal);
  ::vNerve::bilibili::live::MedalInfo* unsafe_arena_release_medal();

  // uint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 user_level = 4;
  void clear_user_level();
  ::PROTOBUF_NAMESPACE_ID::int32 user_level() const;
  void set_user_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_level() const;
  void _internal_set_user_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // fixed32 user_level_border_color = 5;
  void clear_user_level_border_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_level_border_color() const;
  void set_user_level_border_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_level_border_color() const;
  void _internal_set_user_level_border_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.bilibili.live.LiveVipLevel live_vip_level = 8;
  void clear_live_vip_level();
  ::vNerve::bilibili::live::LiveVipLevel live_vip_level() const;
  void set_live_vip_level(::vNerve::bilibili::live::LiveVipLevel value);
  private:
  ::vNerve::bilibili::live::LiveVipLevel _internal_live_vip_level() const;
  void _internal_set_live_vip_level(::vNerve::bilibili::live::LiveVipLevel value);
  public:

  // .vNerve.bilibili.live.GuardLevel guard_level = 11;
  void clear_guard_level();
  ::vNerve::bilibili::live::GuardLevel guard_level() const;
  void set_guard_level(::vNerve::bilibili::live::GuardLevel value);
  private:
  ::vNerve::bilibili::live::GuardLevel _internal_guard_level() const;
  void _internal_set_guard_level(::vNerve::bilibili::live::GuardLevel value);
  public:

  // bool phone_verified = 12;
  void clear_phone_verified();
  bool phone_verified() const;
  void set_phone_verified(bool value);
  private:
  bool _internal_phone_verified() const;
  void _internal_set_phone_verified(bool value);
  public:

  // bool regular_user = 13;
  void clear_regular_user();
  bool regular_user() const;
  void set_regular_user(bool value);
  private:
  bool _internal_regular_user() const;
  void _internal_set_regular_user(bool value);
  public:

  // bool admin = 6;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  bool admin() const;
  void set_admin(bool value);
  private:
  bool _internal_admin() const;
  void _internal_set_admin(bool value);
  public:

  // bool main_vip = 7;
  private:
  bool _internal_has_main_vip() const;
  public:
  void clear_main_vip();
  bool main_vip() const;
  void set_main_vip(bool value);
  private:
  bool _internal_main_vip() const;
  void _internal_set_main_vip(bool value);
  public:

  void clear_admin_optional();
  AdminOptionalCase admin_optional_case() const;
  void clear_main_vip_optional();
  MainVipOptionalCase main_vip_optional_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.UserInfo)
 private:
  class _Internal;
  void set_has_admin();
  void set_has_main_vip();

  inline bool has_admin_optional() const;
  inline void clear_has_admin_optional();

  inline bool has_main_vip_optional() const;
  inline void clear_has_main_vip_optional();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::vNerve::bilibili::live::MedalInfo* medal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_level_border_color_;
  int live_vip_level_;
  int guard_level_;
  bool phone_verified_;
  bool regular_user_;
  union AdminOptionalUnion {
    AdminOptionalUnion() {}
    bool admin_;
  } admin_optional_;
  union MainVipOptionalUnion {
    MainVipOptionalUnion() {}
    bool main_vip_;
  } main_vip_optional_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MedalInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.MedalInfo) */ {
 public:
  MedalInfo();
  virtual ~MedalInfo();

  MedalInfo(const MedalInfo& from);
  MedalInfo(MedalInfo&& from) noexcept
    : MedalInfo() {
    *this = ::std::move(from);
  }

  inline MedalInfo& operator=(const MedalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedalInfo& operator=(MedalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedalInfo* internal_default_instance() {
    return reinterpret_cast<const MedalInfo*>(
               &_MedalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MedalInfo& a, MedalInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MedalInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MedalInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedalInfo* New() const final {
    return CreateMaybeMessage<MedalInfo>(nullptr);
  }

  MedalInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedalInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedalInfo& from);
  void MergeFrom(const MedalInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedalInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.MedalInfo";
  }
  protected:
  explicit MedalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedalNameFieldNumber = 1,
    kStreamerNameFieldNumber = 5,
    kMedalLevelFieldNumber = 2,
    kMedalColorFieldNumber = 3,
    kStreamerUidFieldNumber = 4,
    kStreamerRoomidFieldNumber = 6,
  };
  // string medal_name = 1;
  void clear_medal_name();
  const std::string& medal_name() const;
  void set_medal_name(const std::string& value);
  void set_medal_name(std::string&& value);
  void set_medal_name(const char* value);
  void set_medal_name(const char* value, size_t size);
  std::string* mutable_medal_name();
  std::string* release_medal_name();
  void set_allocated_medal_name(std::string* medal_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_medal_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_medal_name(
      std::string* medal_name);
  private:
  const std::string& _internal_medal_name() const;
  void _internal_set_medal_name(const std::string& value);
  std::string* _internal_mutable_medal_name();
  public:

  // string streamer_name = 5;
  void clear_streamer_name();
  const std::string& streamer_name() const;
  void set_streamer_name(const std::string& value);
  void set_streamer_name(std::string&& value);
  void set_streamer_name(const char* value);
  void set_streamer_name(const char* value, size_t size);
  std::string* mutable_streamer_name();
  std::string* release_streamer_name();
  void set_allocated_streamer_name(std::string* streamer_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_streamer_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_streamer_name(
      std::string* streamer_name);
  private:
  const std::string& _internal_streamer_name() const;
  void _internal_set_streamer_name(const std::string& value);
  std::string* _internal_mutable_streamer_name();
  public:

  // uint32 medal_level = 2;
  void clear_medal_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_level() const;
  void set_medal_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_level() const;
  void _internal_set_medal_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 medal_color = 3;
  void clear_medal_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_color() const;
  void set_medal_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_color() const;
  void _internal_set_medal_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 streamer_uid = 4;
  void clear_streamer_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 streamer_uid() const;
  void set_streamer_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_streamer_uid() const;
  void _internal_set_streamer_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 streamer_roomid = 6;
  void clear_streamer_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 streamer_roomid() const;
  void set_streamer_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_streamer_roomid() const;
  void _internal_set_streamer_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.MedalInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr medal_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamer_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_color_;
  ::PROTOBUF_NAMESPACE_ID::uint64 streamer_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 streamer_roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DanmakuMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.DanmakuMessage) */ {
 public:
  DanmakuMessage();
  virtual ~DanmakuMessage();

  DanmakuMessage(const DanmakuMessage& from);
  DanmakuMessage(DanmakuMessage&& from) noexcept
    : DanmakuMessage() {
    *this = ::std::move(from);
  }

  inline DanmakuMessage& operator=(const DanmakuMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmakuMessage& operator=(DanmakuMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DanmakuMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DanmakuMessage* internal_default_instance() {
    return reinterpret_cast<const DanmakuMessage*>(
               &_DanmakuMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DanmakuMessage& a, DanmakuMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmakuMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmakuMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DanmakuMessage* New() const final {
    return CreateMaybeMessage<DanmakuMessage>(nullptr);
  }

  DanmakuMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DanmakuMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DanmakuMessage& from);
  void MergeFrom(const DanmakuMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmakuMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.DanmakuMessage";
  }
  protected:
  explicit DanmakuMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kLotteryTypeFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .vNerve.bilibili.live.LotteryDanmakuType lottery_type = 2;
  void clear_lottery_type();
  ::vNerve::bilibili::live::LotteryDanmakuType lottery_type() const;
  void set_lottery_type(::vNerve::bilibili::live::LotteryDanmakuType value);
  private:
  ::vNerve::bilibili::live::LotteryDanmakuType _internal_lottery_type() const;
  void _internal_set_lottery_type(::vNerve::bilibili::live::LotteryDanmakuType value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.DanmakuMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int lottery_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SuperChatMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.SuperChatMessage) */ {
 public:
  SuperChatMessage();
  virtual ~SuperChatMessage();

  SuperChatMessage(const SuperChatMessage& from);
  SuperChatMessage(SuperChatMessage&& from) noexcept
    : SuperChatMessage() {
    *this = ::std::move(from);
  }

  inline SuperChatMessage& operator=(const SuperChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuperChatMessage& operator=(SuperChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuperChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuperChatMessage* internal_default_instance() {
    return reinterpret_cast<const SuperChatMessage*>(
               &_SuperChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SuperChatMessage& a, SuperChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SuperChatMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuperChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuperChatMessage* New() const final {
    return CreateMaybeMessage<SuperChatMessage>(nullptr);
  }

  SuperChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuperChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuperChatMessage& from);
  void MergeFrom(const SuperChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuperChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.SuperChatMessage";
  }
  protected:
  explicit SuperChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTokenFieldNumber = 4,
    kIdFieldNumber = 3,
    kPriceCnyFieldNumber = 5,
    kPriceCoinFieldNumber = 6,
    kLastingTimeSecFieldNumber = 7,
    kStartTimeFieldNumber = 8,
    kEndTimeFieldNumber = 9,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price_cny = 5;
  void clear_price_cny();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_cny() const;
  void set_price_cny(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_cny() const;
  void _internal_set_price_cny(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price_coin = 6;
  void clear_price_coin();
  ::PROTOBUF_NAMESPACE_ID::uint32 price_coin() const;
  void set_price_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price_coin() const;
  void _internal_set_price_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lasting_time_sec = 7;
  void clear_lasting_time_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 lasting_time_sec() const;
  void set_lasting_time_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lasting_time_sec() const;
  void _internal_set_lasting_time_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 start_time = 8;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 9;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.SuperChatMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_cny_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lasting_time_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GiftMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.GiftMessage) */ {
 public:
  GiftMessage();
  virtual ~GiftMessage();

  GiftMessage(const GiftMessage& from);
  GiftMessage(GiftMessage&& from) noexcept
    : GiftMessage() {
    *this = ::std::move(from);
  }

  inline GiftMessage& operator=(const GiftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GiftMessage& operator=(GiftMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GiftMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GiftMessage* internal_default_instance() {
    return reinterpret_cast<const GiftMessage*>(
               &_GiftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GiftMessage& a, GiftMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GiftMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GiftMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GiftMessage* New() const final {
    return CreateMaybeMessage<GiftMessage>(nullptr);
  }

  GiftMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GiftMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GiftMessage& from);
  void MergeFrom(const GiftMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GiftMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.GiftMessage";
  }
  protected:
  explicit GiftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGiftNameFieldNumber = 4,
    kIsGoldFieldNumber = 1,
    kTotalCoinFieldNumber = 2,
    kGiftIdFieldNumber = 3,
    kSinglePriceCoinRawFieldNumber = 5,
    kCountFieldNumber = 6,
  };
  // string gift_name = 4;
  void clear_gift_name();
  const std::string& gift_name() const;
  void set_gift_name(const std::string& value);
  void set_gift_name(std::string&& value);
  void set_gift_name(const char* value);
  void set_gift_name(const char* value, size_t size);
  std::string* mutable_gift_name();
  std::string* release_gift_name();
  void set_allocated_gift_name(std::string* gift_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gift_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gift_name(
      std::string* gift_name);
  private:
  const std::string& _internal_gift_name() const;
  void _internal_set_gift_name(const std::string& value);
  std::string* _internal_mutable_gift_name();
  public:

  // bool is_gold = 1;
  void clear_is_gold();
  bool is_gold() const;
  void set_is_gold(bool value);
  private:
  bool _internal_is_gold() const;
  void _internal_set_is_gold(bool value);
  public:

  // uint32 total_coin = 2;
  void clear_total_coin();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_coin() const;
  void set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_coin() const;
  void _internal_set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gift_id = 3;
  void clear_gift_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gift_id() const;
  void set_gift_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gift_id() const;
  void _internal_set_gift_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 single_price_coin_raw = 5;
  void clear_single_price_coin_raw();
  ::PROTOBUF_NAMESPACE_ID::uint32 single_price_coin_raw() const;
  void set_single_price_coin_raw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_single_price_coin_raw() const;
  void _internal_set_single_price_coin_raw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 6;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.GiftMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gift_name_;
  bool is_gold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gift_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 single_price_coin_raw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class WelcomeVIPMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.WelcomeVIPMessage) */ {
 public:
  WelcomeVIPMessage();
  virtual ~WelcomeVIPMessage();

  WelcomeVIPMessage(const WelcomeVIPMessage& from);
  WelcomeVIPMessage(WelcomeVIPMessage&& from) noexcept
    : WelcomeVIPMessage() {
    *this = ::std::move(from);
  }

  inline WelcomeVIPMessage& operator=(const WelcomeVIPMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WelcomeVIPMessage& operator=(WelcomeVIPMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WelcomeVIPMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelcomeVIPMessage* internal_default_instance() {
    return reinterpret_cast<const WelcomeVIPMessage*>(
               &_WelcomeVIPMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WelcomeVIPMessage& a, WelcomeVIPMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WelcomeVIPMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WelcomeVIPMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WelcomeVIPMessage* New() const final {
    return CreateMaybeMessage<WelcomeVIPMessage>(nullptr);
  }

  WelcomeVIPMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WelcomeVIPMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WelcomeVIPMessage& from);
  void MergeFrom(const WelcomeVIPMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelcomeVIPMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.WelcomeVIPMessage";
  }
  protected:
  explicit WelcomeVIPMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // .vNerve.bilibili.live.LiveVipLevel level = 1;
  void clear_level();
  ::vNerve::bilibili::live::LiveVipLevel level() const;
  void set_level(::vNerve::bilibili::live::LiveVipLevel value);
  private:
  ::vNerve::bilibili::live::LiveVipLevel _internal_level() const;
  void _internal_set_level(::vNerve::bilibili::live::LiveVipLevel value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.WelcomeVIPMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class WelcomeGuardMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.WelcomeGuardMessage) */ {
 public:
  WelcomeGuardMessage();
  virtual ~WelcomeGuardMessage();

  WelcomeGuardMessage(const WelcomeGuardMessage& from);
  WelcomeGuardMessage(WelcomeGuardMessage&& from) noexcept
    : WelcomeGuardMessage() {
    *this = ::std::move(from);
  }

  inline WelcomeGuardMessage& operator=(const WelcomeGuardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WelcomeGuardMessage& operator=(WelcomeGuardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WelcomeGuardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelcomeGuardMessage* internal_default_instance() {
    return reinterpret_cast<const WelcomeGuardMessage*>(
               &_WelcomeGuardMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WelcomeGuardMessage& a, WelcomeGuardMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WelcomeGuardMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WelcomeGuardMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WelcomeGuardMessage* New() const final {
    return CreateMaybeMessage<WelcomeGuardMessage>(nullptr);
  }

  WelcomeGuardMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WelcomeGuardMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WelcomeGuardMessage& from);
  void MergeFrom(const WelcomeGuardMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelcomeGuardMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.WelcomeGuardMessage";
  }
  protected:
  explicit WelcomeGuardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // .vNerve.bilibili.live.GuardLevel level = 1;
  void clear_level();
  ::vNerve::bilibili::live::GuardLevel level() const;
  void set_level(::vNerve::bilibili::live::GuardLevel value);
  private:
  ::vNerve::bilibili::live::GuardLevel _internal_level() const;
  void _internal_set_level(::vNerve::bilibili::live::GuardLevel value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.WelcomeGuardMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class NewGuardMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.NewGuardMessage) */ {
 public:
  NewGuardMessage();
  virtual ~NewGuardMessage();

  NewGuardMessage(const NewGuardMessage& from);
  NewGuardMessage(NewGuardMessage&& from) noexcept
    : NewGuardMessage() {
    *this = ::std::move(from);
  }

  inline NewGuardMessage& operator=(const NewGuardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGuardMessage& operator=(NewGuardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewGuardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewGuardMessage* internal_default_instance() {
    return reinterpret_cast<const NewGuardMessage*>(
               &_NewGuardMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NewGuardMessage& a, NewGuardMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGuardMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGuardMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewGuardMessage* New() const final {
    return CreateMaybeMessage<NewGuardMessage>(nullptr);
  }

  NewGuardMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewGuardMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewGuardMessage& from);
  void MergeFrom(const NewGuardMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGuardMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.NewGuardMessage";
  }
  protected:
  explicit NewGuardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kTotalCoinFieldNumber = 2,
    kCountFieldNumber = 3,
    kDurationLevelFieldNumber = 4,
    kBuyTypeFieldNumber = 5,
  };
  // .vNerve.bilibili.live.GuardLevel level = 1;
  void clear_level();
  ::vNerve::bilibili::live::GuardLevel level() const;
  void set_level(::vNerve::bilibili::live::GuardLevel value);
  private:
  ::vNerve::bilibili::live::GuardLevel _internal_level() const;
  void _internal_set_level(::vNerve::bilibili::live::GuardLevel value);
  public:

  // uint32 total_coin = 2;
  void clear_total_coin();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_coin() const;
  void set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_coin() const;
  void _internal_set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.bilibili.live.GuardDurationLevel duration_level = 4;
  void clear_duration_level();
  ::vNerve::bilibili::live::GuardDurationLevel duration_level() const;
  void set_duration_level(::vNerve::bilibili::live::GuardDurationLevel value);
  private:
  ::vNerve::bilibili::live::GuardDurationLevel _internal_duration_level() const;
  void _internal_set_duration_level(::vNerve::bilibili::live::GuardDurationLevel value);
  public:

  // .vNerve.bilibili.live.GuardBuyType buy_type = 5;
  void clear_buy_type();
  ::vNerve::bilibili::live::GuardBuyType buy_type() const;
  void set_buy_type(::vNerve::bilibili::live::GuardBuyType value);
  private:
  ::vNerve::bilibili::live::GuardBuyType _internal_buy_type() const;
  void _internal_set_buy_type(::vNerve::bilibili::live::GuardBuyType value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.NewGuardMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  int duration_level_;
  int buy_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UserBlockedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.UserBlockedMessage) */ {
 public:
  UserBlockedMessage();
  virtual ~UserBlockedMessage();

  UserBlockedMessage(const UserBlockedMessage& from);
  UserBlockedMessage(UserBlockedMessage&& from) noexcept
    : UserBlockedMessage() {
    *this = ::std::move(from);
  }

  inline UserBlockedMessage& operator=(const UserBlockedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBlockedMessage& operator=(UserBlockedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserBlockedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBlockedMessage* internal_default_instance() {
    return reinterpret_cast<const UserBlockedMessage*>(
               &_UserBlockedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserBlockedMessage& a, UserBlockedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserBlockedMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserBlockedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserBlockedMessage* New() const final {
    return CreateMaybeMessage<UserBlockedMessage>(nullptr);
  }

  UserBlockedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserBlockedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserBlockedMessage& from);
  void MergeFrom(const UserBlockedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBlockedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.UserBlockedMessage";
  }
  protected:
  explicit UserBlockedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.UserBlockedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserMessage

// .vNerve.bilibili.live.UserInfo user = 1;
inline bool UserMessage::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserMessage::has_user() const {
  return _internal_has_user();
}
inline void UserMessage::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::vNerve::bilibili::live::UserInfo& UserMessage::_internal_user() const {
  const ::vNerve::bilibili::live::UserInfo* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vNerve::bilibili::live::UserInfo*>(
      &::vNerve::bilibili::live::_UserInfo_default_instance_);
}
inline const ::vNerve::bilibili::live::UserInfo& UserMessage::user() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.user)
  return _internal_user();
}
inline ::vNerve::bilibili::live::UserInfo* UserMessage::release_user() {
  auto temp = unsafe_arena_release_user();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vNerve::bilibili::live::UserInfo* UserMessage::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.user)
  
  ::vNerve::bilibili::live::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::vNerve::bilibili::live::UserInfo* UserMessage::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::vNerve::bilibili::live::UserInfo>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::vNerve::bilibili::live::UserInfo* UserMessage::mutable_user() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.user)
  return _internal_mutable_user();
}
inline void UserMessage::set_allocated_user(::vNerve::bilibili::live::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserMessage.user)
}

// .vNerve.bilibili.live.DanmakuMessage danmaku = 2;
inline bool UserMessage::_internal_has_danmaku() const {
  return payload_case() == kDanmaku;
}
inline bool UserMessage::has_danmaku() const {
  return _internal_has_danmaku();
}
inline void UserMessage::set_has_danmaku() {
  _oneof_case_[0] = kDanmaku;
}
inline void UserMessage::clear_danmaku() {
  if (_internal_has_danmaku()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.danmaku_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::DanmakuMessage* UserMessage::release_danmaku() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.danmaku)
  if (_internal_has_danmaku()) {
    clear_has_payload();
      ::vNerve::bilibili::live::DanmakuMessage* temp = payload_.danmaku_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.danmaku_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::DanmakuMessage& UserMessage::_internal_danmaku() const {
  return _internal_has_danmaku()
      ? *payload_.danmaku_
      : *reinterpret_cast< ::vNerve::bilibili::live::DanmakuMessage*>(&::vNerve::bilibili::live::_DanmakuMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::DanmakuMessage& UserMessage::danmaku() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.danmaku)
  return _internal_danmaku();
}
inline ::vNerve::bilibili::live::DanmakuMessage* UserMessage::unsafe_arena_release_danmaku() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.danmaku)
  if (_internal_has_danmaku()) {
    clear_has_payload();
    ::vNerve::bilibili::live::DanmakuMessage* temp = payload_.danmaku_;
    payload_.danmaku_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_danmaku(::vNerve::bilibili::live::DanmakuMessage* danmaku) {
  clear_payload();
  if (danmaku) {
    set_has_danmaku();
    payload_.danmaku_ = danmaku;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.danmaku)
}
inline ::vNerve::bilibili::live::DanmakuMessage* UserMessage::_internal_mutable_danmaku() {
  if (!_internal_has_danmaku()) {
    clear_payload();
    set_has_danmaku();
    payload_.danmaku_ = CreateMaybeMessage< ::vNerve::bilibili::live::DanmakuMessage >(
        GetArenaNoVirtual());
  }
  return payload_.danmaku_;
}
inline ::vNerve::bilibili::live::DanmakuMessage* UserMessage::mutable_danmaku() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.danmaku)
  return _internal_mutable_danmaku();
}

// .vNerve.bilibili.live.GiftMessage gift = 3;
inline bool UserMessage::_internal_has_gift() const {
  return payload_case() == kGift;
}
inline bool UserMessage::has_gift() const {
  return _internal_has_gift();
}
inline void UserMessage::set_has_gift() {
  _oneof_case_[0] = kGift;
}
inline void UserMessage::clear_gift() {
  if (_internal_has_gift()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.gift_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::GiftMessage* UserMessage::release_gift() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.gift)
  if (_internal_has_gift()) {
    clear_has_payload();
      ::vNerve::bilibili::live::GiftMessage* temp = payload_.gift_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::GiftMessage& UserMessage::_internal_gift() const {
  return _internal_has_gift()
      ? *payload_.gift_
      : *reinterpret_cast< ::vNerve::bilibili::live::GiftMessage*>(&::vNerve::bilibili::live::_GiftMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::GiftMessage& UserMessage::gift() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.gift)
  return _internal_gift();
}
inline ::vNerve::bilibili::live::GiftMessage* UserMessage::unsafe_arena_release_gift() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.gift)
  if (_internal_has_gift()) {
    clear_has_payload();
    ::vNerve::bilibili::live::GiftMessage* temp = payload_.gift_;
    payload_.gift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_gift(::vNerve::bilibili::live::GiftMessage* gift) {
  clear_payload();
  if (gift) {
    set_has_gift();
    payload_.gift_ = gift;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.gift)
}
inline ::vNerve::bilibili::live::GiftMessage* UserMessage::_internal_mutable_gift() {
  if (!_internal_has_gift()) {
    clear_payload();
    set_has_gift();
    payload_.gift_ = CreateMaybeMessage< ::vNerve::bilibili::live::GiftMessage >(
        GetArenaNoVirtual());
  }
  return payload_.gift_;
}
inline ::vNerve::bilibili::live::GiftMessage* UserMessage::mutable_gift() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.gift)
  return _internal_mutable_gift();
}

// .vNerve.bilibili.live.SuperChatMessage super_chat = 4;
inline bool UserMessage::_internal_has_super_chat() const {
  return payload_case() == kSuperChat;
}
inline bool UserMessage::has_super_chat() const {
  return _internal_has_super_chat();
}
inline void UserMessage::set_has_super_chat() {
  _oneof_case_[0] = kSuperChat;
}
inline void UserMessage::clear_super_chat() {
  if (_internal_has_super_chat()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.super_chat_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::SuperChatMessage* UserMessage::release_super_chat() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.super_chat)
  if (_internal_has_super_chat()) {
    clear_has_payload();
      ::vNerve::bilibili::live::SuperChatMessage* temp = payload_.super_chat_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.super_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::SuperChatMessage& UserMessage::_internal_super_chat() const {
  return _internal_has_super_chat()
      ? *payload_.super_chat_
      : *reinterpret_cast< ::vNerve::bilibili::live::SuperChatMessage*>(&::vNerve::bilibili::live::_SuperChatMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::SuperChatMessage& UserMessage::super_chat() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.super_chat)
  return _internal_super_chat();
}
inline ::vNerve::bilibili::live::SuperChatMessage* UserMessage::unsafe_arena_release_super_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.super_chat)
  if (_internal_has_super_chat()) {
    clear_has_payload();
    ::vNerve::bilibili::live::SuperChatMessage* temp = payload_.super_chat_;
    payload_.super_chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_super_chat(::vNerve::bilibili::live::SuperChatMessage* super_chat) {
  clear_payload();
  if (super_chat) {
    set_has_super_chat();
    payload_.super_chat_ = super_chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.super_chat)
}
inline ::vNerve::bilibili::live::SuperChatMessage* UserMessage::_internal_mutable_super_chat() {
  if (!_internal_has_super_chat()) {
    clear_payload();
    set_has_super_chat();
    payload_.super_chat_ = CreateMaybeMessage< ::vNerve::bilibili::live::SuperChatMessage >(
        GetArenaNoVirtual());
  }
  return payload_.super_chat_;
}
inline ::vNerve::bilibili::live::SuperChatMessage* UserMessage::mutable_super_chat() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.super_chat)
  return _internal_mutable_super_chat();
}

// .vNerve.bilibili.live.NewGuardMessage new_guard = 5;
inline bool UserMessage::_internal_has_new_guard() const {
  return payload_case() == kNewGuard;
}
inline bool UserMessage::has_new_guard() const {
  return _internal_has_new_guard();
}
inline void UserMessage::set_has_new_guard() {
  _oneof_case_[0] = kNewGuard;
}
inline void UserMessage::clear_new_guard() {
  if (_internal_has_new_guard()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.new_guard_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::NewGuardMessage* UserMessage::release_new_guard() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.new_guard)
  if (_internal_has_new_guard()) {
    clear_has_payload();
      ::vNerve::bilibili::live::NewGuardMessage* temp = payload_.new_guard_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.new_guard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::NewGuardMessage& UserMessage::_internal_new_guard() const {
  return _internal_has_new_guard()
      ? *payload_.new_guard_
      : *reinterpret_cast< ::vNerve::bilibili::live::NewGuardMessage*>(&::vNerve::bilibili::live::_NewGuardMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::NewGuardMessage& UserMessage::new_guard() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.new_guard)
  return _internal_new_guard();
}
inline ::vNerve::bilibili::live::NewGuardMessage* UserMessage::unsafe_arena_release_new_guard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.new_guard)
  if (_internal_has_new_guard()) {
    clear_has_payload();
    ::vNerve::bilibili::live::NewGuardMessage* temp = payload_.new_guard_;
    payload_.new_guard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_new_guard(::vNerve::bilibili::live::NewGuardMessage* new_guard) {
  clear_payload();
  if (new_guard) {
    set_has_new_guard();
    payload_.new_guard_ = new_guard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.new_guard)
}
inline ::vNerve::bilibili::live::NewGuardMessage* UserMessage::_internal_mutable_new_guard() {
  if (!_internal_has_new_guard()) {
    clear_payload();
    set_has_new_guard();
    payload_.new_guard_ = CreateMaybeMessage< ::vNerve::bilibili::live::NewGuardMessage >(
        GetArenaNoVirtual());
  }
  return payload_.new_guard_;
}
inline ::vNerve::bilibili::live::NewGuardMessage* UserMessage::mutable_new_guard() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.new_guard)
  return _internal_mutable_new_guard();
}

// .vNerve.bilibili.live.WelcomeVIPMessage welcome_vip = 6;
inline bool UserMessage::_internal_has_welcome_vip() const {
  return payload_case() == kWelcomeVip;
}
inline bool UserMessage::has_welcome_vip() const {
  return _internal_has_welcome_vip();
}
inline void UserMessage::set_has_welcome_vip() {
  _oneof_case_[0] = kWelcomeVip;
}
inline void UserMessage::clear_welcome_vip() {
  if (_internal_has_welcome_vip()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.welcome_vip_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::WelcomeVIPMessage* UserMessage::release_welcome_vip() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.welcome_vip)
  if (_internal_has_welcome_vip()) {
    clear_has_payload();
      ::vNerve::bilibili::live::WelcomeVIPMessage* temp = payload_.welcome_vip_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.welcome_vip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::WelcomeVIPMessage& UserMessage::_internal_welcome_vip() const {
  return _internal_has_welcome_vip()
      ? *payload_.welcome_vip_
      : *reinterpret_cast< ::vNerve::bilibili::live::WelcomeVIPMessage*>(&::vNerve::bilibili::live::_WelcomeVIPMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::WelcomeVIPMessage& UserMessage::welcome_vip() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.welcome_vip)
  return _internal_welcome_vip();
}
inline ::vNerve::bilibili::live::WelcomeVIPMessage* UserMessage::unsafe_arena_release_welcome_vip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.welcome_vip)
  if (_internal_has_welcome_vip()) {
    clear_has_payload();
    ::vNerve::bilibili::live::WelcomeVIPMessage* temp = payload_.welcome_vip_;
    payload_.welcome_vip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_welcome_vip(::vNerve::bilibili::live::WelcomeVIPMessage* welcome_vip) {
  clear_payload();
  if (welcome_vip) {
    set_has_welcome_vip();
    payload_.welcome_vip_ = welcome_vip;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.welcome_vip)
}
inline ::vNerve::bilibili::live::WelcomeVIPMessage* UserMessage::_internal_mutable_welcome_vip() {
  if (!_internal_has_welcome_vip()) {
    clear_payload();
    set_has_welcome_vip();
    payload_.welcome_vip_ = CreateMaybeMessage< ::vNerve::bilibili::live::WelcomeVIPMessage >(
        GetArenaNoVirtual());
  }
  return payload_.welcome_vip_;
}
inline ::vNerve::bilibili::live::WelcomeVIPMessage* UserMessage::mutable_welcome_vip() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.welcome_vip)
  return _internal_mutable_welcome_vip();
}

// .vNerve.bilibili.live.WelcomeGuardMessage welcome_guard = 7;
inline bool UserMessage::_internal_has_welcome_guard() const {
  return payload_case() == kWelcomeGuard;
}
inline bool UserMessage::has_welcome_guard() const {
  return _internal_has_welcome_guard();
}
inline void UserMessage::set_has_welcome_guard() {
  _oneof_case_[0] = kWelcomeGuard;
}
inline void UserMessage::clear_welcome_guard() {
  if (_internal_has_welcome_guard()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.welcome_guard_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::WelcomeGuardMessage* UserMessage::release_welcome_guard() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.welcome_guard)
  if (_internal_has_welcome_guard()) {
    clear_has_payload();
      ::vNerve::bilibili::live::WelcomeGuardMessage* temp = payload_.welcome_guard_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.welcome_guard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::WelcomeGuardMessage& UserMessage::_internal_welcome_guard() const {
  return _internal_has_welcome_guard()
      ? *payload_.welcome_guard_
      : *reinterpret_cast< ::vNerve::bilibili::live::WelcomeGuardMessage*>(&::vNerve::bilibili::live::_WelcomeGuardMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::WelcomeGuardMessage& UserMessage::welcome_guard() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.welcome_guard)
  return _internal_welcome_guard();
}
inline ::vNerve::bilibili::live::WelcomeGuardMessage* UserMessage::unsafe_arena_release_welcome_guard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.welcome_guard)
  if (_internal_has_welcome_guard()) {
    clear_has_payload();
    ::vNerve::bilibili::live::WelcomeGuardMessage* temp = payload_.welcome_guard_;
    payload_.welcome_guard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_welcome_guard(::vNerve::bilibili::live::WelcomeGuardMessage* welcome_guard) {
  clear_payload();
  if (welcome_guard) {
    set_has_welcome_guard();
    payload_.welcome_guard_ = welcome_guard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.welcome_guard)
}
inline ::vNerve::bilibili::live::WelcomeGuardMessage* UserMessage::_internal_mutable_welcome_guard() {
  if (!_internal_has_welcome_guard()) {
    clear_payload();
    set_has_welcome_guard();
    payload_.welcome_guard_ = CreateMaybeMessage< ::vNerve::bilibili::live::WelcomeGuardMessage >(
        GetArenaNoVirtual());
  }
  return payload_.welcome_guard_;
}
inline ::vNerve::bilibili::live::WelcomeGuardMessage* UserMessage::mutable_welcome_guard() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.welcome_guard)
  return _internal_mutable_welcome_guard();
}

// .vNerve.bilibili.live.UserBlockedMessage user_blocked = 16;
inline bool UserMessage::_internal_has_user_blocked() const {
  return payload_case() == kUserBlocked;
}
inline bool UserMessage::has_user_blocked() const {
  return _internal_has_user_blocked();
}
inline void UserMessage::set_has_user_blocked() {
  _oneof_case_[0] = kUserBlocked;
}
inline void UserMessage::clear_user_blocked() {
  if (_internal_has_user_blocked()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.user_blocked_;
    }
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::live::UserBlockedMessage* UserMessage::release_user_blocked() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserMessage.user_blocked)
  if (_internal_has_user_blocked()) {
    clear_has_payload();
      ::vNerve::bilibili::live::UserBlockedMessage* temp = payload_.user_blocked_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.user_blocked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::UserBlockedMessage& UserMessage::_internal_user_blocked() const {
  return _internal_has_user_blocked()
      ? *payload_.user_blocked_
      : *reinterpret_cast< ::vNerve::bilibili::live::UserBlockedMessage*>(&::vNerve::bilibili::live::_UserBlockedMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::UserBlockedMessage& UserMessage::user_blocked() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserMessage.user_blocked)
  return _internal_user_blocked();
}
inline ::vNerve::bilibili::live::UserBlockedMessage* UserMessage::unsafe_arena_release_user_blocked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserMessage.user_blocked)
  if (_internal_has_user_blocked()) {
    clear_has_payload();
    ::vNerve::bilibili::live::UserBlockedMessage* temp = payload_.user_blocked_;
    payload_.user_blocked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserMessage::unsafe_arena_set_allocated_user_blocked(::vNerve::bilibili::live::UserBlockedMessage* user_blocked) {
  clear_payload();
  if (user_blocked) {
    set_has_user_blocked();
    payload_.user_blocked_ = user_blocked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserMessage.user_blocked)
}
inline ::vNerve::bilibili::live::UserBlockedMessage* UserMessage::_internal_mutable_user_blocked() {
  if (!_internal_has_user_blocked()) {
    clear_payload();
    set_has_user_blocked();
    payload_.user_blocked_ = CreateMaybeMessage< ::vNerve::bilibili::live::UserBlockedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.user_blocked_;
}
inline ::vNerve::bilibili::live::UserBlockedMessage* UserMessage::mutable_user_blocked() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserMessage.user_blocked)
  return _internal_mutable_user_blocked();
}

inline bool UserMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void UserMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline UserMessage::PayloadCase UserMessage::payload_case() const {
  return UserMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserInfo

// uint64 uid = 1;
inline void UserInfo::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserInfo::uid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.uid)
  return _internal_uid();
}
inline void UserInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uid_ = value;
}
inline void UserInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.uid)
}

// string name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.name)
  return _internal_name();
}
inline void UserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void UserInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.UserInfo.name)
}
inline void UserInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.UserInfo.name)
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserInfo.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserInfo.name)
}
inline std::string* UserInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserInfo.name)
}

// string avatar_url = 3;
inline void UserInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.avatar_url)
  return _internal_avatar_url();
}
inline void UserInfo::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.avatar_url)
}
inline std::string* UserInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& UserInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void UserInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void UserInfo::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.UserInfo.avatar_url)
}
inline std::string* UserInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserInfo.avatar_url)
  
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserInfo.avatar_url)
}
inline std::string* UserInfo::unsafe_arena_release_avatar_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserInfo.avatar_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return avatar_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserInfo::unsafe_arena_set_allocated_avatar_url(
    std::string* avatar_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avatar_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserInfo.avatar_url)
}

// int32 user_level = 4;
inline void UserInfo::clear_user_level() {
  user_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_user_level() const {
  return user_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::user_level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.user_level)
  return _internal_user_level();
}
inline void UserInfo::_internal_set_user_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_level_ = value;
}
inline void UserInfo::set_user_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.user_level)
}

// fixed32 user_level_border_color = 5;
inline void UserInfo::clear_user_level_border_color() {
  user_level_border_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_user_level_border_color() const {
  return user_level_border_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_level_border_color() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.user_level_border_color)
  return _internal_user_level_border_color();
}
inline void UserInfo::_internal_set_user_level_border_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_level_border_color_ = value;
}
inline void UserInfo::set_user_level_border_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_level_border_color(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.user_level_border_color)
}

// bool admin = 6;
inline bool UserInfo::_internal_has_admin() const {
  return admin_optional_case() == kAdmin;
}
inline void UserInfo::set_has_admin() {
  _oneof_case_[0] = kAdmin;
}
inline void UserInfo::clear_admin() {
  if (_internal_has_admin()) {
    admin_optional_.admin_ = false;
    clear_has_admin_optional();
  }
}
inline bool UserInfo::_internal_admin() const {
  if (_internal_has_admin()) {
    return admin_optional_.admin_;
  }
  return false;
}
inline void UserInfo::_internal_set_admin(bool value) {
  if (!_internal_has_admin()) {
    clear_admin_optional();
    set_has_admin();
  }
  admin_optional_.admin_ = value;
}
inline bool UserInfo::admin() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.admin)
  return _internal_admin();
}
inline void UserInfo::set_admin(bool value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.admin)
}

// bool main_vip = 7;
inline bool UserInfo::_internal_has_main_vip() const {
  return main_vip_optional_case() == kMainVip;
}
inline void UserInfo::set_has_main_vip() {
  _oneof_case_[1] = kMainVip;
}
inline void UserInfo::clear_main_vip() {
  if (_internal_has_main_vip()) {
    main_vip_optional_.main_vip_ = false;
    clear_has_main_vip_optional();
  }
}
inline bool UserInfo::_internal_main_vip() const {
  if (_internal_has_main_vip()) {
    return main_vip_optional_.main_vip_;
  }
  return false;
}
inline void UserInfo::_internal_set_main_vip(bool value) {
  if (!_internal_has_main_vip()) {
    clear_main_vip_optional();
    set_has_main_vip();
  }
  main_vip_optional_.main_vip_ = value;
}
inline bool UserInfo::main_vip() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.main_vip)
  return _internal_main_vip();
}
inline void UserInfo::set_main_vip(bool value) {
  _internal_set_main_vip(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.main_vip)
}

// .vNerve.bilibili.live.LiveVipLevel live_vip_level = 8;
inline void UserInfo::clear_live_vip_level() {
  live_vip_level_ = 0;
}
inline ::vNerve::bilibili::live::LiveVipLevel UserInfo::_internal_live_vip_level() const {
  return static_cast< ::vNerve::bilibili::live::LiveVipLevel >(live_vip_level_);
}
inline ::vNerve::bilibili::live::LiveVipLevel UserInfo::live_vip_level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.live_vip_level)
  return _internal_live_vip_level();
}
inline void UserInfo::_internal_set_live_vip_level(::vNerve::bilibili::live::LiveVipLevel value) {
  
  live_vip_level_ = value;
}
inline void UserInfo::set_live_vip_level(::vNerve::bilibili::live::LiveVipLevel value) {
  _internal_set_live_vip_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.live_vip_level)
}

// string title = 9;
inline void UserInfo::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UserInfo::title() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.title)
  return _internal_title();
}
inline void UserInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.title)
}
inline std::string* UserInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserInfo.title)
  return _internal_mutable_title();
}
inline const std::string& UserInfo::_internal_title() const {
  return title_.Get();
}
inline void UserInfo::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void UserInfo::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.UserInfo.title)
}
inline void UserInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.UserInfo.title)
}
inline void UserInfo::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.UserInfo.title)
}
inline std::string* UserInfo::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UserInfo::release_title() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserInfo.title)
  
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserInfo.title)
}
inline std::string* UserInfo::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.UserInfo.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserInfo::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.UserInfo.title)
}

// .vNerve.bilibili.live.MedalInfo medal = 10;
inline bool UserInfo::_internal_has_medal() const {
  return this != internal_default_instance() && medal_ != nullptr;
}
inline bool UserInfo::has_medal() const {
  return _internal_has_medal();
}
inline void UserInfo::clear_medal() {
  if (GetArenaNoVirtual() == nullptr && medal_ != nullptr) {
    delete medal_;
  }
  medal_ = nullptr;
}
inline const ::vNerve::bilibili::live::MedalInfo& UserInfo::_internal_medal() const {
  const ::vNerve::bilibili::live::MedalInfo* p = medal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vNerve::bilibili::live::MedalInfo*>(
      &::vNerve::bilibili::live::_MedalInfo_default_instance_);
}
inline const ::vNerve::bilibili::live::MedalInfo& UserInfo::medal() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.medal)
  return _internal_medal();
}
inline ::vNerve::bilibili::live::MedalInfo* UserInfo::release_medal() {
  auto temp = unsafe_arena_release_medal();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vNerve::bilibili::live::MedalInfo* UserInfo::unsafe_arena_release_medal() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.UserInfo.medal)
  
  ::vNerve::bilibili::live::MedalInfo* temp = medal_;
  medal_ = nullptr;
  return temp;
}
inline ::vNerve::bilibili::live::MedalInfo* UserInfo::_internal_mutable_medal() {
  
  if (medal_ == nullptr) {
    auto* p = CreateMaybeMessage<::vNerve::bilibili::live::MedalInfo>(GetArenaNoVirtual());
    medal_ = p;
  }
  return medal_;
}
inline ::vNerve::bilibili::live::MedalInfo* UserInfo::mutable_medal() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.UserInfo.medal)
  return _internal_mutable_medal();
}
inline void UserInfo::set_allocated_medal(::vNerve::bilibili::live::MedalInfo* medal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete medal_;
  }
  if (medal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(medal);
    if (message_arena != submessage_arena) {
      medal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medal, submessage_arena);
    }
    
  } else {
    
  }
  medal_ = medal;
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.UserInfo.medal)
}

// .vNerve.bilibili.live.GuardLevel guard_level = 11;
inline void UserInfo::clear_guard_level() {
  guard_level_ = 0;
}
inline ::vNerve::bilibili::live::GuardLevel UserInfo::_internal_guard_level() const {
  return static_cast< ::vNerve::bilibili::live::GuardLevel >(guard_level_);
}
inline ::vNerve::bilibili::live::GuardLevel UserInfo::guard_level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.guard_level)
  return _internal_guard_level();
}
inline void UserInfo::_internal_set_guard_level(::vNerve::bilibili::live::GuardLevel value) {
  
  guard_level_ = value;
}
inline void UserInfo::set_guard_level(::vNerve::bilibili::live::GuardLevel value) {
  _internal_set_guard_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.guard_level)
}

// bool phone_verified = 12;
inline void UserInfo::clear_phone_verified() {
  phone_verified_ = false;
}
inline bool UserInfo::_internal_phone_verified() const {
  return phone_verified_;
}
inline bool UserInfo::phone_verified() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.phone_verified)
  return _internal_phone_verified();
}
inline void UserInfo::_internal_set_phone_verified(bool value) {
  
  phone_verified_ = value;
}
inline void UserInfo::set_phone_verified(bool value) {
  _internal_set_phone_verified(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.phone_verified)
}

// bool regular_user = 13;
inline void UserInfo::clear_regular_user() {
  regular_user_ = false;
}
inline bool UserInfo::_internal_regular_user() const {
  return regular_user_;
}
inline bool UserInfo::regular_user() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.UserInfo.regular_user)
  return _internal_regular_user();
}
inline void UserInfo::_internal_set_regular_user(bool value) {
  
  regular_user_ = value;
}
inline void UserInfo::set_regular_user(bool value) {
  _internal_set_regular_user(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.UserInfo.regular_user)
}

inline bool UserInfo::has_admin_optional() const {
  return admin_optional_case() != ADMIN_OPTIONAL_NOT_SET;
}
inline void UserInfo::clear_has_admin_optional() {
  _oneof_case_[0] = ADMIN_OPTIONAL_NOT_SET;
}
inline bool UserInfo::has_main_vip_optional() const {
  return main_vip_optional_case() != MAIN_VIP_OPTIONAL_NOT_SET;
}
inline void UserInfo::clear_has_main_vip_optional() {
  _oneof_case_[1] = MAIN_VIP_OPTIONAL_NOT_SET;
}
inline UserInfo::AdminOptionalCase UserInfo::admin_optional_case() const {
  return UserInfo::AdminOptionalCase(_oneof_case_[0]);
}
inline UserInfo::MainVipOptionalCase UserInfo::main_vip_optional_case() const {
  return UserInfo::MainVipOptionalCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// MedalInfo

// string medal_name = 1;
inline void MedalInfo::clear_medal_name() {
  medal_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MedalInfo::medal_name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.medal_name)
  return _internal_medal_name();
}
inline void MedalInfo::set_medal_name(const std::string& value) {
  _internal_set_medal_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.medal_name)
}
inline std::string* MedalInfo::mutable_medal_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.MedalInfo.medal_name)
  return _internal_mutable_medal_name();
}
inline const std::string& MedalInfo::_internal_medal_name() const {
  return medal_name_.Get();
}
inline void MedalInfo::_internal_set_medal_name(const std::string& value) {
  
  medal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MedalInfo::set_medal_name(std::string&& value) {
  
  medal_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.MedalInfo.medal_name)
}
inline void MedalInfo::set_medal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  medal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.MedalInfo.medal_name)
}
inline void MedalInfo::set_medal_name(const char* value,
    size_t size) {
  
  medal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.MedalInfo.medal_name)
}
inline std::string* MedalInfo::_internal_mutable_medal_name() {
  
  return medal_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MedalInfo::release_medal_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.MedalInfo.medal_name)
  
  return medal_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MedalInfo::set_allocated_medal_name(std::string* medal_name) {
  if (medal_name != nullptr) {
    
  } else {
    
  }
  medal_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), medal_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.MedalInfo.medal_name)
}
inline std::string* MedalInfo::unsafe_arena_release_medal_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.MedalInfo.medal_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return medal_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MedalInfo::unsafe_arena_set_allocated_medal_name(
    std::string* medal_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (medal_name != nullptr) {
    
  } else {
    
  }
  medal_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      medal_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.MedalInfo.medal_name)
}

// uint32 medal_level = 2;
inline void MedalInfo::clear_medal_level() {
  medal_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::_internal_medal_level() const {
  return medal_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::medal_level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.medal_level)
  return _internal_medal_level();
}
inline void MedalInfo::_internal_set_medal_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  medal_level_ = value;
}
inline void MedalInfo::set_medal_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.medal_level)
}

// fixed32 medal_color = 3;
inline void MedalInfo::clear_medal_color() {
  medal_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::_internal_medal_color() const {
  return medal_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::medal_color() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.medal_color)
  return _internal_medal_color();
}
inline void MedalInfo::_internal_set_medal_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  medal_color_ = value;
}
inline void MedalInfo::set_medal_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_color(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.medal_color)
}

// uint64 streamer_uid = 4;
inline void MedalInfo::clear_streamer_uid() {
  streamer_uid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MedalInfo::_internal_streamer_uid() const {
  return streamer_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MedalInfo::streamer_uid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.streamer_uid)
  return _internal_streamer_uid();
}
inline void MedalInfo::_internal_set_streamer_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  streamer_uid_ = value;
}
inline void MedalInfo::set_streamer_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_streamer_uid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.streamer_uid)
}

// string streamer_name = 5;
inline void MedalInfo::clear_streamer_name() {
  streamer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MedalInfo::streamer_name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.streamer_name)
  return _internal_streamer_name();
}
inline void MedalInfo::set_streamer_name(const std::string& value) {
  _internal_set_streamer_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.streamer_name)
}
inline std::string* MedalInfo::mutable_streamer_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.MedalInfo.streamer_name)
  return _internal_mutable_streamer_name();
}
inline const std::string& MedalInfo::_internal_streamer_name() const {
  return streamer_name_.Get();
}
inline void MedalInfo::_internal_set_streamer_name(const std::string& value) {
  
  streamer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MedalInfo::set_streamer_name(std::string&& value) {
  
  streamer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.MedalInfo.streamer_name)
}
inline void MedalInfo::set_streamer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.MedalInfo.streamer_name)
}
inline void MedalInfo::set_streamer_name(const char* value,
    size_t size) {
  
  streamer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.MedalInfo.streamer_name)
}
inline std::string* MedalInfo::_internal_mutable_streamer_name() {
  
  return streamer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MedalInfo::release_streamer_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.MedalInfo.streamer_name)
  
  return streamer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MedalInfo::set_allocated_streamer_name(std::string* streamer_name) {
  if (streamer_name != nullptr) {
    
  } else {
    
  }
  streamer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamer_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.MedalInfo.streamer_name)
}
inline std::string* MedalInfo::unsafe_arena_release_streamer_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.MedalInfo.streamer_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return streamer_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MedalInfo::unsafe_arena_set_allocated_streamer_name(
    std::string* streamer_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (streamer_name != nullptr) {
    
  } else {
    
  }
  streamer_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      streamer_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.MedalInfo.streamer_name)
}

// uint32 streamer_roomid = 6;
inline void MedalInfo::clear_streamer_roomid() {
  streamer_roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::_internal_streamer_roomid() const {
  return streamer_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MedalInfo::streamer_roomid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.MedalInfo.streamer_roomid)
  return _internal_streamer_roomid();
}
inline void MedalInfo::_internal_set_streamer_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  streamer_roomid_ = value;
}
inline void MedalInfo::set_streamer_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_streamer_roomid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.MedalInfo.streamer_roomid)
}

// -------------------------------------------------------------------

// DanmakuMessage

// string message = 1;
inline void DanmakuMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DanmakuMessage::message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.DanmakuMessage.message)
  return _internal_message();
}
inline void DanmakuMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.DanmakuMessage.message)
}
inline std::string* DanmakuMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.DanmakuMessage.message)
  return _internal_mutable_message();
}
inline const std::string& DanmakuMessage::_internal_message() const {
  return message_.Get();
}
inline void DanmakuMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DanmakuMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.DanmakuMessage.message)
}
inline void DanmakuMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.DanmakuMessage.message)
}
inline void DanmakuMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.DanmakuMessage.message)
}
inline std::string* DanmakuMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DanmakuMessage::release_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.DanmakuMessage.message)
  
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DanmakuMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.DanmakuMessage.message)
}
inline std::string* DanmakuMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.DanmakuMessage.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DanmakuMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.DanmakuMessage.message)
}

// .vNerve.bilibili.live.LotteryDanmakuType lottery_type = 2;
inline void DanmakuMessage::clear_lottery_type() {
  lottery_type_ = 0;
}
inline ::vNerve::bilibili::live::LotteryDanmakuType DanmakuMessage::_internal_lottery_type() const {
  return static_cast< ::vNerve::bilibili::live::LotteryDanmakuType >(lottery_type_);
}
inline ::vNerve::bilibili::live::LotteryDanmakuType DanmakuMessage::lottery_type() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.DanmakuMessage.lottery_type)
  return _internal_lottery_type();
}
inline void DanmakuMessage::_internal_set_lottery_type(::vNerve::bilibili::live::LotteryDanmakuType value) {
  
  lottery_type_ = value;
}
inline void DanmakuMessage::set_lottery_type(::vNerve::bilibili::live::LotteryDanmakuType value) {
  _internal_set_lottery_type(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.DanmakuMessage.lottery_type)
}

// -------------------------------------------------------------------

// SuperChatMessage

// string message = 1;
inline void SuperChatMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& SuperChatMessage::message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.message)
  return _internal_message();
}
inline void SuperChatMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.message)
}
inline std::string* SuperChatMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.SuperChatMessage.message)
  return _internal_mutable_message();
}
inline const std::string& SuperChatMessage::_internal_message() const {
  return message_.Get();
}
inline void SuperChatMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void SuperChatMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.SuperChatMessage.message)
}
inline void SuperChatMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.SuperChatMessage.message)
}
inline void SuperChatMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.SuperChatMessage.message)
}
inline std::string* SuperChatMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* SuperChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.SuperChatMessage.message)
  
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SuperChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.SuperChatMessage.message)
}
inline std::string* SuperChatMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.SuperChatMessage.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SuperChatMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.SuperChatMessage.message)
}

// uint32 id = 3;
inline void SuperChatMessage::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.id)
  return _internal_id();
}
inline void SuperChatMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void SuperChatMessage::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.id)
}

// string token = 4;
inline void SuperChatMessage::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& SuperChatMessage::token() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.token)
  return _internal_token();
}
inline void SuperChatMessage::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.token)
}
inline std::string* SuperChatMessage::mutable_token() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.SuperChatMessage.token)
  return _internal_mutable_token();
}
inline const std::string& SuperChatMessage::_internal_token() const {
  return token_.Get();
}
inline void SuperChatMessage::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void SuperChatMessage::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.SuperChatMessage.token)
}
inline void SuperChatMessage::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.SuperChatMessage.token)
}
inline void SuperChatMessage::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.SuperChatMessage.token)
}
inline std::string* SuperChatMessage::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* SuperChatMessage::release_token() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.SuperChatMessage.token)
  
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SuperChatMessage::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.SuperChatMessage.token)
}
inline std::string* SuperChatMessage::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.SuperChatMessage.token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SuperChatMessage::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.SuperChatMessage.token)
}

// uint32 price_cny = 5;
inline void SuperChatMessage::clear_price_cny() {
  price_cny_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::_internal_price_cny() const {
  return price_cny_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::price_cny() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.price_cny)
  return _internal_price_cny();
}
inline void SuperChatMessage::_internal_set_price_cny(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_cny_ = value;
}
inline void SuperChatMessage::set_price_cny(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_cny(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.price_cny)
}

// uint32 price_coin = 6;
inline void SuperChatMessage::clear_price_coin() {
  price_coin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::_internal_price_coin() const {
  return price_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::price_coin() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.price_coin)
  return _internal_price_coin();
}
inline void SuperChatMessage::_internal_set_price_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_coin_ = value;
}
inline void SuperChatMessage::set_price_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price_coin(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.price_coin)
}

// uint32 lasting_time_sec = 7;
inline void SuperChatMessage::clear_lasting_time_sec() {
  lasting_time_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::_internal_lasting_time_sec() const {
  return lasting_time_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuperChatMessage::lasting_time_sec() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.lasting_time_sec)
  return _internal_lasting_time_sec();
}
inline void SuperChatMessage::_internal_set_lasting_time_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lasting_time_sec_ = value;
}
inline void SuperChatMessage::set_lasting_time_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lasting_time_sec(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.lasting_time_sec)
}

// uint64 start_time = 8;
inline void SuperChatMessage::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatMessage::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatMessage::start_time() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.start_time)
  return _internal_start_time();
}
inline void SuperChatMessage::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void SuperChatMessage::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.start_time)
}

// uint64 end_time = 9;
inline void SuperChatMessage::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatMessage::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuperChatMessage::end_time() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.SuperChatMessage.end_time)
  return _internal_end_time();
}
inline void SuperChatMessage::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void SuperChatMessage::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.SuperChatMessage.end_time)
}

// -------------------------------------------------------------------

// GiftMessage

// bool is_gold = 1;
inline void GiftMessage::clear_is_gold() {
  is_gold_ = false;
}
inline bool GiftMessage::_internal_is_gold() const {
  return is_gold_;
}
inline bool GiftMessage::is_gold() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.is_gold)
  return _internal_is_gold();
}
inline void GiftMessage::_internal_set_is_gold(bool value) {
  
  is_gold_ = value;
}
inline void GiftMessage::set_is_gold(bool value) {
  _internal_set_is_gold(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.is_gold)
}

// uint32 total_coin = 2;
inline void GiftMessage::clear_total_coin() {
  total_coin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::_internal_total_coin() const {
  return total_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::total_coin() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.total_coin)
  return _internal_total_coin();
}
inline void GiftMessage::_internal_set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_coin_ = value;
}
inline void GiftMessage::set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_coin(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.total_coin)
}

// uint32 gift_id = 3;
inline void GiftMessage::clear_gift_id() {
  gift_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::_internal_gift_id() const {
  return gift_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::gift_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.gift_id)
  return _internal_gift_id();
}
inline void GiftMessage::_internal_set_gift_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gift_id_ = value;
}
inline void GiftMessage::set_gift_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gift_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.gift_id)
}

// string gift_name = 4;
inline void GiftMessage::clear_gift_name() {
  gift_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GiftMessage::gift_name() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.gift_name)
  return _internal_gift_name();
}
inline void GiftMessage::set_gift_name(const std::string& value) {
  _internal_set_gift_name(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.gift_name)
}
inline std::string* GiftMessage::mutable_gift_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.GiftMessage.gift_name)
  return _internal_mutable_gift_name();
}
inline const std::string& GiftMessage::_internal_gift_name() const {
  return gift_name_.Get();
}
inline void GiftMessage::_internal_set_gift_name(const std::string& value) {
  
  gift_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void GiftMessage::set_gift_name(std::string&& value) {
  
  gift_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.live.GiftMessage.gift_name)
}
inline void GiftMessage::set_gift_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gift_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.live.GiftMessage.gift_name)
}
inline void GiftMessage::set_gift_name(const char* value,
    size_t size) {
  
  gift_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.live.GiftMessage.gift_name)
}
inline std::string* GiftMessage::_internal_mutable_gift_name() {
  
  return gift_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GiftMessage::release_gift_name() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.GiftMessage.gift_name)
  
  return gift_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GiftMessage::set_allocated_gift_name(std::string* gift_name) {
  if (gift_name != nullptr) {
    
  } else {
    
  }
  gift_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gift_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.GiftMessage.gift_name)
}
inline std::string* GiftMessage::unsafe_arena_release_gift_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.GiftMessage.gift_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return gift_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GiftMessage::unsafe_arena_set_allocated_gift_name(
    std::string* gift_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (gift_name != nullptr) {
    
  } else {
    
  }
  gift_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gift_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.GiftMessage.gift_name)
}

// uint32 single_price_coin_raw = 5;
inline void GiftMessage::clear_single_price_coin_raw() {
  single_price_coin_raw_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::_internal_single_price_coin_raw() const {
  return single_price_coin_raw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::single_price_coin_raw() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.single_price_coin_raw)
  return _internal_single_price_coin_raw();
}
inline void GiftMessage::_internal_set_single_price_coin_raw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  single_price_coin_raw_ = value;
}
inline void GiftMessage::set_single_price_coin_raw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_single_price_coin_raw(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.single_price_coin_raw)
}

// uint32 count = 6;
inline void GiftMessage::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GiftMessage::count() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.GiftMessage.count)
  return _internal_count();
}
inline void GiftMessage::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void GiftMessage::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.GiftMessage.count)
}

// -------------------------------------------------------------------

// WelcomeVIPMessage

// .vNerve.bilibili.live.LiveVipLevel level = 1;
inline void WelcomeVIPMessage::clear_level() {
  level_ = 0;
}
inline ::vNerve::bilibili::live::LiveVipLevel WelcomeVIPMessage::_internal_level() const {
  return static_cast< ::vNerve::bilibili::live::LiveVipLevel >(level_);
}
inline ::vNerve::bilibili::live::LiveVipLevel WelcomeVIPMessage::level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WelcomeVIPMessage.level)
  return _internal_level();
}
inline void WelcomeVIPMessage::_internal_set_level(::vNerve::bilibili::live::LiveVipLevel value) {
  
  level_ = value;
}
inline void WelcomeVIPMessage::set_level(::vNerve::bilibili::live::LiveVipLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WelcomeVIPMessage.level)
}

// -------------------------------------------------------------------

// WelcomeGuardMessage

// .vNerve.bilibili.live.GuardLevel level = 1;
inline void WelcomeGuardMessage::clear_level() {
  level_ = 0;
}
inline ::vNerve::bilibili::live::GuardLevel WelcomeGuardMessage::_internal_level() const {
  return static_cast< ::vNerve::bilibili::live::GuardLevel >(level_);
}
inline ::vNerve::bilibili::live::GuardLevel WelcomeGuardMessage::level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.WelcomeGuardMessage.level)
  return _internal_level();
}
inline void WelcomeGuardMessage::_internal_set_level(::vNerve::bilibili::live::GuardLevel value) {
  
  level_ = value;
}
inline void WelcomeGuardMessage::set_level(::vNerve::bilibili::live::GuardLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.WelcomeGuardMessage.level)
}

// -------------------------------------------------------------------

// NewGuardMessage

// .vNerve.bilibili.live.GuardLevel level = 1;
inline void NewGuardMessage::clear_level() {
  level_ = 0;
}
inline ::vNerve::bilibili::live::GuardLevel NewGuardMessage::_internal_level() const {
  return static_cast< ::vNerve::bilibili::live::GuardLevel >(level_);
}
inline ::vNerve::bilibili::live::GuardLevel NewGuardMessage::level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.NewGuardMessage.level)
  return _internal_level();
}
inline void NewGuardMessage::_internal_set_level(::vNerve::bilibili::live::GuardLevel value) {
  
  level_ = value;
}
inline void NewGuardMessage::set_level(::vNerve::bilibili::live::GuardLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.NewGuardMessage.level)
}

// uint32 total_coin = 2;
inline void NewGuardMessage::clear_total_coin() {
  total_coin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewGuardMessage::_internal_total_coin() const {
  return total_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewGuardMessage::total_coin() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.NewGuardMessage.total_coin)
  return _internal_total_coin();
}
inline void NewGuardMessage::_internal_set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_coin_ = value;
}
inline void NewGuardMessage::set_total_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_coin(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.NewGuardMessage.total_coin)
}

// uint32 count = 3;
inline void NewGuardMessage::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewGuardMessage::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewGuardMessage::count() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.NewGuardMessage.count)
  return _internal_count();
}
inline void NewGuardMessage::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void NewGuardMessage::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.NewGuardMessage.count)
}

// .vNerve.bilibili.live.GuardDurationLevel duration_level = 4;
inline void NewGuardMessage::clear_duration_level() {
  duration_level_ = 0;
}
inline ::vNerve::bilibili::live::GuardDurationLevel NewGuardMessage::_internal_duration_level() const {
  return static_cast< ::vNerve::bilibili::live::GuardDurationLevel >(duration_level_);
}
inline ::vNerve::bilibili::live::GuardDurationLevel NewGuardMessage::duration_level() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.NewGuardMessage.duration_level)
  return _internal_duration_level();
}
inline void NewGuardMessage::_internal_set_duration_level(::vNerve::bilibili::live::GuardDurationLevel value) {
  
  duration_level_ = value;
}
inline void NewGuardMessage::set_duration_level(::vNerve::bilibili::live::GuardDurationLevel value) {
  _internal_set_duration_level(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.NewGuardMessage.duration_level)
}

// .vNerve.bilibili.live.GuardBuyType buy_type = 5;
inline void NewGuardMessage::clear_buy_type() {
  buy_type_ = 0;
}
inline ::vNerve::bilibili::live::GuardBuyType NewGuardMessage::_internal_buy_type() const {
  return static_cast< ::vNerve::bilibili::live::GuardBuyType >(buy_type_);
}
inline ::vNerve::bilibili::live::GuardBuyType NewGuardMessage::buy_type() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.NewGuardMessage.buy_type)
  return _internal_buy_type();
}
inline void NewGuardMessage::_internal_set_buy_type(::vNerve::bilibili::live::GuardBuyType value) {
  
  buy_type_ = value;
}
inline void NewGuardMessage::set_buy_type(::vNerve::bilibili::live::GuardBuyType value) {
  _internal_set_buy_type(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.NewGuardMessage.buy_type)
}

// -------------------------------------------------------------------

// UserBlockedMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace bilibili
}  // namespace vNerve

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vNerve::bilibili::live::LiveVipLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::LiveVipLevel>() {
  return ::vNerve::bilibili::live::LiveVipLevel_descriptor();
}
template <> struct is_proto_enum< ::vNerve::bilibili::live::LotteryDanmakuType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::LotteryDanmakuType>() {
  return ::vNerve::bilibili::live::LotteryDanmakuType_descriptor();
}
template <> struct is_proto_enum< ::vNerve::bilibili::live::GuardLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::GuardLevel>() {
  return ::vNerve::bilibili::live::GuardLevel_descriptor();
}
template <> struct is_proto_enum< ::vNerve::bilibili::live::GuardBuyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::GuardBuyType>() {
  return ::vNerve::bilibili::live::GuardBuyType_descriptor();
}
template <> struct is_proto_enum< ::vNerve::bilibili::live::GuardDurationLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::live::GuardDurationLevel>() {
  return ::vNerve::bilibili::live::GuardDurationLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto
