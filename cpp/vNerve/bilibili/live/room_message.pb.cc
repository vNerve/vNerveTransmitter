// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/room_message.proto

#include "vNerve/bilibili/live/room_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class RoomMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomMessage> _instance;
  const ::vNerve::bilibili::live::UserMessage* user_message_;
  const ::vNerve::bilibili::live::PopularityChangedMessage* popularity_change_;
  const ::vNerve::bilibili::live::LiveStatusChangedMessage* live_status_;
  const ::vNerve::bilibili::live::RoomInfoChangedMessage* info_change_;
  const ::vNerve::bilibili::live::RoomLockedMessage* room_locked_;
  const ::vNerve::bilibili::live::RoomWarningMessage* room_warning_;
  const ::vNerve::bilibili::live::RoomLimitedMessage* room_limited_;
  const ::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_remove_;
} _RoomMessage_default_instance_;
class PopularityChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PopularityChangedMessage> _instance;
} _PopularityChangedMessage_default_instance_;
class LiveStatusChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveStatusChangedMessage> _instance;
} _LiveStatusChangedMessage_default_instance_;
class RoomInfoChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInfoChangedMessage> _instance;
  const ::vNerve::bilibili::live::RoomBaseInfo* base_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skin_id_;
  const ::vNerve::bilibili::live::RoomAdminInfo* admin_;
} _RoomInfoChangedMessage_default_instance_;
class RoomBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomBaseInfo> _instance;
} _RoomBaseInfo_default_instance_;
class RoomAdminInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomAdminInfo> _instance;
} _RoomAdminInfo_default_instance_;
class RoomLockedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomLockedMessage> _instance;
} _RoomLockedMessage_default_instance_;
class RoomWarningMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomWarningMessage> _instance;
} _RoomWarningMessage_default_instance_;
class RoomLimitedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomLimitedMessage> _instance;
} _RoomLimitedMessage_default_instance_;
class SuperChatDeleteMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuperChatDeleteMessage> _instance;
} _SuperChatDeleteMessage_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
static void InitDefaultsscc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_LiveStatusChangedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::LiveStatusChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::LiveStatusChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_PopularityChangedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::PopularityChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::PopularityChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomAdminInfo_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomAdminInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomAdminInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomBaseInfo_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomBaseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomInfoChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomInfoChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {
      &scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomLimitedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomLimitedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomLimitedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomLockedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomLockedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomLockedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {
      &scc_info_UserMessage_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto.base,
      &scc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
      &scc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomWarningMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomWarningMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomWarningMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_SuperChatDeleteMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::live::SuperChatDeleteMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::SuperChatDeleteMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomMessage, room_id_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, user_message_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, popularity_change_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, live_status_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, info_change_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, room_locked_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, room_warning_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, room_limited_),
  offsetof(::vNerve::bilibili::live::RoomMessageDefaultTypeInternal, superchat_remove_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomMessage, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::PopularityChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::PopularityChangedMessage, popularity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::LiveStatusChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::LiveStatusChangedMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomInfoChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomInfoChangedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vNerve::bilibili::live::RoomInfoChangedMessageDefaultTypeInternal, base_info_),
  offsetof(::vNerve::bilibili::live::RoomInfoChangedMessageDefaultTypeInternal, background_url_),
  offsetof(::vNerve::bilibili::live::RoomInfoChangedMessageDefaultTypeInternal, skin_id_),
  offsetof(::vNerve::bilibili::live::RoomInfoChangedMessageDefaultTypeInternal, admin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomInfoChangedMessage, changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, title_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, area_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, area_name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, parent_area_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomBaseInfo, parent_area_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomAdminInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomAdminInfo, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomLockedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomLockedMessage, locked_until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomWarningMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomWarningMessage, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomLimitedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomLimitedMessage, type_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomLimitedMessage, delay_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatDeleteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::SuperChatDeleteMessage, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::bilibili::live::RoomMessage)},
  { 15, -1, sizeof(::vNerve::bilibili::live::PopularityChangedMessage)},
  { 21, -1, sizeof(::vNerve::bilibili::live::LiveStatusChangedMessage)},
  { 27, -1, sizeof(::vNerve::bilibili::live::RoomInfoChangedMessage)},
  { 37, -1, sizeof(::vNerve::bilibili::live::RoomBaseInfo)},
  { 47, -1, sizeof(::vNerve::bilibili::live::RoomAdminInfo)},
  { 53, -1, sizeof(::vNerve::bilibili::live::RoomLockedMessage)},
  { 59, -1, sizeof(::vNerve::bilibili::live::RoomWarningMessage)},
  { 65, -1, sizeof(::vNerve::bilibili::live::RoomLimitedMessage)},
  { 72, -1, sizeof(::vNerve::bilibili::live::SuperChatDeleteMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_PopularityChangedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_LiveStatusChangedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomAdminInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomLockedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomWarningMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomLimitedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_SuperChatDeleteMessage_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'vNerve/bilibili/live/room_message.prot"
  "o\022\024vNerve.bilibili.live\032\'vNerve/bilibili"
  "/live/user_message.proto\"\313\004\n\013RoomMessage"
  "\022\017\n\007room_id\030\001 \001(\r\0229\n\014user_message\030\002 \001(\0132"
  "!.vNerve.bilibili.live.UserMessageH\000\022K\n\021"
  "popularity_change\030\003 \001(\0132..vNerve.bilibil"
  "i.live.PopularityChangedMessageH\000\022E\n\013liv"
  "e_status\030\020 \001(\0132..vNerve.bilibili.live.Li"
  "veStatusChangedMessageH\000\022C\n\013info_change\030"
  "\021 \001(\0132,.vNerve.bilibili.live.RoomInfoCha"
  "ngedMessageH\000\022>\n\013room_locked\030\022 \001(\0132\'.vNe"
  "rve.bilibili.live.RoomLockedMessageH\000\022@\n"
  "\014room_warning\030\023 \001(\0132(.vNerve.bilibili.li"
  "ve.RoomWarningMessageH\000\022@\n\014room_limited\030"
  "\024 \001(\0132(.vNerve.bilibili.live.RoomLimited"
  "MessageH\000\022H\n\020superchat_remove\030\025 \001(\0132,.vN"
  "erve.bilibili.live.SuperChatDeleteMessag"
  "eH\000B\t\n\007payload\".\n\030PopularityChangedMessa"
  "ge\022\022\n\npopularity\030\001 \001(\r\"L\n\030LiveStatusChan"
  "gedMessage\0220\n\006status\030\001 \001(\0162 .vNerve.bili"
  "bili.live.LiveStatus\"\277\001\n\026RoomInfoChanged"
  "Message\0227\n\tbase_info\030\001 \001(\0132\".vNerve.bili"
  "bili.live.RoomBaseInfoH\000\022\030\n\016background_u"
  "rl\030\002 \001(\tH\000\022\021\n\007skin_id\030\003 \001(\rH\000\0224\n\005admin\030\004"
  " \001(\0132#.vNerve.bilibili.live.RoomAdminInf"
  "oH\000B\t\n\007changed\"s\n\014RoomBaseInfo\022\r\n\005title\030"
  "\001 \001(\t\022\017\n\007area_id\030\002 \001(\r\022\021\n\tarea_name\030\003 \001("
  "\t\022\026\n\016parent_area_id\030\004 \001(\r\022\030\n\020parent_area"
  "_name\030\005 \001(\r\"\034\n\rRoomAdminInfo\022\013\n\003uid\030\001 \003("
  "\004\")\n\021RoomLockedMessage\022\024\n\014locked_until\030\001"
  " \001(\004\"$\n\022RoomWarningMessage\022\016\n\006reason\030\001 \001"
  "(\t\"7\n\022RoomLimitedMessage\022\014\n\004type\030\001 \001(\t\022\023"
  "\n\013delay_range\030\002 \001(\r\"$\n\026SuperChatDeleteMe"
  "ssage\022\n\n\002id\030\001 \003(\r*=\n\nLiveStatus\022\r\n\tPREPA"
  "RING\020\000\022\010\n\004LIVE\020\001\022\t\n\005ROUND\020\002\022\013\n\007CUT_OFF\020\003"
  "B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_vNerve_2fbilibili_2flive_2fuser_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_sccs[10] = {
  &scc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
  &scc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_once;
static bool descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto = {
  &descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_initialized, descriptor_table_protodef_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto, "vNerve/bilibili/live/room_message.proto", 1413,
  &descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_once, descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_sccs, descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto::offsets,
  file_level_metadata_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto, 10, file_level_enum_descriptors_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto, file_level_service_descriptors_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto), true);
namespace vNerve {
namespace bilibili {
namespace live {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto[0];
}
bool LiveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RoomMessage::InitAsDefaultInstance() {
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.user_message_ = const_cast< ::vNerve::bilibili::live::UserMessage*>(
      ::vNerve::bilibili::live::UserMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.popularity_change_ = const_cast< ::vNerve::bilibili::live::PopularityChangedMessage*>(
      ::vNerve::bilibili::live::PopularityChangedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.live_status_ = const_cast< ::vNerve::bilibili::live::LiveStatusChangedMessage*>(
      ::vNerve::bilibili::live::LiveStatusChangedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.info_change_ = const_cast< ::vNerve::bilibili::live::RoomInfoChangedMessage*>(
      ::vNerve::bilibili::live::RoomInfoChangedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.room_locked_ = const_cast< ::vNerve::bilibili::live::RoomLockedMessage*>(
      ::vNerve::bilibili::live::RoomLockedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.room_warning_ = const_cast< ::vNerve::bilibili::live::RoomWarningMessage*>(
      ::vNerve::bilibili::live::RoomWarningMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.room_limited_ = const_cast< ::vNerve::bilibili::live::RoomLimitedMessage*>(
      ::vNerve::bilibili::live::RoomLimitedMessage::internal_default_instance());
  ::vNerve::bilibili::live::_RoomMessage_default_instance_.superchat_remove_ = const_cast< ::vNerve::bilibili::live::SuperChatDeleteMessage*>(
      ::vNerve::bilibili::live::SuperChatDeleteMessage::internal_default_instance());
}
class RoomMessage::_Internal {
 public:
  static const ::vNerve::bilibili::live::UserMessage& user_message(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::PopularityChangedMessage& popularity_change(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::LiveStatusChangedMessage& live_status(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::RoomInfoChangedMessage& info_change(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::RoomLockedMessage& room_locked(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::RoomWarningMessage& room_warning(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::RoomLimitedMessage& room_limited(const RoomMessage* msg);
  static const ::vNerve::bilibili::live::SuperChatDeleteMessage& superchat_remove(const RoomMessage* msg);
};

const ::vNerve::bilibili::live::UserMessage&
RoomMessage::_Internal::user_message(const RoomMessage* msg) {
  return *msg->payload_.user_message_;
}
const ::vNerve::bilibili::live::PopularityChangedMessage&
RoomMessage::_Internal::popularity_change(const RoomMessage* msg) {
  return *msg->payload_.popularity_change_;
}
const ::vNerve::bilibili::live::LiveStatusChangedMessage&
RoomMessage::_Internal::live_status(const RoomMessage* msg) {
  return *msg->payload_.live_status_;
}
const ::vNerve::bilibili::live::RoomInfoChangedMessage&
RoomMessage::_Internal::info_change(const RoomMessage* msg) {
  return *msg->payload_.info_change_;
}
const ::vNerve::bilibili::live::RoomLockedMessage&
RoomMessage::_Internal::room_locked(const RoomMessage* msg) {
  return *msg->payload_.room_locked_;
}
const ::vNerve::bilibili::live::RoomWarningMessage&
RoomMessage::_Internal::room_warning(const RoomMessage* msg) {
  return *msg->payload_.room_warning_;
}
const ::vNerve::bilibili::live::RoomLimitedMessage&
RoomMessage::_Internal::room_limited(const RoomMessage* msg) {
  return *msg->payload_.room_limited_;
}
const ::vNerve::bilibili::live::SuperChatDeleteMessage&
RoomMessage::_Internal::superchat_remove(const RoomMessage* msg) {
  return *msg->payload_.superchat_remove_;
}
void RoomMessage::set_allocated_user_message(::vNerve::bilibili::live::UserMessage* user_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (user_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_message)->GetArena();
    if (message_arena != submessage_arena) {
      user_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_message, submessage_arena);
    }
    set_has_user_message();
    payload_.user_message_ = user_message;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.user_message)
}
void RoomMessage::clear_user_message() {
  if (_internal_has_user_message()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.user_message_;
    }
    clear_has_payload();
  }
}
void RoomMessage::set_allocated_popularity_change(::vNerve::bilibili::live::PopularityChangedMessage* popularity_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (popularity_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(popularity_change);
    if (message_arena != submessage_arena) {
      popularity_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, popularity_change, submessage_arena);
    }
    set_has_popularity_change();
    payload_.popularity_change_ = popularity_change;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.popularity_change)
}
void RoomMessage::set_allocated_live_status(::vNerve::bilibili::live::LiveStatusChangedMessage* live_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (live_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(live_status);
    if (message_arena != submessage_arena) {
      live_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, live_status, submessage_arena);
    }
    set_has_live_status();
    payload_.live_status_ = live_status;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.live_status)
}
void RoomMessage::set_allocated_info_change(::vNerve::bilibili::live::RoomInfoChangedMessage* info_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (info_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info_change);
    if (message_arena != submessage_arena) {
      info_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_change, submessage_arena);
    }
    set_has_info_change();
    payload_.info_change_ = info_change;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.info_change)
}
void RoomMessage::set_allocated_room_locked(::vNerve::bilibili::live::RoomLockedMessage* room_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (room_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(room_locked);
    if (message_arena != submessage_arena) {
      room_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_locked, submessage_arena);
    }
    set_has_room_locked();
    payload_.room_locked_ = room_locked;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.room_locked)
}
void RoomMessage::set_allocated_room_warning(::vNerve::bilibili::live::RoomWarningMessage* room_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (room_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(room_warning);
    if (message_arena != submessage_arena) {
      room_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_warning, submessage_arena);
    }
    set_has_room_warning();
    payload_.room_warning_ = room_warning;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.room_warning)
}
void RoomMessage::set_allocated_room_limited(::vNerve::bilibili::live::RoomLimitedMessage* room_limited) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (room_limited) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(room_limited);
    if (message_arena != submessage_arena) {
      room_limited = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_limited, submessage_arena);
    }
    set_has_room_limited();
    payload_.room_limited_ = room_limited;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.room_limited)
}
void RoomMessage::set_allocated_superchat_remove(::vNerve::bilibili::live::SuperChatDeleteMessage* superchat_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (superchat_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(superchat_remove);
    if (message_arena != submessage_arena) {
      superchat_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, superchat_remove, submessage_arena);
    }
    set_has_superchat_remove();
    payload_.superchat_remove_ = superchat_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomMessage.superchat_remove)
}
RoomMessage::RoomMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomMessage)
}
RoomMessage::RoomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomMessage)
}
RoomMessage::RoomMessage(const RoomMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kUserMessage: {
      _internal_mutable_user_message()->::vNerve::bilibili::live::UserMessage::MergeFrom(from._internal_user_message());
      break;
    }
    case kPopularityChange: {
      _internal_mutable_popularity_change()->::vNerve::bilibili::live::PopularityChangedMessage::MergeFrom(from._internal_popularity_change());
      break;
    }
    case kLiveStatus: {
      _internal_mutable_live_status()->::vNerve::bilibili::live::LiveStatusChangedMessage::MergeFrom(from._internal_live_status());
      break;
    }
    case kInfoChange: {
      _internal_mutable_info_change()->::vNerve::bilibili::live::RoomInfoChangedMessage::MergeFrom(from._internal_info_change());
      break;
    }
    case kRoomLocked: {
      _internal_mutable_room_locked()->::vNerve::bilibili::live::RoomLockedMessage::MergeFrom(from._internal_room_locked());
      break;
    }
    case kRoomWarning: {
      _internal_mutable_room_warning()->::vNerve::bilibili::live::RoomWarningMessage::MergeFrom(from._internal_room_warning());
      break;
    }
    case kRoomLimited: {
      _internal_mutable_room_limited()->::vNerve::bilibili::live::RoomLimitedMessage::MergeFrom(from._internal_room_limited());
      break;
    }
    case kSuperchatRemove: {
      _internal_mutable_superchat_remove()->::vNerve::bilibili::live::SuperChatDeleteMessage::MergeFrom(from._internal_superchat_remove());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomMessage)
}

void RoomMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  room_id_ = 0u;
  clear_has_payload();
}

RoomMessage::~RoomMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomMessage)
  SharedDtor();
}

void RoomMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void RoomMessage::ArenaDtor(void* object) {
  RoomMessage* _this = reinterpret_cast< RoomMessage* >(object);
  (void)_this;
}
void RoomMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMessage& RoomMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.live.RoomMessage)
  switch (payload_case()) {
    case kUserMessage: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.user_message_;
      }
      break;
    }
    case kPopularityChange: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.popularity_change_;
      }
      break;
    }
    case kLiveStatus: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.live_status_;
      }
      break;
    }
    case kInfoChange: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.info_change_;
      }
      break;
    }
    case kRoomLocked: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.room_locked_;
      }
      break;
    }
    case kRoomWarning: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.room_warning_;
      }
      break;
    }
    case kRoomLimited: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.room_limited_;
      }
      break;
    }
    case kSuperchatRemove: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.superchat_remove_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void RoomMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_ = 0u;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* RoomMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.UserMessage user_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.PopularityChangedMessage popularity_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_popularity_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.LiveStatusChangedMessage live_status = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.RoomInfoChangedMessage info_change = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.RoomLockedMessage room_locked = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.RoomWarningMessage room_warning = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.RoomLimitedMessage room_limited = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_limited(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.SuperChatDeleteMessage superchat_remove = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_superchat_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_room_id(), target);
  }

  // .vNerve.bilibili.live.UserMessage user_message = 2;
  if (_internal_has_user_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_message(this), target, stream);
  }

  // .vNerve.bilibili.live.PopularityChangedMessage popularity_change = 3;
  if (_internal_has_popularity_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::popularity_change(this), target, stream);
  }

  // .vNerve.bilibili.live.LiveStatusChangedMessage live_status = 16;
  if (_internal_has_live_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::live_status(this), target, stream);
  }

  // .vNerve.bilibili.live.RoomInfoChangedMessage info_change = 17;
  if (_internal_has_info_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::info_change(this), target, stream);
  }

  // .vNerve.bilibili.live.RoomLockedMessage room_locked = 18;
  if (_internal_has_room_locked()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::room_locked(this), target, stream);
  }

  // .vNerve.bilibili.live.RoomWarningMessage room_warning = 19;
  if (_internal_has_room_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::room_warning(this), target, stream);
  }

  // .vNerve.bilibili.live.RoomLimitedMessage room_limited = 20;
  if (_internal_has_room_limited()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::room_limited(this), target, stream);
  }

  // .vNerve.bilibili.live.SuperChatDeleteMessage superchat_remove = 21;
  if (_internal_has_superchat_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::superchat_remove(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomMessage)
  return target;
}

size_t RoomMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_id());
  }

  switch (payload_case()) {
    // .vNerve.bilibili.live.UserMessage user_message = 2;
    case kUserMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.user_message_);
      break;
    }
    // .vNerve.bilibili.live.PopularityChangedMessage popularity_change = 3;
    case kPopularityChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.popularity_change_);
      break;
    }
    // .vNerve.bilibili.live.LiveStatusChangedMessage live_status = 16;
    case kLiveStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.live_status_);
      break;
    }
    // .vNerve.bilibili.live.RoomInfoChangedMessage info_change = 17;
    case kInfoChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.info_change_);
      break;
    }
    // .vNerve.bilibili.live.RoomLockedMessage room_locked = 18;
    case kRoomLocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.room_locked_);
      break;
    }
    // .vNerve.bilibili.live.RoomWarningMessage room_warning = 19;
    case kRoomWarning: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.room_warning_);
      break;
    }
    // .vNerve.bilibili.live.RoomLimitedMessage room_limited = 20;
    case kRoomLimited: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.room_limited_);
      break;
    }
    // .vNerve.bilibili.live.SuperChatDeleteMessage superchat_remove = 21;
    case kSuperchatRemove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.superchat_remove_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomMessage)
    MergeFrom(*source);
  }
}

void RoomMessage::MergeFrom(const RoomMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  switch (from.payload_case()) {
    case kUserMessage: {
      _internal_mutable_user_message()->::vNerve::bilibili::live::UserMessage::MergeFrom(from._internal_user_message());
      break;
    }
    case kPopularityChange: {
      _internal_mutable_popularity_change()->::vNerve::bilibili::live::PopularityChangedMessage::MergeFrom(from._internal_popularity_change());
      break;
    }
    case kLiveStatus: {
      _internal_mutable_live_status()->::vNerve::bilibili::live::LiveStatusChangedMessage::MergeFrom(from._internal_live_status());
      break;
    }
    case kInfoChange: {
      _internal_mutable_info_change()->::vNerve::bilibili::live::RoomInfoChangedMessage::MergeFrom(from._internal_info_change());
      break;
    }
    case kRoomLocked: {
      _internal_mutable_room_locked()->::vNerve::bilibili::live::RoomLockedMessage::MergeFrom(from._internal_room_locked());
      break;
    }
    case kRoomWarning: {
      _internal_mutable_room_warning()->::vNerve::bilibili::live::RoomWarningMessage::MergeFrom(from._internal_room_warning());
      break;
    }
    case kRoomLimited: {
      _internal_mutable_room_limited()->::vNerve::bilibili::live::RoomLimitedMessage::MergeFrom(from._internal_room_limited());
      break;
    }
    case kSuperchatRemove: {
      _internal_mutable_superchat_remove()->::vNerve::bilibili::live::SuperChatDeleteMessage::MergeFrom(from._internal_superchat_remove());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void RoomMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMessage::CopyFrom(const RoomMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessage::IsInitialized() const {
  return true;
}

void RoomMessage::InternalSwap(RoomMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_id_, other->room_id_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PopularityChangedMessage::InitAsDefaultInstance() {
}
class PopularityChangedMessage::_Internal {
 public:
};

PopularityChangedMessage::PopularityChangedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.PopularityChangedMessage)
}
PopularityChangedMessage::PopularityChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.PopularityChangedMessage)
}
PopularityChangedMessage::PopularityChangedMessage(const PopularityChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  popularity_ = from.popularity_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.PopularityChangedMessage)
}

void PopularityChangedMessage::SharedCtor() {
  popularity_ = 0u;
}

PopularityChangedMessage::~PopularityChangedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.PopularityChangedMessage)
  SharedDtor();
}

void PopularityChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PopularityChangedMessage::ArenaDtor(void* object) {
  PopularityChangedMessage* _this = reinterpret_cast< PopularityChangedMessage* >(object);
  (void)_this;
}
void PopularityChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopularityChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PopularityChangedMessage& PopularityChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PopularityChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void PopularityChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.PopularityChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  popularity_ = 0u;
  _internal_metadata_.Clear();
}

const char* PopularityChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 popularity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopularityChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.PopularityChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 popularity = 1;
  if (this->popularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_popularity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.PopularityChangedMessage)
  return target;
}

size_t PopularityChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.PopularityChangedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 popularity = 1;
  if (this->popularity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_popularity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PopularityChangedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.PopularityChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PopularityChangedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PopularityChangedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.PopularityChangedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.PopularityChangedMessage)
    MergeFrom(*source);
  }
}

void PopularityChangedMessage::MergeFrom(const PopularityChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.PopularityChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.popularity() != 0) {
    _internal_set_popularity(from._internal_popularity());
  }
}

void PopularityChangedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.PopularityChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopularityChangedMessage::CopyFrom(const PopularityChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.PopularityChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopularityChangedMessage::IsInitialized() const {
  return true;
}

void PopularityChangedMessage::InternalSwap(PopularityChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(popularity_, other->popularity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopularityChangedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveStatusChangedMessage::InitAsDefaultInstance() {
}
class LiveStatusChangedMessage::_Internal {
 public:
};

LiveStatusChangedMessage::LiveStatusChangedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.LiveStatusChangedMessage)
}
LiveStatusChangedMessage::LiveStatusChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.LiveStatusChangedMessage)
}
LiveStatusChangedMessage::LiveStatusChangedMessage(const LiveStatusChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.LiveStatusChangedMessage)
}

void LiveStatusChangedMessage::SharedCtor() {
  status_ = 0;
}

LiveStatusChangedMessage::~LiveStatusChangedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.LiveStatusChangedMessage)
  SharedDtor();
}

void LiveStatusChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void LiveStatusChangedMessage::ArenaDtor(void* object) {
  LiveStatusChangedMessage* _this = reinterpret_cast< LiveStatusChangedMessage* >(object);
  (void)_this;
}
void LiveStatusChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveStatusChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveStatusChangedMessage& LiveStatusChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveStatusChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void LiveStatusChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* LiveStatusChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.LiveStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vNerve::bilibili::live::LiveStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveStatusChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.LiveStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.LiveStatusChangedMessage)
  return target;
}

size_t LiveStatusChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vNerve.bilibili.live.LiveStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveStatusChangedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveStatusChangedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveStatusChangedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.LiveStatusChangedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.LiveStatusChangedMessage)
    MergeFrom(*source);
  }
}

void LiveStatusChangedMessage::MergeFrom(const LiveStatusChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LiveStatusChangedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveStatusChangedMessage::CopyFrom(const LiveStatusChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.LiveStatusChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveStatusChangedMessage::IsInitialized() const {
  return true;
}

void LiveStatusChangedMessage::InternalSwap(LiveStatusChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveStatusChangedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomInfoChangedMessage::InitAsDefaultInstance() {
  ::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_.base_info_ = const_cast< ::vNerve::bilibili::live::RoomBaseInfo*>(
      ::vNerve::bilibili::live::RoomBaseInfo::internal_default_instance());
  ::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_.background_url_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_.skin_id_ = 0u;
  ::vNerve::bilibili::live::_RoomInfoChangedMessage_default_instance_.admin_ = const_cast< ::vNerve::bilibili::live::RoomAdminInfo*>(
      ::vNerve::bilibili::live::RoomAdminInfo::internal_default_instance());
}
class RoomInfoChangedMessage::_Internal {
 public:
  static const ::vNerve::bilibili::live::RoomBaseInfo& base_info(const RoomInfoChangedMessage* msg);
  static const ::vNerve::bilibili::live::RoomAdminInfo& admin(const RoomInfoChangedMessage* msg);
};

const ::vNerve::bilibili::live::RoomBaseInfo&
RoomInfoChangedMessage::_Internal::base_info(const RoomInfoChangedMessage* msg) {
  return *msg->changed_.base_info_;
}
const ::vNerve::bilibili::live::RoomAdminInfo&
RoomInfoChangedMessage::_Internal::admin(const RoomInfoChangedMessage* msg) {
  return *msg->changed_.admin_;
}
void RoomInfoChangedMessage::set_allocated_base_info(::vNerve::bilibili::live::RoomBaseInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_changed();
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_info);
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    set_has_base_info();
    changed_.base_info_ = base_info;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.base_info)
}
void RoomInfoChangedMessage::set_allocated_admin(::vNerve::bilibili::live::RoomAdminInfo* admin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_changed();
  if (admin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(admin);
    if (message_arena != submessage_arena) {
      admin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin, submessage_arena);
    }
    set_has_admin();
    changed_.admin_ = admin;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.live.RoomInfoChangedMessage.admin)
}
RoomInfoChangedMessage::RoomInfoChangedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomInfoChangedMessage)
}
RoomInfoChangedMessage::RoomInfoChangedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomInfoChangedMessage)
}
RoomInfoChangedMessage::RoomInfoChangedMessage(const RoomInfoChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_changed();
  switch (from.changed_case()) {
    case kBaseInfo: {
      _internal_mutable_base_info()->::vNerve::bilibili::live::RoomBaseInfo::MergeFrom(from._internal_base_info());
      break;
    }
    case kBackgroundUrl: {
      _internal_set_background_url(from._internal_background_url());
      break;
    }
    case kSkinId: {
      _internal_set_skin_id(from._internal_skin_id());
      break;
    }
    case kAdmin: {
      _internal_mutable_admin()->::vNerve::bilibili::live::RoomAdminInfo::MergeFrom(from._internal_admin());
      break;
    }
    case CHANGED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomInfoChangedMessage)
}

void RoomInfoChangedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  clear_has_changed();
}

RoomInfoChangedMessage::~RoomInfoChangedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomInfoChangedMessage)
  SharedDtor();
}

void RoomInfoChangedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_changed()) {
    clear_changed();
  }
}

void RoomInfoChangedMessage::ArenaDtor(void* object) {
  RoomInfoChangedMessage* _this = reinterpret_cast< RoomInfoChangedMessage* >(object);
  (void)_this;
}
void RoomInfoChangedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInfoChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfoChangedMessage& RoomInfoChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInfoChangedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomInfoChangedMessage::clear_changed() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  switch (changed_case()) {
    case kBaseInfo: {
      if (GetArenaNoVirtual() == nullptr) {
        delete changed_.base_info_;
      }
      break;
    }
    case kBackgroundUrl: {
      changed_.background_url_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kSkinId: {
      // No need to clear
      break;
    }
    case kAdmin: {
      if (GetArenaNoVirtual() == nullptr) {
        delete changed_.admin_;
      }
      break;
    }
    case CHANGED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGED_NOT_SET;
}


void RoomInfoChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_changed();
  _internal_metadata_.Clear();
}

const char* RoomInfoChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.RoomBaseInfo base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string background_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_background_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.RoomInfoChangedMessage.background_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skin_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_skin_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.live.RoomAdminInfo admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_admin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInfoChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.RoomBaseInfo base_info = 1;
  if (_internal_has_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_info(this), target, stream);
  }

  // string background_url = 2;
  if (_internal_has_background_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_background_url().data(), static_cast<int>(this->_internal_background_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.RoomInfoChangedMessage.background_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_background_url(), target);
  }

  // uint32 skin_id = 3;
  if (_internal_has_skin_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skin_id(), target);
  }

  // .vNerve.bilibili.live.RoomAdminInfo admin = 4;
  if (_internal_has_admin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::admin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomInfoChangedMessage)
  return target;
}

size_t RoomInfoChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (changed_case()) {
    // .vNerve.bilibili.live.RoomBaseInfo base_info = 1;
    case kBaseInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changed_.base_info_);
      break;
    }
    // string background_url = 2;
    case kBackgroundUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_url());
      break;
    }
    // uint32 skin_id = 3;
    case kSkinId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skin_id());
      break;
    }
    // .vNerve.bilibili.live.RoomAdminInfo admin = 4;
    case kAdmin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changed_.admin_);
      break;
    }
    case CHANGED_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfoChangedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfoChangedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInfoChangedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomInfoChangedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomInfoChangedMessage)
    MergeFrom(*source);
  }
}

void RoomInfoChangedMessage::MergeFrom(const RoomInfoChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.changed_case()) {
    case kBaseInfo: {
      _internal_mutable_base_info()->::vNerve::bilibili::live::RoomBaseInfo::MergeFrom(from._internal_base_info());
      break;
    }
    case kBackgroundUrl: {
      _internal_set_background_url(from._internal_background_url());
      break;
    }
    case kSkinId: {
      _internal_set_skin_id(from._internal_skin_id());
      break;
    }
    case kAdmin: {
      _internal_mutable_admin()->::vNerve::bilibili::live::RoomAdminInfo::MergeFrom(from._internal_admin());
      break;
    }
    case CHANGED_NOT_SET: {
      break;
    }
  }
}

void RoomInfoChangedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfoChangedMessage::CopyFrom(const RoomInfoChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomInfoChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoChangedMessage::IsInitialized() const {
  return true;
}

void RoomInfoChangedMessage::InternalSwap(RoomInfoChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changed_, other->changed_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoChangedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomBaseInfo::InitAsDefaultInstance() {
}
class RoomBaseInfo::_Internal {
 public:
};

RoomBaseInfo::RoomBaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomBaseInfo)
}
RoomBaseInfo::RoomBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomBaseInfo)
}
RoomBaseInfo::RoomBaseInfo(const RoomBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArenaNoVirtual());
  }
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_name().empty()) {
    area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_area_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&area_id_, &from.area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_area_name_) -
    reinterpret_cast<char*>(&area_id_)) + sizeof(parent_area_name_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomBaseInfo)
}

void RoomBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_area_name_) -
      reinterpret_cast<char*>(&area_id_)) + sizeof(parent_area_name_));
}

RoomBaseInfo::~RoomBaseInfo() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomBaseInfo)
  SharedDtor();
}

void RoomBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomBaseInfo::ArenaDtor(void* object) {
  RoomBaseInfo* _this = reinterpret_cast< RoomBaseInfo* >(object);
  (void)_this;
}
void RoomBaseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomBaseInfo& RoomBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomBaseInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_area_name_) -
      reinterpret_cast<char*>(&area_id_)) + sizeof(parent_area_name_));
  _internal_metadata_.Clear();
}

const char* RoomBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.RoomBaseInfo.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 area_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.RoomBaseInfo.area_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent_area_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parent_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent_area_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parent_area_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomBaseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.RoomBaseInfo.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // uint32 area_id = 2;
  if (this->area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_area_id(), target);
  }

  // string area_name = 3;
  if (this->area_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.RoomBaseInfo.area_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_area_name(), target);
  }

  // uint32 parent_area_id = 4;
  if (this->parent_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_parent_area_id(), target);
  }

  // uint32 parent_area_name = 5;
  if (this->parent_area_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_parent_area_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomBaseInfo)
  return target;
}

size_t RoomBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string area_name = 3;
  if (this->area_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // uint32 area_id = 2;
  if (this->area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_area_id());
  }

  // uint32 parent_area_id = 4;
  if (this->parent_area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent_area_id());
  }

  // uint32 parent_area_name = 5;
  if (this->parent_area_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent_area_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomBaseInfo)
    MergeFrom(*source);
  }
}

void RoomBaseInfo::MergeFrom(const RoomBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.area_name().size() > 0) {
    _internal_set_area_name(from._internal_area_name());
  }
  if (from.area_id() != 0) {
    _internal_set_area_id(from._internal_area_id());
  }
  if (from.parent_area_id() != 0) {
    _internal_set_parent_area_id(from._internal_parent_area_id());
  }
  if (from.parent_area_name() != 0) {
    _internal_set_parent_area_name(from._internal_parent_area_name());
  }
}

void RoomBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBaseInfo::CopyFrom(const RoomBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBaseInfo::IsInitialized() const {
  return true;
}

void RoomBaseInfo::InternalSwap(RoomBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  area_name_.Swap(&other->area_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(area_id_, other->area_id_);
  swap(parent_area_id_, other->parent_area_id_);
  swap(parent_area_name_, other->parent_area_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomBaseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomAdminInfo::InitAsDefaultInstance() {
}
class RoomAdminInfo::_Internal {
 public:
};

RoomAdminInfo::RoomAdminInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomAdminInfo)
}
RoomAdminInfo::RoomAdminInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomAdminInfo)
}
RoomAdminInfo::RoomAdminInfo(const RoomAdminInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomAdminInfo)
}

void RoomAdminInfo::SharedCtor() {
}

RoomAdminInfo::~RoomAdminInfo() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomAdminInfo)
  SharedDtor();
}

void RoomAdminInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RoomAdminInfo::ArenaDtor(void* object) {
  RoomAdminInfo* _this = reinterpret_cast< RoomAdminInfo* >(object);
  (void)_this;
}
void RoomAdminInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomAdminInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomAdminInfo& RoomAdminInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomAdminInfo_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomAdminInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomAdminInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  _internal_metadata_.Clear();
}

const char* RoomAdminInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomAdminInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomAdminInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 uid = 1;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_uid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomAdminInfo)
  return target;
}

size_t RoomAdminInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomAdminInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 uid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomAdminInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomAdminInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomAdminInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomAdminInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomAdminInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomAdminInfo)
    MergeFrom(*source);
  }
}

void RoomAdminInfo::MergeFrom(const RoomAdminInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomAdminInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
}

void RoomAdminInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomAdminInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAdminInfo::CopyFrom(const RoomAdminInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomAdminInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAdminInfo::IsInitialized() const {
  return true;
}

void RoomAdminInfo::InternalSwap(RoomAdminInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomAdminInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomLockedMessage::InitAsDefaultInstance() {
}
class RoomLockedMessage::_Internal {
 public:
};

RoomLockedMessage::RoomLockedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomLockedMessage)
}
RoomLockedMessage::RoomLockedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomLockedMessage)
}
RoomLockedMessage::RoomLockedMessage(const RoomLockedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locked_until_ = from.locked_until_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomLockedMessage)
}

void RoomLockedMessage::SharedCtor() {
  locked_until_ = PROTOBUF_ULONGLONG(0);
}

RoomLockedMessage::~RoomLockedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomLockedMessage)
  SharedDtor();
}

void RoomLockedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RoomLockedMessage::ArenaDtor(void* object) {
  RoomLockedMessage* _this = reinterpret_cast< RoomLockedMessage* >(object);
  (void)_this;
}
void RoomLockedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomLockedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomLockedMessage& RoomLockedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomLockedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomLockedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomLockedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_until_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RoomLockedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 locked_until = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          locked_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomLockedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomLockedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 locked_until = 1;
  if (this->locked_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_locked_until(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomLockedMessage)
  return target;
}

size_t RoomLockedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomLockedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 locked_until = 1;
  if (this->locked_until() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_locked_until());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomLockedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomLockedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLockedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomLockedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomLockedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomLockedMessage)
    MergeFrom(*source);
  }
}

void RoomLockedMessage::MergeFrom(const RoomLockedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomLockedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.locked_until() != 0) {
    _internal_set_locked_until(from._internal_locked_until());
  }
}

void RoomLockedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomLockedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLockedMessage::CopyFrom(const RoomLockedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomLockedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLockedMessage::IsInitialized() const {
  return true;
}

void RoomLockedMessage::InternalSwap(RoomLockedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(locked_until_, other->locked_until_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomLockedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomWarningMessage::InitAsDefaultInstance() {
}
class RoomWarningMessage::_Internal {
 public:
};

RoomWarningMessage::RoomWarningMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomWarningMessage)
}
RoomWarningMessage::RoomWarningMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomWarningMessage)
}
RoomWarningMessage::RoomWarningMessage(const RoomWarningMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomWarningMessage)
}

void RoomWarningMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoomWarningMessage::~RoomWarningMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomWarningMessage)
  SharedDtor();
}

void RoomWarningMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomWarningMessage::ArenaDtor(void* object) {
  RoomWarningMessage* _this = reinterpret_cast< RoomWarningMessage* >(object);
  (void)_this;
}
void RoomWarningMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomWarningMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomWarningMessage& RoomWarningMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomWarningMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomWarningMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomWarningMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* RoomWarningMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.RoomWarningMessage.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomWarningMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomWarningMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.RoomWarningMessage.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomWarningMessage)
  return target;
}

size_t RoomWarningMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomWarningMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomWarningMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomWarningMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomWarningMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomWarningMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomWarningMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomWarningMessage)
    MergeFrom(*source);
  }
}

void RoomWarningMessage::MergeFrom(const RoomWarningMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomWarningMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void RoomWarningMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomWarningMessage::CopyFrom(const RoomWarningMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomWarningMessage::IsInitialized() const {
  return true;
}

void RoomWarningMessage::InternalSwap(RoomWarningMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomWarningMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomLimitedMessage::InitAsDefaultInstance() {
}
class RoomLimitedMessage::_Internal {
 public:
};

RoomLimitedMessage::RoomLimitedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomLimitedMessage)
}
RoomLimitedMessage::RoomLimitedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomLimitedMessage)
}
RoomLimitedMessage::RoomLimitedMessage(const RoomLimitedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArenaNoVirtual());
  }
  delay_range_ = from.delay_range_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomLimitedMessage)
}

void RoomLimitedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delay_range_ = 0u;
}

RoomLimitedMessage::~RoomLimitedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomLimitedMessage)
  SharedDtor();
}

void RoomLimitedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomLimitedMessage::ArenaDtor(void* object) {
  RoomLimitedMessage* _this = reinterpret_cast< RoomLimitedMessage* >(object);
  (void)_this;
}
void RoomLimitedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomLimitedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomLimitedMessage& RoomLimitedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomLimitedMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RoomLimitedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomLimitedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  delay_range_ = 0u;
  _internal_metadata_.Clear();
}

const char* RoomLimitedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.live.RoomLimitedMessage.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 delay_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          delay_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomLimitedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomLimitedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.live.RoomLimitedMessage.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // uint32 delay_range = 2;
  if (this->delay_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_delay_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomLimitedMessage)
  return target;
}

size_t RoomLimitedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomLimitedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 delay_range = 2;
  if (this->delay_range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_delay_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomLimitedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomLimitedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLimitedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomLimitedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomLimitedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomLimitedMessage)
    MergeFrom(*source);
  }
}

void RoomLimitedMessage::MergeFrom(const RoomLimitedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomLimitedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.delay_range() != 0) {
    _internal_set_delay_range(from._internal_delay_range());
  }
}

void RoomLimitedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomLimitedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLimitedMessage::CopyFrom(const RoomLimitedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomLimitedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLimitedMessage::IsInitialized() const {
  return true;
}

void RoomLimitedMessage::InternalSwap(RoomLimitedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delay_range_, other->delay_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomLimitedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuperChatDeleteMessage::InitAsDefaultInstance() {
}
class SuperChatDeleteMessage::_Internal {
 public:
};

SuperChatDeleteMessage::SuperChatDeleteMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.SuperChatDeleteMessage)
}
SuperChatDeleteMessage::SuperChatDeleteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.SuperChatDeleteMessage)
}
SuperChatDeleteMessage::SuperChatDeleteMessage(const SuperChatDeleteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.SuperChatDeleteMessage)
}

void SuperChatDeleteMessage::SharedCtor() {
}

SuperChatDeleteMessage::~SuperChatDeleteMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.SuperChatDeleteMessage)
  SharedDtor();
}

void SuperChatDeleteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SuperChatDeleteMessage::ArenaDtor(void* object) {
  SuperChatDeleteMessage* _this = reinterpret_cast< SuperChatDeleteMessage* >(object);
  (void)_this;
}
void SuperChatDeleteMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuperChatDeleteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuperChatDeleteMessage& SuperChatDeleteMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuperChatDeleteMessage_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void SuperChatDeleteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _internal_metadata_.Clear();
}

const char* SuperChatDeleteMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuperChatDeleteMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.SuperChatDeleteMessage)
  return target;
}

size_t SuperChatDeleteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuperChatDeleteMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SuperChatDeleteMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuperChatDeleteMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.SuperChatDeleteMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.SuperChatDeleteMessage)
    MergeFrom(*source);
  }
}

void SuperChatDeleteMessage::MergeFrom(const SuperChatDeleteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void SuperChatDeleteMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperChatDeleteMessage::CopyFrom(const SuperChatDeleteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.SuperChatDeleteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperChatDeleteMessage::IsInitialized() const {
  return true;
}

void SuperChatDeleteMessage::InternalSwap(SuperChatDeleteMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuperChatDeleteMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::PopularityChangedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::PopularityChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::PopularityChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::LiveStatusChangedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::LiveStatusChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::LiveStatusChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomInfoChangedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomInfoChangedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomInfoChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomBaseInfo* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomAdminInfo* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomAdminInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomAdminInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomLockedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomLockedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomLockedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomWarningMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomWarningMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomWarningMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomLimitedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomLimitedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomLimitedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::SuperChatDeleteMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::SuperChatDeleteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::SuperChatDeleteMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
