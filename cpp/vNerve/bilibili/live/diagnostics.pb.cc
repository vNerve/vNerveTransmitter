// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/diagnostics.proto

#include "vNerve/bilibili/live/diagnostics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class WorkerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerStatus> _instance;
} _WorkerStatus_default_instance_;
class RoomStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomStatus> _instance;
} _RoomStatus_default_instance_;
class RoomTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomTask> _instance;
} _RoomTask_default_instance_;
class BilibiliLiveSupervisorDiagnosticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BilibiliLiveSupervisorDiagnostics> _instance;
} _BilibiliLiveSupervisorDiagnostics_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
static void InitDefaultsscc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_BilibiliLiveSupervisorDiagnostics_default_instance_;
    new (ptr) ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto}, {
      &scc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
      &scc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
      &scc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,}};

static void InitDefaultsscc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomStatus_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto}, {}};

static void InitDefaultsscc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_RoomTask_default_instance_;
    new (ptr) ::vNerve::bilibili::live::RoomTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::RoomTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto}, {}};

static void InitDefaultsscc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::live::_WorkerStatus_default_instance_;
    new (ptr) ::vNerve::bilibili::live::WorkerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::live::WorkerStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WorkerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WorkerStatus, id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WorkerStatus, max_rooms_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WorkerStatus, current_connections_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::WorkerStatus, allow_new_task_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomStatus, id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomStatus, current_connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomTask, worker_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::RoomTask, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics, max_tasks_per_room_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics, worker_statuses_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics, room_statuses_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics, tasks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::bilibili::live::WorkerStatus)},
  { 9, -1, sizeof(::vNerve::bilibili::live::RoomStatus)},
  { 16, -1, sizeof(::vNerve::bilibili::live::RoomTask)},
  { 23, -1, sizeof(::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_WorkerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_RoomTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::live::_BilibiliLiveSupervisorDiagnostics_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&vNerve/bilibili/live/diagnostics.proto"
  "\022\024vNerve.bilibili.live\"h\n\014WorkerStatus\022\n"
  "\n\002id\030\001 \001(\006\022\021\n\tmax_rooms\030\002 \001(\005\022\033\n\023current"
  "_connections\030\003 \001(\005\022\034\n\024allow_new_task_aft"
  "er\030\004 \001(\003\"5\n\nRoomStatus\022\n\n\002id\030\001 \001(\005\022\033\n\023cu"
  "rrent_connections\030\002 \001(\005\".\n\010RoomTask\022\021\n\tw"
  "orker_id\030\001 \001(\006\022\017\n\007room_id\030\002 \001(\005\"\344\001\n!Bili"
  "biliLiveSupervisorDiagnostics\022\032\n\022max_tas"
  "ks_per_room\030\001 \001(\005\022;\n\017worker_statuses\030\002 \003"
  "(\0132\".vNerve.bilibili.live.WorkerStatus\0227"
  "\n\rroom_statuses\030\003 \003(\0132 .vNerve.bilibili."
  "live.RoomStatus\022-\n\005tasks\030\004 \003(\0132\036.vNerve."
  "bilibili.live.RoomTaskB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_sccs[4] = {
  &scc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
  &scc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
  &scc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
  &scc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_once;
static bool descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto = {
  &descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_initialized, descriptor_table_protodef_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto, "vNerve/bilibili/live/diagnostics.proto", 515,
  &descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_once, descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_sccs, descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto::offsets,
  file_level_metadata_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto, 4, file_level_enum_descriptors_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto, file_level_service_descriptors_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto), true);
namespace vNerve {
namespace bilibili {
namespace live {

// ===================================================================

void WorkerStatus::InitAsDefaultInstance() {
}
class WorkerStatus::_Internal {
 public:
};

WorkerStatus::WorkerStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.WorkerStatus)
}
WorkerStatus::WorkerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.WorkerStatus)
}
WorkerStatus::WorkerStatus(const WorkerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_new_task_after_) -
    reinterpret_cast<char*>(&id_)) + sizeof(allow_new_task_after_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.WorkerStatus)
}

void WorkerStatus::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_new_task_after_) -
      reinterpret_cast<char*>(&id_)) + sizeof(allow_new_task_after_));
}

WorkerStatus::~WorkerStatus() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.WorkerStatus)
  SharedDtor();
}

void WorkerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void WorkerStatus::ArenaDtor(void* object) {
  WorkerStatus* _this = reinterpret_cast< WorkerStatus* >(object);
  (void)_this;
}
void WorkerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerStatus& WorkerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base);
  return *internal_default_instance();
}


void WorkerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.WorkerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_new_task_after_) -
      reinterpret_cast<char*>(&id_)) + sizeof(allow_new_task_after_));
  _internal_metadata_.Clear();
}

const char* WorkerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // int32 max_rooms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_rooms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allow_new_task_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_new_task_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.WorkerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // int32 max_rooms = 2;
  if (this->max_rooms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_rooms(), target);
  }

  // int32 current_connections = 3;
  if (this->current_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_connections(), target);
  }

  // int64 allow_new_task_after = 4;
  if (this->allow_new_task_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_allow_new_task_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.WorkerStatus)
  return target;
}

size_t WorkerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.WorkerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // int32 max_rooms = 2;
  if (this->max_rooms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_rooms());
  }

  // int32 current_connections = 3;
  if (this->current_connections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_connections());
  }

  // int64 allow_new_task_after = 4;
  if (this->allow_new_task_after() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allow_new_task_after());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.WorkerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.WorkerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.WorkerStatus)
    MergeFrom(*source);
  }
}

void WorkerStatus::MergeFrom(const WorkerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.WorkerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.max_rooms() != 0) {
    _internal_set_max_rooms(from._internal_max_rooms());
  }
  if (from.current_connections() != 0) {
    _internal_set_current_connections(from._internal_current_connections());
  }
  if (from.allow_new_task_after() != 0) {
    _internal_set_allow_new_task_after(from._internal_allow_new_task_after());
  }
}

void WorkerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.WorkerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerStatus::CopyFrom(const WorkerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.WorkerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerStatus::IsInitialized() const {
  return true;
}

void WorkerStatus::InternalSwap(WorkerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(max_rooms_, other->max_rooms_);
  swap(current_connections_, other->current_connections_);
  swap(allow_new_task_after_, other->allow_new_task_after_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomStatus::InitAsDefaultInstance() {
}
class RoomStatus::_Internal {
 public:
};

RoomStatus::RoomStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomStatus)
}
RoomStatus::RoomStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomStatus)
}
RoomStatus::RoomStatus(const RoomStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_connections_) -
    reinterpret_cast<char*>(&id_)) + sizeof(current_connections_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomStatus)
}

void RoomStatus::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_connections_) -
      reinterpret_cast<char*>(&id_)) + sizeof(current_connections_));
}

RoomStatus::~RoomStatus() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomStatus)
  SharedDtor();
}

void RoomStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RoomStatus::ArenaDtor(void* object) {
  RoomStatus* _this = reinterpret_cast< RoomStatus* >(object);
  (void)_this;
}
void RoomStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomStatus& RoomStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomStatus_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base);
  return *internal_default_instance();
}


void RoomStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_connections_) -
      reinterpret_cast<char*>(&id_)) + sizeof(current_connections_));
  _internal_metadata_.Clear();
}

const char* RoomStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 current_connections = 2;
  if (this->current_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_connections(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomStatus)
  return target;
}

size_t RoomStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 current_connections = 2;
  if (this->current_connections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_connections());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomStatus)
    MergeFrom(*source);
  }
}

void RoomStatus::MergeFrom(const RoomStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.current_connections() != 0) {
    _internal_set_current_connections(from._internal_current_connections());
  }
}

void RoomStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomStatus::CopyFrom(const RoomStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomStatus::IsInitialized() const {
  return true;
}

void RoomStatus::InternalSwap(RoomStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(current_connections_, other->current_connections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomTask::InitAsDefaultInstance() {
}
class RoomTask::_Internal {
 public:
};

RoomTask::RoomTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.RoomTask)
}
RoomTask::RoomTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.RoomTask)
}
RoomTask::RoomTask(const RoomTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worker_id_, &from.worker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&worker_id_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.RoomTask)
}

void RoomTask::SharedCtor() {
  ::memset(&worker_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&worker_id_)) + sizeof(room_id_));
}

RoomTask::~RoomTask() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.RoomTask)
  SharedDtor();
}

void RoomTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RoomTask::ArenaDtor(void* object) {
  RoomTask* _this = reinterpret_cast< RoomTask* >(object);
  (void)_this;
}
void RoomTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomTask& RoomTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomTask_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base);
  return *internal_default_instance();
}


void RoomTask::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.RoomTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&worker_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&worker_id_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

const char* RoomTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          worker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.RoomTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 worker_id = 1;
  if (this->worker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_worker_id(), target);
  }

  // int32 room_id = 2;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.RoomTask)
  return target;
}

size_t RoomTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.RoomTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 worker_id = 1;
  if (this->worker_id() != 0) {
    total_size += 1 + 8;
  }

  // int32 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.RoomTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.RoomTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.RoomTask)
    MergeFrom(*source);
  }
}

void RoomTask::MergeFrom(const RoomTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.RoomTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worker_id() != 0) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
}

void RoomTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.RoomTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomTask::CopyFrom(const RoomTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.RoomTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomTask::IsInitialized() const {
  return true;
}

void RoomTask::InternalSwap(RoomTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worker_id_, other->worker_id_);
  swap(room_id_, other->room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BilibiliLiveSupervisorDiagnostics::InitAsDefaultInstance() {
}
class BilibiliLiveSupervisorDiagnostics::_Internal {
 public:
};

BilibiliLiveSupervisorDiagnostics::BilibiliLiveSupervisorDiagnostics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
}
BilibiliLiveSupervisorDiagnostics::BilibiliLiveSupervisorDiagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  worker_statuses_(arena),
  room_statuses_(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
}
BilibiliLiveSupervisorDiagnostics::BilibiliLiveSupervisorDiagnostics(const BilibiliLiveSupervisorDiagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      worker_statuses_(from.worker_statuses_),
      room_statuses_(from.room_statuses_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_tasks_per_room_ = from.max_tasks_per_room_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
}

void BilibiliLiveSupervisorDiagnostics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base);
  max_tasks_per_room_ = 0;
}

BilibiliLiveSupervisorDiagnostics::~BilibiliLiveSupervisorDiagnostics() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  SharedDtor();
}

void BilibiliLiveSupervisorDiagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BilibiliLiveSupervisorDiagnostics::ArenaDtor(void* object) {
  BilibiliLiveSupervisorDiagnostics* _this = reinterpret_cast< BilibiliLiveSupervisorDiagnostics* >(object);
  (void)_this;
}
void BilibiliLiveSupervisorDiagnostics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BilibiliLiveSupervisorDiagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BilibiliLiveSupervisorDiagnostics& BilibiliLiveSupervisorDiagnostics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BilibiliLiveSupervisorDiagnostics_vNerve_2fbilibili_2flive_2fdiagnostics_2eproto.base);
  return *internal_default_instance();
}


void BilibiliLiveSupervisorDiagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_statuses_.Clear();
  room_statuses_.Clear();
  tasks_.Clear();
  max_tasks_per_room_ = 0;
  _internal_metadata_.Clear();
}

const char* BilibiliLiveSupervisorDiagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_tasks_per_room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_tasks_per_room_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vNerve.bilibili.live.WorkerStatus worker_statuses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vNerve.bilibili.live.RoomStatus room_statuses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_room_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vNerve.bilibili.live.RoomTask tasks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BilibiliLiveSupervisorDiagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_tasks_per_room = 1;
  if (this->max_tasks_per_room() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_tasks_per_room(), target);
  }

  // repeated .vNerve.bilibili.live.WorkerStatus worker_statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worker_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_worker_statuses(i), target, stream);
  }

  // repeated .vNerve.bilibili.live.RoomStatus room_statuses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_room_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_room_statuses(i), target, stream);
  }

  // repeated .vNerve.bilibili.live.RoomTask tasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  return target;
}

size_t BilibiliLiveSupervisorDiagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vNerve.bilibili.live.WorkerStatus worker_statuses = 2;
  total_size += 1UL * this->_internal_worker_statuses_size();
  for (const auto& msg : this->worker_statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vNerve.bilibili.live.RoomStatus room_statuses = 3;
  total_size += 1UL * this->_internal_room_statuses_size();
  for (const auto& msg : this->room_statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vNerve.bilibili.live.RoomTask tasks = 4;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 max_tasks_per_room = 1;
  if (this->max_tasks_per_room() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_tasks_per_room());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BilibiliLiveSupervisorDiagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const BilibiliLiveSupervisorDiagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BilibiliLiveSupervisorDiagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
    MergeFrom(*source);
  }
}

void BilibiliLiveSupervisorDiagnostics::MergeFrom(const BilibiliLiveSupervisorDiagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_statuses_.MergeFrom(from.worker_statuses_);
  room_statuses_.MergeFrom(from.room_statuses_);
  tasks_.MergeFrom(from.tasks_);
  if (from.max_tasks_per_room() != 0) {
    _internal_set_max_tasks_per_room(from._internal_max_tasks_per_room());
  }
}

void BilibiliLiveSupervisorDiagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BilibiliLiveSupervisorDiagnostics::CopyFrom(const BilibiliLiveSupervisorDiagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.live.BilibiliLiveSupervisorDiagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilibiliLiveSupervisorDiagnostics::IsInitialized() const {
  return true;
}

void BilibiliLiveSupervisorDiagnostics::InternalSwap(BilibiliLiveSupervisorDiagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  worker_statuses_.InternalSwap(&other->worker_statuses_);
  room_statuses_.InternalSwap(&other->room_statuses_);
  tasks_.InternalSwap(&other->tasks_);
  swap(max_tasks_per_room_, other->max_tasks_per_room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BilibiliLiveSupervisorDiagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::WorkerStatus* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::WorkerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::WorkerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomStatus* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::RoomTask* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::RoomTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::RoomTask >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics* Arena::CreateMaybeMessage< ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vNerve::bilibili::live::BilibiliLiveSupervisorDiagnostics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
