// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/livex/room_message_ex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vNerve/bilibili/live/room_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto;
namespace vNerve {
namespace bilibili {
namespace livex {
class RoomExtraInfoChangedMessage;
class RoomExtraInfoChangedMessageDefaultTypeInternal;
extern RoomExtraInfoChangedMessageDefaultTypeInternal _RoomExtraInfoChangedMessage_default_instance_;
class RoomMessageEx;
class RoomMessageExDefaultTypeInternal;
extern RoomMessageExDefaultTypeInternal _RoomMessageEx_default_instance_;
}  // namespace livex
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* Arena::CreateMaybeMessage<::vNerve::bilibili::livex::RoomExtraInfoChangedMessage>(Arena*);
template<> ::vNerve::bilibili::livex::RoomMessageEx* Arena::CreateMaybeMessage<::vNerve::bilibili::livex::RoomMessageEx>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {
namespace livex {

// ===================================================================

class RoomMessageEx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.livex.RoomMessageEx) */ {
 public:
  RoomMessageEx();
  virtual ~RoomMessageEx();

  RoomMessageEx(const RoomMessageEx& from);
  RoomMessageEx(RoomMessageEx&& from) noexcept
    : RoomMessageEx() {
    *this = ::std::move(from);
  }

  inline RoomMessageEx& operator=(const RoomMessageEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMessageEx& operator=(RoomMessageEx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomMessageEx& default_instance();

  enum PayloadCase {
    kExtraInfoChange = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomMessageEx* internal_default_instance() {
    return reinterpret_cast<const RoomMessageEx*>(
               &_RoomMessageEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomMessageEx& a, RoomMessageEx& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMessageEx* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomMessageEx* New() const final {
    return CreateMaybeMessage<RoomMessageEx>(nullptr);
  }

  RoomMessageEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomMessageEx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomMessageEx& from);
  void MergeFrom(const RoomMessageEx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMessageEx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.livex.RoomMessageEx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kExtraInfoChangeFieldNumber = 2,
  };
  // uint32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.bilibili.livex.RoomExtraInfoChangedMessage extra_info_change = 2;
  bool has_extra_info_change() const;
  private:
  bool _internal_has_extra_info_change() const;
  public:
  void clear_extra_info_change();
  const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage& extra_info_change() const;
  ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* release_extra_info_change();
  ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* mutable_extra_info_change();
  void set_allocated_extra_info_change(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* extra_info_change);
  private:
  const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage& _internal_extra_info_change() const;
  ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* _internal_mutable_extra_info_change();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.livex.RoomMessageEx)
 private:
  class _Internal;
  void set_has_extra_info_change();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* extra_info_change_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto;
};
// -------------------------------------------------------------------

class RoomExtraInfoChangedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.livex.RoomExtraInfoChangedMessage) */ {
 public:
  RoomExtraInfoChangedMessage();
  virtual ~RoomExtraInfoChangedMessage();

  RoomExtraInfoChangedMessage(const RoomExtraInfoChangedMessage& from);
  RoomExtraInfoChangedMessage(RoomExtraInfoChangedMessage&& from) noexcept
    : RoomExtraInfoChangedMessage() {
    *this = ::std::move(from);
  }

  inline RoomExtraInfoChangedMessage& operator=(const RoomExtraInfoChangedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomExtraInfoChangedMessage& operator=(RoomExtraInfoChangedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomExtraInfoChangedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomExtraInfoChangedMessage* internal_default_instance() {
    return reinterpret_cast<const RoomExtraInfoChangedMessage*>(
               &_RoomExtraInfoChangedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomExtraInfoChangedMessage& a, RoomExtraInfoChangedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomExtraInfoChangedMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomExtraInfoChangedMessage* New() const final {
    return CreateMaybeMessage<RoomExtraInfoChangedMessage>(nullptr);
  }

  RoomExtraInfoChangedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomExtraInfoChangedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomExtraInfoChangedMessage& from);
  void MergeFrom(const RoomExtraInfoChangedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomExtraInfoChangedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.livex.RoomExtraInfoChangedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kAreaFieldNumber = 4,
    kCoverFieldNumber = 5,
    kLiveStatusFieldNumber = 1,
    kStartLiveTimeFieldNumber = 16,
  };
  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string area = 4;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string cover = 5;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // .vNerve.bilibili.live.LiveStatus live_status = 1;
  void clear_live_status();
  ::vNerve::bilibili::live::LiveStatus live_status() const;
  void set_live_status(::vNerve::bilibili::live::LiveStatus value);
  private:
  ::vNerve::bilibili::live::LiveStatus _internal_live_status() const;
  void _internal_set_live_status(::vNerve::bilibili::live::LiveStatus value);
  public:

  // uint64 start_live_time = 16;
  void clear_start_live_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_live_time() const;
  void set_start_live_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_live_time() const;
  void _internal_set_start_live_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  int live_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_live_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomMessageEx

// uint32 room_id = 1;
inline void RoomMessageEx::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMessageEx::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomMessageEx::room_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomMessageEx.room_id)
  return _internal_room_id();
}
inline void RoomMessageEx::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void RoomMessageEx::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomMessageEx.room_id)
}

// .vNerve.bilibili.livex.RoomExtraInfoChangedMessage extra_info_change = 2;
inline bool RoomMessageEx::_internal_has_extra_info_change() const {
  return payload_case() == kExtraInfoChange;
}
inline bool RoomMessageEx::has_extra_info_change() const {
  return _internal_has_extra_info_change();
}
inline void RoomMessageEx::set_has_extra_info_change() {
  _oneof_case_[0] = kExtraInfoChange;
}
inline void RoomMessageEx::clear_extra_info_change() {
  if (_internal_has_extra_info_change()) {
    delete payload_.extra_info_change_;
    clear_has_payload();
  }
}
inline ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* RoomMessageEx::release_extra_info_change() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.livex.RoomMessageEx.extra_info_change)
  if (_internal_has_extra_info_change()) {
    clear_has_payload();
      ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* temp = payload_.extra_info_change_;
    payload_.extra_info_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage& RoomMessageEx::_internal_extra_info_change() const {
  return _internal_has_extra_info_change()
      ? *payload_.extra_info_change_
      : *reinterpret_cast< ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage*>(&::vNerve::bilibili::livex::_RoomExtraInfoChangedMessage_default_instance_);
}
inline const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage& RoomMessageEx::extra_info_change() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomMessageEx.extra_info_change)
  return _internal_extra_info_change();
}
inline ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* RoomMessageEx::_internal_mutable_extra_info_change() {
  if (!_internal_has_extra_info_change()) {
    clear_payload();
    set_has_extra_info_change();
    payload_.extra_info_change_ = CreateMaybeMessage< ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage >(
        GetArenaNoVirtual());
  }
  return payload_.extra_info_change_;
}
inline ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* RoomMessageEx::mutable_extra_info_change() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.livex.RoomMessageEx.extra_info_change)
  return _internal_mutable_extra_info_change();
}

inline bool RoomMessageEx::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void RoomMessageEx::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline RoomMessageEx::PayloadCase RoomMessageEx::payload_case() const {
  return RoomMessageEx::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomExtraInfoChangedMessage

// .vNerve.bilibili.live.LiveStatus live_status = 1;
inline void RoomExtraInfoChangedMessage::clear_live_status() {
  live_status_ = 0;
}
inline ::vNerve::bilibili::live::LiveStatus RoomExtraInfoChangedMessage::_internal_live_status() const {
  return static_cast< ::vNerve::bilibili::live::LiveStatus >(live_status_);
}
inline ::vNerve::bilibili::live::LiveStatus RoomExtraInfoChangedMessage::live_status() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.live_status)
  return _internal_live_status();
}
inline void RoomExtraInfoChangedMessage::_internal_set_live_status(::vNerve::bilibili::live::LiveStatus value) {
  
  live_status_ = value;
}
inline void RoomExtraInfoChangedMessage::set_live_status(::vNerve::bilibili::live::LiveStatus value) {
  _internal_set_live_status(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.live_status)
}

// string title = 3;
inline void RoomExtraInfoChangedMessage::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomExtraInfoChangedMessage::title() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
  return _internal_title();
}
inline void RoomExtraInfoChangedMessage::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
}
inline std::string* RoomExtraInfoChangedMessage::mutable_title() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
  return _internal_mutable_title();
}
inline const std::string& RoomExtraInfoChangedMessage::_internal_title() const {
  return title_.GetNoArena();
}
inline void RoomExtraInfoChangedMessage::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoomExtraInfoChangedMessage::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
}
inline void RoomExtraInfoChangedMessage::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
}
inline void RoomExtraInfoChangedMessage::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
}
inline std::string* RoomExtraInfoChangedMessage::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomExtraInfoChangedMessage::release_title() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomExtraInfoChangedMessage::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title)
}

// string area = 4;
inline void RoomExtraInfoChangedMessage::clear_area() {
  area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomExtraInfoChangedMessage::area() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
  return _internal_area();
}
inline void RoomExtraInfoChangedMessage::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
}
inline std::string* RoomExtraInfoChangedMessage::mutable_area() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
  return _internal_mutable_area();
}
inline const std::string& RoomExtraInfoChangedMessage::_internal_area() const {
  return area_.GetNoArena();
}
inline void RoomExtraInfoChangedMessage::_internal_set_area(const std::string& value) {
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoomExtraInfoChangedMessage::set_area(std::string&& value) {
  
  area_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
}
inline void RoomExtraInfoChangedMessage::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
}
inline void RoomExtraInfoChangedMessage::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
}
inline std::string* RoomExtraInfoChangedMessage::_internal_mutable_area() {
  
  return area_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomExtraInfoChangedMessage::release_area() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
  
  return area_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomExtraInfoChangedMessage::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area)
}

// string cover = 5;
inline void RoomExtraInfoChangedMessage::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomExtraInfoChangedMessage::cover() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
  return _internal_cover();
}
inline void RoomExtraInfoChangedMessage::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
}
inline std::string* RoomExtraInfoChangedMessage::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
  return _internal_mutable_cover();
}
inline const std::string& RoomExtraInfoChangedMessage::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void RoomExtraInfoChangedMessage::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoomExtraInfoChangedMessage::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
}
inline void RoomExtraInfoChangedMessage::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
}
inline void RoomExtraInfoChangedMessage::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
}
inline std::string* RoomExtraInfoChangedMessage::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomExtraInfoChangedMessage::release_cover() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomExtraInfoChangedMessage::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover)
}

// uint64 start_live_time = 16;
inline void RoomExtraInfoChangedMessage::clear_start_live_time() {
  start_live_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomExtraInfoChangedMessage::_internal_start_live_time() const {
  return start_live_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoomExtraInfoChangedMessage::start_live_time() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.start_live_time)
  return _internal_start_live_time();
}
inline void RoomExtraInfoChangedMessage::_internal_set_start_live_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_live_time_ = value;
}
inline void RoomExtraInfoChangedMessage::set_start_live_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_live_time(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.livex.RoomExtraInfoChangedMessage.start_live_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace livex
}  // namespace bilibili
}  // namespace vNerve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto
