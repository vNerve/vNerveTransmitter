// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/livex/room_message_ex.proto

#include "vNerve/bilibili/livex/room_message_ex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto;
namespace vNerve {
namespace bilibili {
namespace livex {
class RoomMessageExDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomMessageEx> _instance;
  const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* extra_info_change_;
} _RoomMessageEx_default_instance_;
class RoomExtraInfoChangedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomExtraInfoChangedMessage> _instance;
} _RoomExtraInfoChangedMessage_default_instance_;
}  // namespace livex
}  // namespace bilibili
}  // namespace vNerve
static void InitDefaultsscc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::livex::_RoomExtraInfoChangedMessage_default_instance_;
    new (ptr) ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto}, {}};

static void InitDefaultsscc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::livex::_RoomMessageEx_default_instance_;
    new (ptr) ::vNerve::bilibili::livex::RoomMessageEx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::livex::RoomMessageEx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto}, {
      &scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomMessageEx, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomMessageEx, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomMessageEx, room_id_),
  offsetof(::vNerve::bilibili::livex::RoomMessageExDefaultTypeInternal, extra_info_change_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomMessageEx, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, live_status_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, title_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, area_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, cover_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage, start_live_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::bilibili::livex::RoomMessageEx)},
  { 8, -1, sizeof(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::livex::_RoomMessageEx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::livex::_RoomExtraInfoChangedMessage_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+vNerve/bilibili/livex/room_message_ex."
  "proto\022\025vNerve.bilibili.livex\032\'vNerve/bil"
  "ibili/live/room_message.proto\"|\n\rRoomMes"
  "sageEx\022\017\n\007room_id\030\001 \001(\r\022O\n\021extra_info_ch"
  "ange\030\002 \001(\01322.vNerve.bilibili.livex.RoomE"
  "xtraInfoChangedMessageH\000B\t\n\007payload\"\231\001\n\033"
  "RoomExtraInfoChangedMessage\0225\n\013live_stat"
  "us\030\001 \001(\0162 .vNerve.bilibili.live.LiveStat"
  "us\022\r\n\005title\030\003 \001(\t\022\014\n\004area\030\004 \001(\t\022\r\n\005cover"
  "\030\005 \001(\t\022\027\n\017start_live_time\030\020 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_deps[1] = {
  &::descriptor_table_vNerve_2fbilibili_2flive_2froom_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_sccs[2] = {
  &scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base,
  &scc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_once;
static bool descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto = {
  &descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_initialized, descriptor_table_protodef_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto, "vNerve/bilibili/livex/room_message_ex.proto", 399,
  &descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_once, descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_sccs, descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto::offsets,
  file_level_metadata_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto, 2, file_level_enum_descriptors_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto, file_level_service_descriptors_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto), true);
namespace vNerve {
namespace bilibili {
namespace livex {

// ===================================================================

void RoomMessageEx::InitAsDefaultInstance() {
  ::vNerve::bilibili::livex::_RoomMessageEx_default_instance_.extra_info_change_ = const_cast< ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage*>(
      ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage::internal_default_instance());
}
class RoomMessageEx::_Internal {
 public:
  static const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage& extra_info_change(const RoomMessageEx* msg);
};

const ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage&
RoomMessageEx::_Internal::extra_info_change(const RoomMessageEx* msg) {
  return *msg->payload_.extra_info_change_;
}
void RoomMessageEx::set_allocated_extra_info_change(::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* extra_info_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (extra_info_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extra_info_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_info_change, submessage_arena);
    }
    set_has_extra_info_change();
    payload_.extra_info_change_ = extra_info_change;
  }
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.livex.RoomMessageEx.extra_info_change)
}
RoomMessageEx::RoomMessageEx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.livex.RoomMessageEx)
}
RoomMessageEx::RoomMessageEx(const RoomMessageEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kExtraInfoChange: {
      _internal_mutable_extra_info_change()->::vNerve::bilibili::livex::RoomExtraInfoChangedMessage::MergeFrom(from._internal_extra_info_change());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.livex.RoomMessageEx)
}

void RoomMessageEx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base);
  room_id_ = 0u;
  clear_has_payload();
}

RoomMessageEx::~RoomMessageEx() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.livex.RoomMessageEx)
  SharedDtor();
}

void RoomMessageEx::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void RoomMessageEx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMessageEx& RoomMessageEx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomMessageEx_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base);
  return *internal_default_instance();
}


void RoomMessageEx::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:vNerve.bilibili.livex.RoomMessageEx)
  switch (payload_case()) {
    case kExtraInfoChange: {
      delete payload_.extra_info_change_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void RoomMessageEx::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.livex.RoomMessageEx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_ = 0u;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* RoomMessageEx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.livex.RoomExtraInfoChangedMessage extra_info_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_info_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomMessageEx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.livex.RoomMessageEx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_room_id(), target);
  }

  // .vNerve.bilibili.livex.RoomExtraInfoChangedMessage extra_info_change = 2;
  if (_internal_has_extra_info_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extra_info_change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.livex.RoomMessageEx)
  return target;
}

size_t RoomMessageEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.livex.RoomMessageEx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_id());
  }

  switch (payload_case()) {
    // .vNerve.bilibili.livex.RoomExtraInfoChangedMessage extra_info_change = 2;
    case kExtraInfoChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.extra_info_change_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMessageEx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.livex.RoomMessageEx)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMessageEx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomMessageEx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.livex.RoomMessageEx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.livex.RoomMessageEx)
    MergeFrom(*source);
  }
}

void RoomMessageEx::MergeFrom(const RoomMessageEx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.livex.RoomMessageEx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  switch (from.payload_case()) {
    case kExtraInfoChange: {
      _internal_mutable_extra_info_change()->::vNerve::bilibili::livex::RoomExtraInfoChangedMessage::MergeFrom(from._internal_extra_info_change());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void RoomMessageEx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.livex.RoomMessageEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMessageEx::CopyFrom(const RoomMessageEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.livex.RoomMessageEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessageEx::IsInitialized() const {
  return true;
}

void RoomMessageEx::InternalSwap(RoomMessageEx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_id_, other->room_id_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMessageEx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomExtraInfoChangedMessage::InitAsDefaultInstance() {
}
class RoomExtraInfoChangedMessage::_Internal {
 public:
};

RoomExtraInfoChangedMessage::RoomExtraInfoChangedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
}
RoomExtraInfoChangedMessage::RoomExtraInfoChangedMessage(const RoomExtraInfoChangedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area().empty()) {
    area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  ::memcpy(&live_status_, &from.live_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_live_time_) -
    reinterpret_cast<char*>(&live_status_)) + sizeof(start_live_time_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
}

void RoomExtraInfoChangedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&live_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_live_time_) -
      reinterpret_cast<char*>(&live_status_)) + sizeof(start_live_time_));
}

RoomExtraInfoChangedMessage::~RoomExtraInfoChangedMessage() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  SharedDtor();
}

void RoomExtraInfoChangedMessage::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomExtraInfoChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomExtraInfoChangedMessage& RoomExtraInfoChangedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomExtraInfoChangedMessage_vNerve_2fbilibili_2flivex_2froom_5fmessage_5fex_2eproto.base);
  return *internal_default_instance();
}


void RoomExtraInfoChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&live_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_live_time_) -
      reinterpret_cast<char*>(&live_status_)) + sizeof(start_live_time_));
  _internal_metadata_.Clear();
}

const char* RoomExtraInfoChangedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vNerve.bilibili.live.LiveStatus live_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_live_status(static_cast<::vNerve::bilibili::live::LiveStatus>(val));
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_live_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          start_live_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomExtraInfoChangedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vNerve.bilibili.live.LiveStatus live_status = 1;
  if (this->live_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_live_status(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string area = 4;
  if (this->area().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area().data(), static_cast<int>(this->_internal_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.area");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_area(), target);
  }

  // string cover = 5;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.livex.RoomExtraInfoChangedMessage.cover");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cover(), target);
  }

  // uint64 start_live_time = 16;
  if (this->start_live_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_start_live_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  return target;
}

size_t RoomExtraInfoChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string area = 4;
  if (this->area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area());
  }

  // string cover = 5;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // .vNerve.bilibili.live.LiveStatus live_status = 1;
  if (this->live_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_live_status());
  }

  // uint64 start_live_time = 16;
  if (this->start_live_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_live_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomExtraInfoChangedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomExtraInfoChangedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomExtraInfoChangedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
    MergeFrom(*source);
  }
}

void RoomExtraInfoChangedMessage::MergeFrom(const RoomExtraInfoChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.area().size() > 0) {

    area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.live_status() != 0) {
    _internal_set_live_status(from._internal_live_status());
  }
  if (from.start_live_time() != 0) {
    _internal_set_start_live_time(from._internal_start_live_time());
  }
}

void RoomExtraInfoChangedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomExtraInfoChangedMessage::CopyFrom(const RoomExtraInfoChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.livex.RoomExtraInfoChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomExtraInfoChangedMessage::IsInitialized() const {
  return true;
}

void RoomExtraInfoChangedMessage::InternalSwap(RoomExtraInfoChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  area_.Swap(&other->area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(live_status_, other->live_status_);
  swap(start_live_time_, other->start_live_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomExtraInfoChangedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace livex
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::livex::RoomMessageEx* Arena::CreateMaybeMessage< ::vNerve::bilibili::livex::RoomMessageEx >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::livex::RoomMessageEx >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage* Arena::CreateMaybeMessage< ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::livex::RoomExtraInfoChangedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
