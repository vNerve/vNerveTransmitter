// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/analyst/bilibili/live/bilive_analyst.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto;
namespace vNerve {
namespace analyst {
namespace bilibili {
namespace live {
class BiLiveStatistic;
class BiLiveStatisticDefaultTypeInternal;
extern BiLiveStatisticDefaultTypeInternal _BiLiveStatistic_default_instance_;
class BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse;
class BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUseDefaultTypeInternal;
extern BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUseDefaultTypeInternal _BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_default_instance_;
class BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse;
class BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUseDefaultTypeInternal;
extern BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUseDefaultTypeInternal _BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace analyst
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::analyst::bilibili::live::BiLiveStatistic* Arena::CreateMaybeMessage<::vNerve::analyst::bilibili::live::BiLiveStatistic>(Arena*);
template<> ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse* Arena::CreateMaybeMessage<::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse>(Arena*);
template<> ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse* Arena::CreateMaybeMessage<::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace analyst {
namespace bilibili {
namespace live {

enum BiLiveStatisticType : int {
  SLICE = 0,
  SESSION = 1,
  BiLiveStatisticType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BiLiveStatisticType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BiLiveStatisticType_IsValid(int value);
constexpr BiLiveStatisticType BiLiveStatisticType_MIN = SLICE;
constexpr BiLiveStatisticType BiLiveStatisticType_MAX = SESSION;
constexpr int BiLiveStatisticType_ARRAYSIZE = BiLiveStatisticType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiLiveStatisticType_descriptor();
template<typename T>
inline const std::string& BiLiveStatisticType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiLiveStatisticType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiLiveStatisticType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BiLiveStatisticType_descriptor(), enum_t_value);
}
inline bool BiLiveStatisticType_Parse(
    const std::string& name, BiLiveStatisticType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BiLiveStatisticType>(
    BiLiveStatisticType_descriptor(), name, value);
}
// ===================================================================

class BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse();
  BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse& other);
  static const BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse*>(&_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto);
    return ::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse();
  BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse& other);
  static const BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse*>(&_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto);
    return ::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class BiLiveStatistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.analyst.bilibili.live.BiLiveStatistic) */ {
 public:
  BiLiveStatistic();
  virtual ~BiLiveStatistic();

  BiLiveStatistic(const BiLiveStatistic& from);
  BiLiveStatistic(BiLiveStatistic&& from) noexcept
    : BiLiveStatistic() {
    *this = ::std::move(from);
  }

  inline BiLiveStatistic& operator=(const BiLiveStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiLiveStatistic& operator=(BiLiveStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiLiveStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiLiveStatistic* internal_default_instance() {
    return reinterpret_cast<const BiLiveStatistic*>(
               &_BiLiveStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BiLiveStatistic& a, BiLiveStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(BiLiveStatistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiLiveStatistic* New() const final {
    return CreateMaybeMessage<BiLiveStatistic>(nullptr);
  }

  BiLiveStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiLiveStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiLiveStatistic& from);
  void MergeFrom(const BiLiveStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiLiveStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.analyst.bilibili.live.BiLiveStatistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto);
    return ::descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRealDanmakuUsersFieldNumber = 16,
    kLotteryDanmakuUsersFieldNumber = 17,
    kGoldUsersAndCoinFieldNumber = 18,
    kSilverUsersAndCoinFieldNumber = 19,
    kParticipatedUsersFieldNumber = 20,
    kTitleFieldNumber = 8,
    kAreaFieldNumber = 9,
    kCoverFieldNumber = 10,
    kStartFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kMaxPopularityFieldNumber = 4,
    kEndFieldNumber = 3,
    kLastPopularityFieldNumber = 5,
    kGoldCoinFieldNumber = 6,
    kSilverCoinFieldNumber = 7,
    kTypeFieldNumber = 11,
  };
  // repeated uint64 real_danmaku_users = 16;
  int real_danmaku_users_size() const;
  private:
  int _internal_real_danmaku_users_size() const;
  public:
  void clear_real_danmaku_users();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_real_danmaku_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_real_danmaku_users() const;
  void _internal_add_real_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_real_danmaku_users();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 real_danmaku_users(int index) const;
  void set_real_danmaku_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_real_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      real_danmaku_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_real_danmaku_users();

  // repeated uint64 lottery_danmaku_users = 17;
  int lottery_danmaku_users_size() const;
  private:
  int _internal_lottery_danmaku_users_size() const;
  public:
  void clear_lottery_danmaku_users();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lottery_danmaku_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_lottery_danmaku_users() const;
  void _internal_add_lottery_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_lottery_danmaku_users();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 lottery_danmaku_users(int index) const;
  void set_lottery_danmaku_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_lottery_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      lottery_danmaku_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_lottery_danmaku_users();

  // map<uint64, uint32> gold_users_and_coin = 18;
  int gold_users_and_coin_size() const;
  private:
  int _internal_gold_users_and_coin_size() const;
  public:
  void clear_gold_users_and_coin();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_gold_users_and_coin() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_gold_users_and_coin();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      gold_users_and_coin() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_gold_users_and_coin();

  // map<uint64, uint32> silver_users_and_coin = 19;
  int silver_users_and_coin_size() const;
  private:
  int _internal_silver_users_and_coin_size() const;
  public:
  void clear_silver_users_and_coin();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_silver_users_and_coin() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_silver_users_and_coin();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      silver_users_and_coin() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_silver_users_and_coin();

  // repeated uint64 participated_users = 20;
  int participated_users_size() const;
  private:
  int _internal_participated_users_size() const;
  public:
  void clear_participated_users();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_participated_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_participated_users() const;
  void _internal_add_participated_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_participated_users();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 participated_users(int index) const;
  void set_participated_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_participated_users(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      participated_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_participated_users();

  // string title = 8;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string area = 9;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string cover = 10;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // uint64 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_popularity = 4;
  void clear_max_popularity();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_popularity() const;
  void set_max_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_popularity() const;
  void _internal_set_max_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 last_popularity = 5;
  void clear_last_popularity();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_popularity() const;
  void set_last_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_popularity() const;
  void _internal_set_last_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gold_coin = 6;
  void clear_gold_coin();
  ::PROTOBUF_NAMESPACE_ID::uint32 gold_coin() const;
  void set_gold_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gold_coin() const;
  void _internal_set_gold_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 silver_coin = 7;
  void clear_silver_coin();
  ::PROTOBUF_NAMESPACE_ID::uint32 silver_coin() const;
  void set_silver_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_silver_coin() const;
  void _internal_set_silver_coin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vNerve.analyst.bilibili.live.BiLiveStatisticType type = 11;
  void clear_type();
  ::vNerve::analyst::bilibili::live::BiLiveStatisticType type() const;
  void set_type(::vNerve::analyst::bilibili::live::BiLiveStatisticType value);
  private:
  ::vNerve::analyst::bilibili::live::BiLiveStatisticType _internal_type() const;
  void _internal_set_type(::vNerve::analyst::bilibili::live::BiLiveStatisticType value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.analyst.bilibili.live.BiLiveStatistic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > real_danmaku_users_;
  mutable std::atomic<int> _real_danmaku_users_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > lottery_danmaku_users_;
  mutable std::atomic<int> _lottery_danmaku_users_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > gold_users_and_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > silver_users_and_coin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > participated_users_;
  mutable std::atomic<int> _participated_users_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_popularity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_popularity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gold_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 silver_coin_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BiLiveStatistic

// uint32 room_id = 1;
inline void BiLiveStatistic::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::room_id() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.room_id)
  return _internal_room_id();
}
inline void BiLiveStatistic::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void BiLiveStatistic::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.room_id)
}

// uint64 start = 2;
inline void BiLiveStatistic::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::start() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.start)
  return _internal_start();
}
inline void BiLiveStatistic::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ = value;
}
inline void BiLiveStatistic::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.start)
}

// uint64 end = 3;
inline void BiLiveStatistic::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::end() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.end)
  return _internal_end();
}
inline void BiLiveStatistic::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_ = value;
}
inline void BiLiveStatistic::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.end)
}

// uint32 max_popularity = 4;
inline void BiLiveStatistic::clear_max_popularity() {
  max_popularity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::_internal_max_popularity() const {
  return max_popularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::max_popularity() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.max_popularity)
  return _internal_max_popularity();
}
inline void BiLiveStatistic::_internal_set_max_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_popularity_ = value;
}
inline void BiLiveStatistic::set_max_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_popularity(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.max_popularity)
}

// uint32 last_popularity = 5;
inline void BiLiveStatistic::clear_last_popularity() {
  last_popularity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::_internal_last_popularity() const {
  return last_popularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::last_popularity() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.last_popularity)
  return _internal_last_popularity();
}
inline void BiLiveStatistic::_internal_set_last_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_popularity_ = value;
}
inline void BiLiveStatistic::set_last_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_popularity(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.last_popularity)
}

// uint32 gold_coin = 6;
inline void BiLiveStatistic::clear_gold_coin() {
  gold_coin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::_internal_gold_coin() const {
  return gold_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::gold_coin() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.gold_coin)
  return _internal_gold_coin();
}
inline void BiLiveStatistic::_internal_set_gold_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gold_coin_ = value;
}
inline void BiLiveStatistic::set_gold_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gold_coin(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.gold_coin)
}

// uint32 silver_coin = 7;
inline void BiLiveStatistic::clear_silver_coin() {
  silver_coin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::_internal_silver_coin() const {
  return silver_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BiLiveStatistic::silver_coin() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.silver_coin)
  return _internal_silver_coin();
}
inline void BiLiveStatistic::_internal_set_silver_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  silver_coin_ = value;
}
inline void BiLiveStatistic::set_silver_coin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_silver_coin(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.silver_coin)
}

// string title = 8;
inline void BiLiveStatistic::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BiLiveStatistic::title() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
  return _internal_title();
}
inline void BiLiveStatistic::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
}
inline std::string* BiLiveStatistic::mutable_title() {
  // @@protoc_insertion_point(field_mutable:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
  return _internal_mutable_title();
}
inline const std::string& BiLiveStatistic::_internal_title() const {
  return title_.GetNoArena();
}
inline void BiLiveStatistic::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BiLiveStatistic::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
}
inline void BiLiveStatistic::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
}
inline void BiLiveStatistic::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
}
inline std::string* BiLiveStatistic::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BiLiveStatistic::release_title() {
  // @@protoc_insertion_point(field_release:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BiLiveStatistic::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:vNerve.analyst.bilibili.live.BiLiveStatistic.title)
}

// string area = 9;
inline void BiLiveStatistic::clear_area() {
  area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BiLiveStatistic::area() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
  return _internal_area();
}
inline void BiLiveStatistic::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
}
inline std::string* BiLiveStatistic::mutable_area() {
  // @@protoc_insertion_point(field_mutable:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
  return _internal_mutable_area();
}
inline const std::string& BiLiveStatistic::_internal_area() const {
  return area_.GetNoArena();
}
inline void BiLiveStatistic::_internal_set_area(const std::string& value) {
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BiLiveStatistic::set_area(std::string&& value) {
  
  area_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
}
inline void BiLiveStatistic::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
}
inline void BiLiveStatistic::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
}
inline std::string* BiLiveStatistic::_internal_mutable_area() {
  
  return area_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BiLiveStatistic::release_area() {
  // @@protoc_insertion_point(field_release:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
  
  return area_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BiLiveStatistic::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:vNerve.analyst.bilibili.live.BiLiveStatistic.area)
}

// string cover = 10;
inline void BiLiveStatistic::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BiLiveStatistic::cover() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
  return _internal_cover();
}
inline void BiLiveStatistic::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
}
inline std::string* BiLiveStatistic::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
  return _internal_mutable_cover();
}
inline const std::string& BiLiveStatistic::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void BiLiveStatistic::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BiLiveStatistic::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
}
inline void BiLiveStatistic::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
}
inline void BiLiveStatistic::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
}
inline std::string* BiLiveStatistic::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BiLiveStatistic::release_cover() {
  // @@protoc_insertion_point(field_release:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BiLiveStatistic::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:vNerve.analyst.bilibili.live.BiLiveStatistic.cover)
}

// .vNerve.analyst.bilibili.live.BiLiveStatisticType type = 11;
inline void BiLiveStatistic::clear_type() {
  type_ = 0;
}
inline ::vNerve::analyst::bilibili::live::BiLiveStatisticType BiLiveStatistic::_internal_type() const {
  return static_cast< ::vNerve::analyst::bilibili::live::BiLiveStatisticType >(type_);
}
inline ::vNerve::analyst::bilibili::live::BiLiveStatisticType BiLiveStatistic::type() const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.type)
  return _internal_type();
}
inline void BiLiveStatistic::_internal_set_type(::vNerve::analyst::bilibili::live::BiLiveStatisticType value) {
  
  type_ = value;
}
inline void BiLiveStatistic::set_type(::vNerve::analyst::bilibili::live::BiLiveStatisticType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.type)
}

// repeated uint64 real_danmaku_users = 16;
inline int BiLiveStatistic::_internal_real_danmaku_users_size() const {
  return real_danmaku_users_.size();
}
inline int BiLiveStatistic::real_danmaku_users_size() const {
  return _internal_real_danmaku_users_size();
}
inline void BiLiveStatistic::clear_real_danmaku_users() {
  real_danmaku_users_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::_internal_real_danmaku_users(int index) const {
  return real_danmaku_users_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::real_danmaku_users(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.real_danmaku_users)
  return _internal_real_danmaku_users(index);
}
inline void BiLiveStatistic::set_real_danmaku_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  real_danmaku_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.real_danmaku_users)
}
inline void BiLiveStatistic::_internal_add_real_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  real_danmaku_users_.Add(value);
}
inline void BiLiveStatistic::add_real_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_real_danmaku_users(value);
  // @@protoc_insertion_point(field_add:vNerve.analyst.bilibili.live.BiLiveStatistic.real_danmaku_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::_internal_real_danmaku_users() const {
  return real_danmaku_users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::real_danmaku_users() const {
  // @@protoc_insertion_point(field_list:vNerve.analyst.bilibili.live.BiLiveStatistic.real_danmaku_users)
  return _internal_real_danmaku_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::_internal_mutable_real_danmaku_users() {
  return &real_danmaku_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::mutable_real_danmaku_users() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.analyst.bilibili.live.BiLiveStatistic.real_danmaku_users)
  return _internal_mutable_real_danmaku_users();
}

// repeated uint64 lottery_danmaku_users = 17;
inline int BiLiveStatistic::_internal_lottery_danmaku_users_size() const {
  return lottery_danmaku_users_.size();
}
inline int BiLiveStatistic::lottery_danmaku_users_size() const {
  return _internal_lottery_danmaku_users_size();
}
inline void BiLiveStatistic::clear_lottery_danmaku_users() {
  lottery_danmaku_users_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::_internal_lottery_danmaku_users(int index) const {
  return lottery_danmaku_users_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::lottery_danmaku_users(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.lottery_danmaku_users)
  return _internal_lottery_danmaku_users(index);
}
inline void BiLiveStatistic::set_lottery_danmaku_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  lottery_danmaku_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.lottery_danmaku_users)
}
inline void BiLiveStatistic::_internal_add_lottery_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  lottery_danmaku_users_.Add(value);
}
inline void BiLiveStatistic::add_lottery_danmaku_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_lottery_danmaku_users(value);
  // @@protoc_insertion_point(field_add:vNerve.analyst.bilibili.live.BiLiveStatistic.lottery_danmaku_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::_internal_lottery_danmaku_users() const {
  return lottery_danmaku_users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::lottery_danmaku_users() const {
  // @@protoc_insertion_point(field_list:vNerve.analyst.bilibili.live.BiLiveStatistic.lottery_danmaku_users)
  return _internal_lottery_danmaku_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::_internal_mutable_lottery_danmaku_users() {
  return &lottery_danmaku_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::mutable_lottery_danmaku_users() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.analyst.bilibili.live.BiLiveStatistic.lottery_danmaku_users)
  return _internal_mutable_lottery_danmaku_users();
}

// map<uint64, uint32> gold_users_and_coin = 18;
inline int BiLiveStatistic::_internal_gold_users_and_coin_size() const {
  return gold_users_and_coin_.size();
}
inline int BiLiveStatistic::gold_users_and_coin_size() const {
  return _internal_gold_users_and_coin_size();
}
inline void BiLiveStatistic::clear_gold_users_and_coin() {
  gold_users_and_coin_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
BiLiveStatistic::_internal_gold_users_and_coin() const {
  return gold_users_and_coin_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
BiLiveStatistic::gold_users_and_coin() const {
  // @@protoc_insertion_point(field_map:vNerve.analyst.bilibili.live.BiLiveStatistic.gold_users_and_coin)
  return _internal_gold_users_and_coin();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
BiLiveStatistic::_internal_mutable_gold_users_and_coin() {
  return gold_users_and_coin_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
BiLiveStatistic::mutable_gold_users_and_coin() {
  // @@protoc_insertion_point(field_mutable_map:vNerve.analyst.bilibili.live.BiLiveStatistic.gold_users_and_coin)
  return _internal_mutable_gold_users_and_coin();
}

// map<uint64, uint32> silver_users_and_coin = 19;
inline int BiLiveStatistic::_internal_silver_users_and_coin_size() const {
  return silver_users_and_coin_.size();
}
inline int BiLiveStatistic::silver_users_and_coin_size() const {
  return _internal_silver_users_and_coin_size();
}
inline void BiLiveStatistic::clear_silver_users_and_coin() {
  silver_users_and_coin_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
BiLiveStatistic::_internal_silver_users_and_coin() const {
  return silver_users_and_coin_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >&
BiLiveStatistic::silver_users_and_coin() const {
  // @@protoc_insertion_point(field_map:vNerve.analyst.bilibili.live.BiLiveStatistic.silver_users_and_coin)
  return _internal_silver_users_and_coin();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
BiLiveStatistic::_internal_mutable_silver_users_and_coin() {
  return silver_users_and_coin_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >*
BiLiveStatistic::mutable_silver_users_and_coin() {
  // @@protoc_insertion_point(field_mutable_map:vNerve.analyst.bilibili.live.BiLiveStatistic.silver_users_and_coin)
  return _internal_mutable_silver_users_and_coin();
}

// repeated uint64 participated_users = 20;
inline int BiLiveStatistic::_internal_participated_users_size() const {
  return participated_users_.size();
}
inline int BiLiveStatistic::participated_users_size() const {
  return _internal_participated_users_size();
}
inline void BiLiveStatistic::clear_participated_users() {
  participated_users_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::_internal_participated_users(int index) const {
  return participated_users_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BiLiveStatistic::participated_users(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.analyst.bilibili.live.BiLiveStatistic.participated_users)
  return _internal_participated_users(index);
}
inline void BiLiveStatistic::set_participated_users(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  participated_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:vNerve.analyst.bilibili.live.BiLiveStatistic.participated_users)
}
inline void BiLiveStatistic::_internal_add_participated_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  participated_users_.Add(value);
}
inline void BiLiveStatistic::add_participated_users(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_participated_users(value);
  // @@protoc_insertion_point(field_add:vNerve.analyst.bilibili.live.BiLiveStatistic.participated_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::_internal_participated_users() const {
  return participated_users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BiLiveStatistic::participated_users() const {
  // @@protoc_insertion_point(field_list:vNerve.analyst.bilibili.live.BiLiveStatistic.participated_users)
  return _internal_participated_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::_internal_mutable_participated_users() {
  return &participated_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BiLiveStatistic::mutable_participated_users() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.analyst.bilibili.live.BiLiveStatistic.participated_users)
  return _internal_mutable_participated_users();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace bilibili
}  // namespace analyst
}  // namespace vNerve

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vNerve::analyst::bilibili::live::BiLiveStatisticType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::analyst::bilibili::live::BiLiveStatisticType>() {
  return ::vNerve::analyst::bilibili::live::BiLiveStatisticType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto
