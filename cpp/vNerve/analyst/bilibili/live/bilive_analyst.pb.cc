// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/analyst/bilibili/live/bilive_analyst.proto

#include "vNerve/analyst/bilibili/live/bilive_analyst.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto;
namespace vNerve {
namespace analyst {
namespace bilibili {
namespace live {
class BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse> _instance;
} _BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_default_instance_;
class BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse> _instance;
} _BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_default_instance_;
class BiLiveStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiLiveStatistic> _instance;
} _BiLiveStatistic_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace analyst
}  // namespace vNerve
static void InitDefaultsscc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::analyst::bilibili::live::_BiLiveStatistic_default_instance_;
    new (ptr) ::vNerve::analyst::bilibili::live::BiLiveStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::analyst::bilibili::live::BiLiveStatistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto}, {
      &scc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base,
      &scc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base,}};

static void InitDefaultsscc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::analyst::bilibili::live::_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_default_instance_;
    new (ptr) ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse();
  }
  ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto}, {}};

static void InitDefaultsscc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::analyst::bilibili::live::_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_default_instance_;
    new (ptr) ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse();
  }
  ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, room_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, start_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, end_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, max_popularity_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, last_popularity_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, gold_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, silver_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, title_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, area_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, cover_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, type_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, real_danmaku_users_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, lottery_danmaku_users_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, gold_users_and_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, silver_users_and_coin_),
  PROTOBUF_FIELD_OFFSET(::vNerve::analyst::bilibili::live::BiLiveStatistic, participated_users_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse)},
  { 9, 16, sizeof(::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse)},
  { 18, -1, sizeof(::vNerve::analyst::bilibili::live::BiLiveStatistic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::analyst::bilibili::live::_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::analyst::bilibili::live::_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::analyst::bilibili::live::_BiLiveStatistic_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1vNerve/analyst/bilibili/live/bilive_an"
  "alyst.proto\022\034vNerve.analyst.bilibili.liv"
  "e\"\227\005\n\017BiLiveStatistic\022\017\n\007room_id\030\001 \001(\r\022\r"
  "\n\005start\030\002 \001(\004\022\013\n\003end\030\003 \001(\004\022\026\n\016max_popula"
  "rity\030\004 \001(\r\022\027\n\017last_popularity\030\005 \001(\r\022\021\n\tg"
  "old_coin\030\006 \001(\r\022\023\n\013silver_coin\030\007 \001(\r\022\r\n\005t"
  "itle\030\010 \001(\t\022\014\n\004area\030\t \001(\t\022\r\n\005cover\030\n \001(\t\022"
  "\?\n\004type\030\013 \001(\01621.vNerve.analyst.bilibili."
  "live.BiLiveStatisticType\022\032\n\022real_danmaku"
  "_users\030\020 \003(\004\022\035\n\025lottery_danmaku_users\030\021 "
  "\003(\004\022`\n\023gold_users_and_coin\030\022 \003(\0132C.vNerv"
  "e.analyst.bilibili.live.BiLiveStatistic."
  "GoldUsersAndCoinEntry\022d\n\025silver_users_an"
  "d_coin\030\023 \003(\0132E.vNerve.analyst.bilibili.l"
  "ive.BiLiveStatistic.SilverUsersAndCoinEn"
  "try\022\032\n\022participated_users\030\024 \003(\004\0327\n\025GoldU"
  "sersAndCoinEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002"
  " \001(\r:\0028\001\0329\n\027SilverUsersAndCoinEntry\022\013\n\003k"
  "ey\030\001 \001(\004\022\r\n\005value\030\002 \001(\r:\0028\001*-\n\023BiLiveSta"
  "tisticType\022\t\n\005SLICE\020\000\022\013\n\007SESSION\020\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_sccs[3] = {
  &scc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base,
  &scc_info_BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base,
  &scc_info_BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_once;
static bool descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto = {
  &descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_initialized, descriptor_table_protodef_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto, "vNerve/analyst/bilibili/live/bilive_analyst.proto", 802,
  &descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_once, descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_sccs, descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto::offsets,
  file_level_metadata_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto, 3, file_level_enum_descriptors_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto, file_level_service_descriptors_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto), true);
namespace vNerve {
namespace analyst {
namespace bilibili {
namespace live {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiLiveStatisticType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto);
  return file_level_enum_descriptors_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto[0];
}
bool BiLiveStatisticType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse() {}
BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::MergeFrom(const BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse() {}
BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::MergeFrom(const BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BiLiveStatistic::InitAsDefaultInstance() {
}
class BiLiveStatistic::_Internal {
 public:
};

BiLiveStatistic::BiLiveStatistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.analyst.bilibili.live.BiLiveStatistic)
}
BiLiveStatistic::BiLiveStatistic(const BiLiveStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      real_danmaku_users_(from.real_danmaku_users_),
      lottery_danmaku_users_(from.lottery_danmaku_users_),
      participated_users_(from.participated_users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gold_users_and_coin_.MergeFrom(from.gold_users_and_coin_);
  silver_users_and_coin_.MergeFrom(from.silver_users_and_coin_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area().empty()) {
    area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_);
  }
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cover().empty()) {
    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vNerve.analyst.bilibili.live.BiLiveStatistic)
}

void BiLiveStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_)) + sizeof(type_));
}

BiLiveStatistic::~BiLiveStatistic() {
  // @@protoc_insertion_point(destructor:vNerve.analyst.bilibili.live.BiLiveStatistic)
  SharedDtor();
}

void BiLiveStatistic::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BiLiveStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiLiveStatistic& BiLiveStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiLiveStatistic_vNerve_2fanalyst_2fbilibili_2flive_2fbilive_5fanalyst_2eproto.base);
  return *internal_default_instance();
}


void BiLiveStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_danmaku_users_.Clear();
  lottery_danmaku_users_.Clear();
  gold_users_and_coin_.Clear();
  silver_users_and_coin_.Clear();
  participated_users_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* BiLiveStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_popularity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_popularity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gold_coin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gold_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 silver_coin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          silver_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.analyst.bilibili.live.BiLiveStatistic.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.analyst.bilibili.live.BiLiveStatistic.area"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cover = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_cover();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.analyst.bilibili.live.BiLiveStatistic.cover"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.analyst.bilibili.live.BiLiveStatisticType type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vNerve::analyst::bilibili::live::BiLiveStatisticType>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint64 real_danmaku_users = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_real_danmaku_users(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_real_danmaku_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 lottery_danmaku_users = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_lottery_danmaku_users(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_lottery_danmaku_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, uint32> gold_users_and_coin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&gold_users_and_coin_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, uint32> silver_users_and_coin = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&silver_users_and_coin_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 participated_users = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_participated_users(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_participated_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BiLiveStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_room_id(), target);
  }

  // uint64 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start(), target);
  }

  // uint64 end = 3;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end(), target);
  }

  // uint32 max_popularity = 4;
  if (this->max_popularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_popularity(), target);
  }

  // uint32 last_popularity = 5;
  if (this->last_popularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_popularity(), target);
  }

  // uint32 gold_coin = 6;
  if (this->gold_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gold_coin(), target);
  }

  // uint32 silver_coin = 7;
  if (this->silver_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_silver_coin(), target);
  }

  // string title = 8;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.analyst.bilibili.live.BiLiveStatistic.title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title(), target);
  }

  // string area = 9;
  if (this->area().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area().data(), static_cast<int>(this->_internal_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.analyst.bilibili.live.BiLiveStatistic.area");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_area(), target);
  }

  // string cover = 10;
  if (this->cover().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cover().data(), static_cast<int>(this->_internal_cover().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.analyst.bilibili.live.BiLiveStatistic.cover");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cover(), target);
  }

  // .vNerve.analyst.bilibili.live.BiLiveStatisticType type = 11;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // repeated uint64 real_danmaku_users = 16;
  {
    int byte_size = _real_danmaku_users_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          16, _internal_real_danmaku_users(), byte_size, target);
    }
  }

  // repeated uint64 lottery_danmaku_users = 17;
  {
    int byte_size = _lottery_danmaku_users_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          17, _internal_lottery_danmaku_users(), byte_size, target);
    }
  }

  // map<uint64, uint32> gold_users_and_coin = 18;
  if (!this->_internal_gold_users_and_coin().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_gold_users_and_coin().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_gold_users_and_coin().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_gold_users_and_coin().begin();
          it != this->_internal_gold_users_and_coin().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::Funcs::InternalSerialize(18, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_gold_users_and_coin().begin();
          it != this->_internal_gold_users_and_coin().end(); ++it) {
        target = BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::Funcs::InternalSerialize(18, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, uint32> silver_users_and_coin = 19;
  if (!this->_internal_silver_users_and_coin().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_silver_users_and_coin().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_silver_users_and_coin().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_silver_users_and_coin().begin();
          it != this->_internal_silver_users_and_coin().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::Funcs::InternalSerialize(19, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_silver_users_and_coin().begin();
          it != this->_internal_silver_users_and_coin().end(); ++it) {
        target = BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::Funcs::InternalSerialize(19, it->first, it->second, target, stream);
      }
    }
  }

  // repeated uint64 participated_users = 20;
  {
    int byte_size = _participated_users_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          20, _internal_participated_users(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.analyst.bilibili.live.BiLiveStatistic)
  return target;
}

size_t BiLiveStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 real_danmaku_users = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->real_danmaku_users_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _real_danmaku_users_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 lottery_danmaku_users = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->lottery_danmaku_users_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lottery_danmaku_users_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint64, uint32> gold_users_and_coin = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gold_users_and_coin_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_gold_users_and_coin().begin();
      it != this->_internal_gold_users_and_coin().end(); ++it) {
    total_size += BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint32> silver_users_and_coin = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_silver_users_and_coin_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_silver_users_and_coin().begin();
      it != this->_internal_silver_users_and_coin().end(); ++it) {
    total_size += BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint64 participated_users = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->participated_users_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _participated_users_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string title = 8;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string area = 9;
  if (this->area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area());
  }

  // string cover = 10;
  if (this->cover().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cover());
  }

  // uint64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start());
  }

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_id());
  }

  // uint32 max_popularity = 4;
  if (this->max_popularity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_popularity());
  }

  // uint64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end());
  }

  // uint32 last_popularity = 5;
  if (this->last_popularity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_popularity());
  }

  // uint32 gold_coin = 6;
  if (this->gold_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gold_coin());
  }

  // uint32 silver_coin = 7;
  if (this->silver_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_silver_coin());
  }

  // .vNerve.analyst.bilibili.live.BiLiveStatisticType type = 11;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiLiveStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const BiLiveStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiLiveStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.analyst.bilibili.live.BiLiveStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.analyst.bilibili.live.BiLiveStatistic)
    MergeFrom(*source);
  }
}

void BiLiveStatistic::MergeFrom(const BiLiveStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  real_danmaku_users_.MergeFrom(from.real_danmaku_users_);
  lottery_danmaku_users_.MergeFrom(from.lottery_danmaku_users_);
  gold_users_and_coin_.MergeFrom(from.gold_users_and_coin_);
  silver_users_and_coin_.MergeFrom(from.silver_users_and_coin_);
  participated_users_.MergeFrom(from.participated_users_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.area().size() > 0) {

    area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_);
  }
  if (from.cover().size() > 0) {

    cover_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cover_);
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.max_popularity() != 0) {
    _internal_set_max_popularity(from._internal_max_popularity());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.last_popularity() != 0) {
    _internal_set_last_popularity(from._internal_last_popularity());
  }
  if (from.gold_coin() != 0) {
    _internal_set_gold_coin(from._internal_gold_coin());
  }
  if (from.silver_coin() != 0) {
    _internal_set_silver_coin(from._internal_silver_coin());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void BiLiveStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiLiveStatistic::CopyFrom(const BiLiveStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.analyst.bilibili.live.BiLiveStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiLiveStatistic::IsInitialized() const {
  return true;
}

void BiLiveStatistic::InternalSwap(BiLiveStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  real_danmaku_users_.InternalSwap(&other->real_danmaku_users_);
  lottery_danmaku_users_.InternalSwap(&other->lottery_danmaku_users_);
  gold_users_and_coin_.Swap(&other->gold_users_and_coin_);
  silver_users_and_coin_.Swap(&other->silver_users_and_coin_);
  participated_users_.InternalSwap(&other->participated_users_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  area_.Swap(&other->area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cover_.Swap(&other->cover_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(room_id_, other->room_id_);
  swap(max_popularity_, other->max_popularity_);
  swap(end_, other->end_);
  swap(last_popularity_, other->last_popularity_);
  swap(gold_coin_, other->gold_coin_);
  swap(silver_coin_, other->silver_coin_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiLiveStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace live
}  // namespace bilibili
}  // namespace analyst
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse* Arena::CreateMaybeMessage< ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::analyst::bilibili::live::BiLiveStatistic_GoldUsersAndCoinEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse* Arena::CreateMaybeMessage< ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::analyst::bilibili::live::BiLiveStatistic_SilverUsersAndCoinEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::analyst::bilibili::live::BiLiveStatistic* Arena::CreateMaybeMessage< ::vNerve::analyst::bilibili::live::BiLiveStatistic >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::analyst::bilibili::live::BiLiveStatistic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
